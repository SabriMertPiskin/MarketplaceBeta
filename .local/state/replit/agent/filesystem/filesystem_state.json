{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# 3D Printing Marketplace\n\n## Overview\n\nThis is a full-stack 3D printing marketplace application that connects customers who need 3D printed objects with producers who can manufacture them. The platform handles the entire workflow from file upload and analysis to order management, pricing, and real-time communication between parties.\n\nThe application is built with a modern React frontend using TypeScript and a Node.js/Express backend, with PostgreSQL for data persistence. It includes features like STL file analysis, automated pricing calculations, real-time chat, order tracking, and comprehensive admin controls.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development\n- **UI Components**: Shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack Query for server state and React hooks for local state\n- **Routing**: Wouter for client-side routing\n- **3D Visualization**: Three.js with React Three Fiber for STL file viewing\n- **File Handling**: React Dropzone for drag-and-drop file uploads\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with proxy pattern to Flask backend\n- **Real-time Communication**: Socket.IO for live messaging and notifications\n- **File Processing**: Multer for file upload handling with STL/OBJ filtering\n\n### Database Design\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM with schema-first approach\n- **Schema**: Normalized relational design with tables for users, products, orders, messages, notifications, and materials\n- **User Roles**: Role-based access control (customer, producer, admin)\n- **Order Workflow**: Status-driven order lifecycle management\n\n### Authentication & Authorization\n- **Authentication**: Firebase Auth integration with custom token verification\n- **Authorization**: Role-based middleware with JWT token validation\n- **Session Management**: Stateless JWT tokens with refresh capability\n- **Data Privacy**: KVKK compliance with explicit consent tracking\n\n### File Storage & Processing\n- **File Upload**: Multi-part form handling with size and type validation\n- **STL Analysis**: Automated geometric analysis including dimensions, volume, surface area\n- **File Storage**: Integration with cloud storage services\n- **3D Preview**: Real-time STL rendering in browser with camera controls\n\n### Real-time Features\n- **WebSocket Communication**: Socket.IO for real-time messaging\n- **Live Notifications**: Event-driven notification system\n- **Order Updates**: Real-time status changes across all connected clients\n- **Chat System**: Direct messaging between customers and producers\n\n### Pricing Engine\n- **Dynamic Calculation**: Material cost, time estimation, and complexity analysis\n- **Multi-factor Pricing**: Support for different materials, infill densities, and support structures\n- **Commission Structure**: Platform fees and payment processing costs\n- **Transparent Breakdown**: Detailed cost itemization for all parties\n\n### Admin Dashboard\n- **User Management**: Comprehensive user administration and role assignment\n- **Order Oversight**: System-wide order monitoring and intervention capabilities\n- **Analytics**: Business metrics and performance tracking\n- **Content Moderation**: Product approval workflow and quality control\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Firebase**: Authentication services and user management\n- **Vite**: Development server and build tooling with HMR\n- **Replit**: Development environment integration with runtime error handling\n\n### Frontend Libraries\n- **Radix UI**: Unstyled, accessible component primitives\n- **TanStack Query**: Server state synchronization and caching\n- **React Hook Form**: Form validation with Zod schema integration\n- **Lucide Icons**: Consistent iconography throughout the application\n- **Date-fns**: Date formatting and manipulation with Turkish locale\n\n### Development Tools\n- **TypeScript**: Static type checking across frontend and backend\n- **ESLint/Prettier**: Code formatting and quality enforcement\n- **Drizzle Kit**: Database migration and schema management\n- **PostCSS**: CSS processing with Tailwind CSS integration\n\n### External Services Integration\n- **Flask Backend**: Existing Python service for specialized processing\n- **Payment Processing**: Integration ready for payment gateway services\n- **Cloud Storage**: File storage service integration for STL files\n- **Email Services**: Notification and communication services","size_bytes":4819},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/app_1756894532796.py":{"content":"import os\r\nimport uuid\r\nimport json\r\nimport logging\r\nimport struct\r\nfrom datetime import datetime, timedelta, timezone\r\nfrom functools import wraps\r\nfrom pathlib import Path\r\nimport threading\r\nimport time\r\nimport re\r\n\r\nimport requests\r\nfrom flask import Flask, request, jsonify, g, render_template, redirect, url_for\r\nfrom flask_socketio import SocketIO, emit, join_room, leave_room\r\nfrom werkzeug.utils import secure_filename\r\nfrom werkzeug.exceptions import RequestEntityTooLarge\r\nfrom PIL import Image, UnidentifiedImageError\r\n\r\nimport firebase_admin\r\nfrom firebase_admin import credentials, firestore, storage\r\nfrom firebase_admin import auth as fb_auth  # Güvenli Bearer token doğrulama\r\n\r\nimport numpy as np\r\nfrom flask_cors import CORS\r\nfrom flask import Flask, request, jsonify\r\nfrom flask_cors import CORS\r\n\r\napp = Flask(__name__)\r\n\r\n# Sadece belirli origin’leri whitelist’e ekleyelim\r\nCORS(app, resources={r\"/*\": {\"origins\": [\"http://localhost:5173\"]}}, supports_credentials=False)\r\n\r\n@app.route(\"/login\", methods=[\"POST\"])\r\ndef login():\r\n    data = request.get_json()\r\n    email = data.get(\"email\")\r\n    password = data.get(\"password\")\r\n\r\n    # Örnek kullanıcı kontrolü\r\n    if email == \"demo@example.com\" and password == \"demo1234\":\r\n        return jsonify({\"status\": \"success\", \"token\": \"demo_token\"}), 200\r\n    return jsonify({\"status\": \"fail\", \"message\": \"Invalid credentials\"}), 401\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(debug=True)\r\n\r\n\r\n# Pillow güvenlik (decompression bomb)\r\nImage.MAX_IMAGE_PIXELS = 40_000_000\r\n\r\n# -------- TR formatting helpers (Babel'siz) --------\r\nfrom decimal import Decimal, ROUND_HALF_UP, InvalidOperation\r\ntry:\r\n    from zoneinfo import ZoneInfo  # Py3.9+\r\n    ZONE_IST = ZoneInfo(\"Europe/Istanbul\")\r\n    def to_ist(dt): return dt.astimezone(ZONE_IST)\r\nexcept Exception:\r\n    import pytz\r\n    _tz_ist = pytz.timezone(\"Europe/Istanbul\")\r\n    def to_ist(dt): return _tz_ist.normalize(dt.astimezone(_tz_ist))\r\n\r\nTR_MONTHS = [\"\", \"Ocak\", \"Şubat\", \"Mart\", \"Nisan\", \"Mayıs\", \"Haziran\",\r\n             \"Temmuz\", \"Ağustos\", \"Eylül\", \"Ekim\", \"Kasım\", \"Aralık\"]\r\n\r\ndef parse_iso(s: str):\r\n    if not s:\r\n        return None\r\n    s = s.strip()\r\n    if s.endswith(\"Z\"):\r\n        s = s[:-1] + \"+00:00\"\r\n    try:\r\n        dt = datetime.fromisoformat(s)\r\n    except Exception:\r\n        return None\r\n    return dt\r\n\r\ndef format_try(amount) -> str:\r\n    try:\r\n        d = Decimal(str(amount)).quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP)\r\n    except InvalidOperation:\r\n        d = Decimal(\"0.00\")\r\n    sign = \"-\" if d < 0 else \"\"\r\n    d = abs(d)\r\n    whole = int(d)\r\n    frac = int((d - Decimal(whole)) * 100)\r\n    int_str = f\"{whole:,}\".replace(\",\", \".\")\r\n    return f\"{sign}₺{int_str},{frac:02d}\"\r\n\r\ndef format_datetime_tr(iso_str, with_time=True) -> str:\r\n    dt = parse_iso(iso_str)\r\n    if not dt:\r\n        return \"\"\r\n    ist = to_ist(dt)\r\n    if with_time:\r\n        return f\"{ist.day} {TR_MONTHS[ist.month]} {ist.year} {ist.hour:02d}:{ist.minute:02d}\"\r\n    else:\r\n        return f\"{ist.day} {TR_MONTHS[ist.month]} {ist.year}\"\r\n\r\ndef format_timedelta_tr(iso_str) -> str:\r\n    dt = parse_iso(iso_str)\r\n    if not dt:\r\n        return \"\"\r\n    delta = datetime.now(timezone.utc) - dt.astimezone(timezone.utc)\r\n    sec = int(delta.total_seconds())\r\n    if sec < 5: return \"şimdi\"\r\n    if sec < 60: return f\"{sec} saniye önce\"\r\n    m = sec // 60\r\n    if m < 60: return f\"{m} dakika önce\"\r\n    h = m // 60\r\n    if h < 24: return f\"{h} saat önce\"\r\n    d = h // 24\r\n    if d < 30: return f\"{d} gün önce\"\r\n    mo = d // 30\r\n    if mo < 12: return f\"{mo} ay önce\"\r\n    y = mo // 12\r\n    return f\"{y} yıl önce\"\r\n\r\ndef ts_tr():\r\n    try:\r\n        return datetime.now(ZONE_IST).strftime(\"%d.%m.%Y %H:%M\")\r\n    except Exception:\r\n        return datetime.utcnow().strftime(\"%d.%m.%Y %H:%M\")\r\n\r\n# ---------- LOGGING ----------\r\nlogging.basicConfig(\r\n    level=logging.INFO,\r\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\r\n    handlers=[logging.FileHandler('app.log', encoding='utf-8'), logging.StreamHandler()]\r\n)\r\n\r\nclass RedactingFormatter(logging.Formatter):\r\n    def format(self, record):\r\n        s = super().format(record)\r\n        s = re.sub(r'[\\w\\.-]+@[\\w\\.-]+', '[EMAIL]', s)\r\n        s = re.sub(r'\\b\\d{11}\\b', '[TCKN]', s)\r\n        s = re.sub(r'\\b\\d{10,11}\\b', '[PHONE]', s)\r\n        return s\r\n\r\n_root = logging.getLogger()\r\nfor h in _root.handlers:\r\n    h.setFormatter(RedactingFormatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\n# Audit logger (TR format satır)\r\naudit_logger = logging.getLogger(\"audit_tr\")\r\naudit_logger.setLevel(logging.INFO)\r\n_audit_handler = logging.FileHandler('audit_tr.log', encoding='utf-8')\r\n_audit_handler.setFormatter(logging.Formatter('%(message)s'))\r\naudit_logger.addHandler(_audit_handler)\r\naudit_logger.propagate = False\r\n\r\ndef pinata_url_from_hash(ipfs_hash: str):\r\n    if not ipfs_hash:\r\n        return None\r\n    return f\"https://gateway.pinata.cloud/ipfs/{ipfs_hash}\"\r\n\r\ndef tr_log(kullanici_adi: str = None, uretici_adi: str = None, fiyat_try_val=None, pinata_url: str = None, extra: dict = None):\r\n    line = f\"{ts_tr()} | Kullanıcı Adı: {kullanici_adi or '-'} | Üretici: {uretic_adi if (uretic_adi:=uretici_adi) else '-'} | Fiyat: {format_try(fiyat_try_val) if fiyat_try_val is not None else '-'} | PinataSTL: {pinata_url or '-'}\"\r\n    if extra:\r\n        parts = [f\"{k}={v}\" for k, v in extra.items() if v is not None]\r\n        if parts:\r\n            line += \" | \" + \" \".join(parts)\r\n    audit_logger.info(line)\r\n\r\n# ---------- PINATA KEYS DOSYASINDAN OKUMA ----------\r\ndef load_pinata_keys(filepath=\"pinata_keys.txt\"):\r\n    keys = {}\r\n    try:\r\n        if os.path.exists(filepath):\r\n            with open(filepath, \"r\") as f:\r\n                for line in f:\r\n                    if \"=\" in line and not line.startswith(\"#\"):\r\n                        k, v = line.strip().split(\"=\", 1)\r\n                        keys[k] = v\r\n    except Exception as e:\r\n        logger.warning(f\"Pinata key file read warning: {e}\")\r\n    # Env fallback overrides file\r\n    if os.getenv(\"PINATA_API_KEY\"):\r\n        keys[\"PINATA_API_KEY\"] = os.getenv(\"PINATA_API_KEY\")\r\n    if os.getenv(\"PINATA_SECRET_API_KEY\"):\r\n        keys[\"PINATA_SECRET_API_KEY\"] = os.getenv(\"PINATA_SECRET_API_KEY\")\r\n    if not keys:\r\n        logger.warning(\"Pinata keys not found, IPFS pinning will fail until configured.\")\r\n    return keys\r\n\r\npinata_cfg = load_pinata_keys()\r\n\r\n# ---------- CONFIGURATION ----------\r\nclass Config:\r\n    FIREBASE_CRED_PATH = os.getenv(\"FIREBASE_CRED_PATH\", \"tutustu-8d90d-1a62b2ddc941.json\")\r\n    BUCKET_NAME = os.getenv(\"BUCKET_NAME\", \"tutustu-8d90d.appspot.com\")\r\n    MAX_STL_SIZE = 100 * 1024 * 1024  # 100MB\r\n    MAX_PHOTO_SIZE = 10 * 1024 * 1024  # 10MB\r\n    ALLOWED_STL = {\".stl\"}\r\n    ALLOWED_IMAGES = {\".jpg\", \".jpeg\", \".png\"}\r\n    DEBUG = os.getenv(\"DEBUG\", \"True\").lower() == \"true\"\r\n    PORT = int(os.getenv(\"PORT\", 5000))\r\n    HOST = os.getenv(\"HOST\", \"0.0.0.0\")\r\n    SECRET_KEY = os.getenv(\"SECRET_KEY\", \"your-super-secret-key\")\r\n\r\n    # Security\r\n    REQUIRE_HTTPS = os.getenv(\"REQUIRE_HTTPS\", \"True\").lower() == \"true\"\r\n\r\n    # Pinata\r\n    PINATA_API_KEY = os.getenv(\"PINATA_API_KEY\", pinata_cfg.get(\"PINATA_API_KEY\"))\r\n    PINATA_SECRET_API_KEY = os.getenv(\"PINATA_SECRET_API_KEY\", pinata_cfg.get(\"PINATA_SECRET_API_KEY\"))\r\n    PINATA_BASE_URL = \"https://api.pinata.cloud/pinning/pinFileToIPFS\"\r\n\r\n    # Payment\r\n    IYZICO_API_KEY = os.getenv(\"IYZICO_API_KEY\", \"\")\r\n    IYZICO_SECRET_KEY = os.getenv(\"IYZICO_SECRET_KEY\", \"\")\r\n    PAYMENT_CALLBACK_URL = os.getenv(\"PAYMENT_CALLBACK_URL\", \"http://localhost:5000/api/payment/callback\")\r\n\r\n    # Commission\r\n    DEFAULT_COMMISSION_RATE = 0.15  # %15\r\n\r\n    # Storage signed URL TTL (seconds)\r\n    STORAGE_SIGNED_URL_TTL = int(os.getenv(\"STORAGE_SIGNED_URL_TTL\", \"3600\"))\r\n\r\n# ---------- UTILS ----------\r\ndef get_temp_path(filename: str) -> str:\r\n    temp_dir = Path(\"/tmp\") if os.name != 'nt' else Path(\"C:/temp\")\r\n    temp_dir.mkdir(parents=True, exist_ok=True)\r\n    return os.path.join(temp_dir, filename)\r\n\r\ndef now_iso() -> str:\r\n    return datetime.utcnow().isoformat() + \"Z\"\r\n\r\n# ---------- ORDER STATE MACHINE ----------\r\nclass OrderStateMachine:\r\n    TRANSITIONS = {\r\n        \"draft\": [\"pending\", \"cancelled\"],\r\n        \"pending\": [\"accepted\", \"rejected\", \"cancelled\"],\r\n        \"accepted\": [\"paid\", \"cancelled\"],\r\n        \"paid\": [\"in_production\", \"refunded\"],\r\n        \"in_production\": [\"completed_by_producer\"],\r\n        \"completed_by_producer\": [\"confirmed\", \"dispute_open\"],\r\n        \"dispute_open\": [\"confirmed\", \"refunded\", \"partial_refund\"],\r\n        \"confirmed\": [],\r\n        \"cancelled\": [],\r\n        \"refunded\": [],\r\n        \"rejected\": [],\r\n    }\r\n\r\n    @staticmethod\r\n    def can_transition(current_state: str, new_state: str) -> bool:\r\n        return new_state in OrderStateMachine.TRANSITIONS.get(current_state, [])\r\n\r\n    @staticmethod\r\n    def transition(db, order_id: str, new_state: str, actor_id: str, reason: str = None):\r\n        @firestore.transactional\r\n        def update_state(transaction):\r\n            order_ref = db.collection(\"orders\").document(order_id)\r\n            snap = transaction.get(order_ref)\r\n            order = snap.to_dict()\r\n            if not order:\r\n                raise ValueError(\"Order not found\")\r\n            current_state = order.get('status')\r\n            if not OrderStateMachine.can_transition(current_state, new_state):\r\n                raise ValueError(f\"Cannot transition from {current_state} to {new_state}\")\r\n            update_data = {\r\n                \"status\": new_state,\r\n                \"updated_at\": now_iso(),\r\n                f\"{new_state}_at\": now_iso(),\r\n                f\"{new_state}_by\": actor_id\r\n            }\r\n            if reason:\r\n                update_data[f\"{new_state}_reason\"] = reason\r\n            transaction.update(order_ref, update_data)\r\n            transaction.set(\r\n                db.collection(\"order_state_history\").document(),\r\n                {\r\n                    \"order_id\": order_id,\r\n                    \"from_state\": current_state,\r\n                    \"to_state\": new_state,\r\n                    \"actor_id\": actor_id,\r\n                    \"reason\": reason,\r\n                    \"created_at\": now_iso()\r\n                }\r\n            )\r\n            return order\r\n        transaction = db.transaction()\r\n        return update_state(transaction)\r\n\r\n# ---------- PRICING ENGINE ----------\r\nclass PricingEngine:\r\n    @staticmethod\r\n    def calculate_price(analysis: dict, params: dict) -> dict:\r\n        analysis = analysis or {}\r\n        weight_g = float(max(analysis.get('estimated_weight_g', 0.0), 0.1))  # min 0.1g\r\n        triangle_count = int(max(analysis.get('triangle_count', 0), 1))\r\n        print_time_minutes = float(max(analysis.get('estimated_print_time_minutes', 0.0), 0.0))\r\n\r\n        material_price_per_g = float(max(params.get('material_price_per_g', 0.02), 0.0))\r\n        infill = float(params.get('infill_density', 0.2))\r\n        infill = max(0.1, min(infill, 1.0))\r\n        hourly_rate = float(max(params.get('hourly_rate', 5.0), 0.0))\r\n        fixed_cost = float(max(params.get('fixed_cost', 1.0), 0.0))\r\n        support_required = bool(params.get('support_required', False))\r\n\r\n        margin_percent = float(max(params.get('margin_percent', 0.20), 0.0))\r\n        commission_rate = float(max(params.get('commission_rate', Config.DEFAULT_COMMISSION_RATE), 0.0))\r\n        provider_fee_rate = float(max(params.get('provider_fee_rate', 0.025), 0.0))\r\n        min_order = float(max(params.get('min_order_amount', 10.0), 0.0))\r\n\r\n        print_time_hours = print_time_minutes / 60.0\r\n\r\n        infill_multiplier = 1.0\r\n        if infill > 0.5:\r\n            infill_multiplier = 1.5\r\n        elif infill > 0.2:\r\n            infill_multiplier = 1.2\r\n\r\n        material_cost = max(weight_g * material_price_per_g * infill_multiplier, 0.0)\r\n        time_cost = max(print_time_hours * hourly_rate, 0.0)\r\n        support_cost = max((weight_g * 0.3 * material_price_per_g) if support_required else 0.0, 0.0)\r\n        producer_base_cost = material_cost + time_cost + support_cost + fixed_cost\r\n\r\n        producer_margin = max(producer_base_cost * margin_percent, 0.0)\r\n        producer_subtotal = producer_base_cost + producer_margin\r\n\r\n        platform_commission = max(producer_subtotal * commission_rate, 0.0)\r\n\r\n        denom = (1.0 - provider_fee_rate) if provider_fee_rate < 1.0 else 1.0\r\n        amount_before_fee = producer_subtotal + platform_commission\r\n        customer_total_calc = amount_before_fee / denom\r\n        customer_total = max(customer_total_calc, min_order)\r\n\r\n        payment_fee = customer_total * provider_fee_rate\r\n        amount_after_fee = customer_total - payment_fee\r\n        producer_earnings = max(amount_after_fee - platform_commission, 0.0)\r\n\r\n        breakdown = {\r\n            \"material_cost\": round(material_cost, 2),\r\n            \"time_cost\": round(time_cost, 2),\r\n            \"support_cost\": round(support_cost, 2),\r\n            \"fixed_cost\": round(fixed_cost, 2),\r\n            \"producer_margin\": round(producer_margin, 2),\r\n            \"producer_subtotal\": round(producer_subtotal, 2),\r\n            \"platform_commission\": round(platform_commission, 2),\r\n            \"payment_fee\": round(payment_fee, 2),\r\n            \"customer_total\": round(customer_total, 2)\r\n        }\r\n\r\n        return {\r\n            \"breakdown\": breakdown,\r\n            \"producer_earnings\": round(producer_earnings, 2),\r\n            \"platform_commission\": round(platform_commission, 2),\r\n            \"payment_fee\": round(payment_fee, 2),\r\n            \"customer_price\": round(customer_total, 2)\r\n        }\r\n\r\n# ---------- APP FACTORY ----------\r\ndef create_app(config_object=Config):\r\n    app = Flask(__name__)\r\n    app.config.from_object(config_object)\r\n    app.config['MAX_CONTENT_LENGTH'] = max(config_object.MAX_STL_SIZE, config_object.MAX_PHOTO_SIZE)\r\n    app.config[\"JSON_AS_ASCII\"] = False  # TR karakterler düzgün dönsün\r\n\r\n    # CORS: Vite (5173) - env ile override edilebilir\r\n    frontend_origins = os.environ.get(\r\n        \"FRONTEND_ORIGINS\",\r\n        \"http://localhost:5173,http://127.0.0.1:5173\"\r\n    ).split(\",\")\r\n\r\n    CORS(\r\n        app,\r\n        resources={r\"/*\": {\"origins\": frontend_origins}},\r\n        supports_credentials=False  # cookie kullanırsan True + fetch'te credentials: 'include'\r\n    )\r\n\r\n    # HTTPS zorunluluğu (prod)\r\n    @app.before_request\r\n    def enforce_https():\r\n        if app.config.get(\"REQUIRE_HTTPS\"):\r\n            proto = request.headers.get(\"X-Forwarded-Proto\", \"http\")\r\n            if not request.is_secure and proto != \"https\" and app.config.get(\"DEBUG\") is not True:\r\n                return jsonify({\"error\": \"HTTPS required\"}), 403\r\n\r\n    # Firebase initialize\r\n    try:\r\n        if not firebase_admin._apps:\r\n            cred_path = os.path.abspath(config_object.FIREBASE_CRED_PATH)\r\n            if not os.path.exists(cred_path):\r\n                raise FileNotFoundError(f\"Firebase credentials not found: {cred_path}\")\r\n            cred = credentials.Certificate(cred_path)\r\n            firebase_admin.initialize_app(cred, {\r\n                'storageBucket': config_object.BUCKET_NAME\r\n            })\r\n            logger.info(\"Firebase initialized.\")\r\n    except Exception as e:\r\n        logger.error(f\"Firebase init error: {e}\")\r\n        raise\r\n\r\n    db = firestore.client()\r\n    bucket = storage.bucket()\r\n    socketio = SocketIO(app, cors_allowed_origins=\"*\", async_mode='threading')\r\n\r\n    app.db = db\r\n    app.bucket = bucket\r\n    app.socketio = socketio\r\n\r\n    # Socket.IO session management\r\n    socket_sessions = {}\r\n\r\n    # ---------- DECORATORS ----------\r\n    def require_auth(fn):\r\n        @wraps(fn)\r\n        def wrapper(*args, **kwargs):\r\n            auth_header = request.headers.get(\"Authorization\", \"\")\r\n            uid = None\r\n            user_doc = None\r\n\r\n            # Prod: Bearer Firebase ID token\r\n            if auth_header.startswith(\"Bearer \"):\r\n                id_token = auth_header.split(\" \", 1)[1]\r\n                try:\r\n                    decoded = fb_auth.verify_id_token(id_token)\r\n                except Exception:\r\n                    return jsonify({\"error\": \"Invalid token\"}), 401\r\n                uid = decoded.get(\"uid\")\r\n                user_doc = app.db.collection(\"users\").document(uid).get()\r\n\r\n                if not user_doc.exists:\r\n                    # Auto-provision minimal doc\r\n                    app.db.collection(\"users\").document(uid).set({\r\n                        \"email\": decoded.get(\"email\"),\r\n                        \"name\": decoded.get(\"name\") or (decoded.get(\"email\") or \"\").split(\"@\")[0],\r\n                        \"role\": \"customer\",\r\n                        \"created_at\": now_iso(),\r\n                        \"last_login\": now_iso(),\r\n                        \"kvkk_consent\": False\r\n                    })\r\n                    user_doc = app.db.collection(\"users\").document(uid).get()\r\n\r\n            # Dev fallback: \"Token <uid>\"\r\n            elif app.config.get(\"DEBUG\") and auth_header.startswith(\"Token \"):\r\n                uid = auth_header.split(\" \", 1)[1]\r\n                user_doc = app.db.collection(\"users\").document(uid).get()\r\n                if not user_doc.exists:\r\n                    return jsonify({\"error\": \"User not found\"}), 401\r\n            else:\r\n                return jsonify({\"error\": \"Missing Authorization header\"}), 401\r\n\r\n            g.user = {\"id\": uid, **(user_doc.to_dict() or {})}\r\n            return fn(*args, **kwargs)\r\n        return wrapper\r\n\r\n    def require_role(role):\r\n        def decorator(fn):\r\n            @wraps(fn)\r\n            def wrapper(*args, **kwargs):\r\n                if g.user.get('role') != role:\r\n                    return jsonify({\"error\": f\"{role} role required\"}), 403\r\n                return fn(*args, **kwargs)\r\n            return wrapper\r\n        return decorator\r\n\r\n    # ---------- HELPERS ----------\r\n    def get_user(user_id):\r\n        doc = app.db.collection(\"users\").document(user_id).get()\r\n        if doc.exists:\r\n            data = doc.to_dict()\r\n            data['id'] = doc.id\r\n            return data\r\n        return None\r\n\r\n    def get_order(order_id):\r\n        doc = app.db.collection(\"orders\").document(order_id).get()\r\n        if doc.exists:\r\n            data = doc.to_dict()\r\n            data['id'] = doc.id\r\n            return data\r\n        return None\r\n\r\n    def get_product(product_id):\r\n        doc = app.db.collection(\"products\").document(product_id).get()\r\n        if doc.exists:\r\n            data = doc.to_dict()\r\n            data['id'] = doc.id\r\n            return data\r\n        return None\r\n\r\n    def create_notification(user_id, type, title, order_id=None, body=None):\r\n        notification_data = {\r\n            \"user_id\": user_id,\r\n            \"type\": type,\r\n            \"title\": title,\r\n            \"body\": body,\r\n            \"order_id\": order_id,\r\n            \"is_read\": False,\r\n            \"created_at\": now_iso()\r\n        }\r\n        app.db.collection(\"notifications\").add(notification_data)\r\n        socketio.emit('notification', notification_data, room=f\"user_{user_id}\")\r\n\r\n    # Storage signed URL\r\n    def generate_signed_url(blob, ttl=None):\r\n        from datetime import timedelta as _td\r\n        ttl = ttl or app.config['STORAGE_SIGNED_URL_TTL']\r\n        return blob.generate_signed_url(expiration=_td(seconds=ttl), method='GET')\r\n\r\n    def upload_private_to_storage(file_path, storage_path):\r\n        blob = app.bucket.blob(storage_path)\r\n        blob.upload_from_filename(file_path)\r\n        url = generate_signed_url(blob)\r\n        return url, storage_path\r\n\r\n    # ---------- STL ANALYZER ----------\r\n    class STLAnalyzer:\r\n        @staticmethod\r\n        def _is_ascii_stl(file_path: str) -> bool:\r\n            with open(file_path, 'rb') as f:\r\n                start = f.read(512)\r\n            try:\r\n                start_txt = start.decode('utf-8', errors='ignore').lstrip()\r\n            except Exception:\r\n                return False\r\n            return start_txt.startswith(\"solid\")\r\n\r\n        @staticmethod\r\n        def analyze_stl_binary_streaming(file_path, preview_limit=100, triangle_limit=2_000_000):\r\n            with open(file_path, \"rb\") as f:\r\n                header = f.read(80)\r\n                count_bytes = f.read(4)\r\n                if len(count_bytes) < 4:\r\n                    raise ValueError(\"Invalid STL file\")\r\n                count = struct.unpack(\"<I\", count_bytes)[0]\r\n\r\n                preview = []\r\n                count_read = 0\r\n                min_c = np.array([np.inf, np.inf, np.inf], dtype=np.float64)\r\n                max_c = -min_c\r\n                volume = 0.0\r\n                surface_area = 0.0\r\n\r\n                to_read = min(count, triangle_limit)\r\n                for i in range(to_read):\r\n                    rec = f.read(50)\r\n                    if len(rec) < 50:\r\n                        break\r\n                    data = struct.unpack(\"<12fH\", rec)\r\n                    v1 = np.array(data[3:6], dtype=np.float64)\r\n                    v2 = np.array(data[6:9], dtype=np.float64)\r\n                    v3 = np.array(data[9:12], dtype=np.float64)\r\n\r\n                    if len(preview) < preview_limit:\r\n                        preview.append([v1.tolist(), v2.tolist(), v3.tolist()])\r\n\r\n                    min_c = np.minimum(min_c, np.minimum(v1, np.minimum(v2, v3)))\r\n                    max_c = np.maximum(max_c, np.maximum(v1, np.maximum(v2, v3)))\r\n                    volume += np.dot(v1, np.cross(v2, v3)) / 6.0\r\n                    surface_area += 0.5 * np.linalg.norm(np.cross(v2 - v1, v3 - v1))\r\n                    count_read += 1\r\n\r\n                dims = (max_c - min_c)\r\n                return {\r\n                    'triangle_count': int(count_read),\r\n                    'dimensions_mm': dims.tolist() if np.all(np.isfinite(dims)) else [0, 0, 0],\r\n                    'volume_mm3': float(abs(volume)),\r\n                    'surface_area_mm2': float(surface_area),\r\n                    'bounding_box_volume_mm3': float(np.prod(dims)) if np.all(np.isfinite(dims)) else 0.0,\r\n                    'preview': preview\r\n                }\r\n\r\n        @staticmethod\r\n        def analyze_model_geometry(file_path):\r\n            if STLAnalyzer._is_ascii_stl(file_path):\r\n                raise ValueError(\"ASCII STL şimdilik desteklenmiyor. Lütfen binary STL yükleyin.\")\r\n            return STLAnalyzer.analyze_stl_binary_streaming(file_path)\r\n\r\n        @staticmethod\r\n        def estimate_print_properties(analysis, material_density=1.24):\r\n            if not analysis:\r\n                return {}\r\n            volume_cm3 = analysis.get('volume_mm3', 0) / 1000.0\r\n            weight = volume_cm3 * material_density\r\n            triangle_count = analysis.get('triangle_count', 0)\r\n            complexity = min(triangle_count / 1000.0, 3.0)\r\n            base_time = volume_cm3 * 2.0\r\n            est_time = base_time + (base_time * 0.5 * complexity)\r\n            difficulty = \"Kolay\" if complexity < 1 else \"Orta\" if complexity < 2 else \"Zor\"\r\n            return {\r\n                'estimated_weight_g': float(weight),\r\n                'estimated_print_time_minutes': float(est_time),\r\n                'print_difficulty': difficulty,\r\n                'complexity_score': float(complexity)\r\n            }\r\n\r\n    def pin_file_to_pinata(file_path, filename):\r\n        try:\r\n            url = app.config['PINATA_BASE_URL']\r\n            headers = {\r\n                \"pinata_api_key\": app.config['PINATA_API_KEY'] or \"\",\r\n                \"pinata_secret_api_key\": app.config['PINATA_SECRET_API_KEY'] or \"\",\r\n            }\r\n            if not headers[\"pinata_api_key\"] or not headers[\"pinata_secret_api_key\"]:\r\n                logger.error(\"Pinata keys not configured.\")\r\n                return None, None\r\n            with open(file_path, 'rb') as f:\r\n                files = {'file': (filename, f, 'application/octet-stream')}\r\n                response = requests.post(url, headers=headers, files=files, timeout=60)\r\n                response.raise_for_status()\r\n                pinata_response = response.json()\r\n                ipfs_hash = pinata_response.get(\"IpfsHash\")\r\n                if ipfs_hash:\r\n                    logger.info(f\"File pinned to Pinata. IPFS Hash: {ipfs_hash}\")\r\n                    return ipfs_hash, pinata_response\r\n                else:\r\n                    logger.error(f\"Invalid Pinata response: {pinata_response}\")\r\n                    return None, None\r\n        except requests.exceptions.RequestException as e:\r\n            logger.error(f\"Pinata upload error: {e}\")\r\n            return None, None\r\n\r\n    # ---------- ROUTES (PAGES) ----------\r\n    @app.route(\"/\")\r\n    def index():\r\n        return redirect(url_for('dashboard'))\r\n\r\n    @app.route(\"/dashboard\")\r\n    def dashboard():\r\n        return render_template('dashboard.html')\r\n\r\n    @app.route(\"/upload\")\r\n    def upload_page():\r\n        return render_template('upload.html')\r\n\r\n    @app.route(\"/order/<order_id>\")\r\n    def order_detail_page(order_id):\r\n        return render_template('order_detail.html', order_id=order_id)\r\n\r\n    @app.route(\"/producer/pool\")\r\n    def producer_pool_page():\r\n        return render_template('producer_pool.html')\r\n\r\n    @app.route(\"/admin\")\r\n    def admin_dashboard():\r\n        return render_template('admin_dashboard.html')\r\n\r\n    # KVKK info pages (minimal HTML)\r\n    @app.route(\"/kvkk/aydinlatma\")\r\n    def kvkk_aydinlatma_page():\r\n        return \"\"\"\r\n        <html><head><meta charset=\"utf-8\"><title>KVKK Aydınlatma Metni</title></head>\r\n        <body style=\"font-family:Arial;max-width:800px;margin:20px auto;line-height:1.6;\">\r\n        <h1>KVKK Aydınlatma Metni</h1>\r\n        <p>İşlenen veriler: ad-soyad, iletişim, adres, ödeme bilgisi (ödeme sağlayıcı üzerinden), STL dosyaları ve görseller; sipariş/mesaj verileri.</p>\r\n        <p>Amaçlar: sipariş/üretim/kargo/faturalandırma/destek; güvenlik ve mevzuat yükümlülükleri.</p>\r\n        <p>Aktarılanlar: üreticiler, kargo firmaları, ödeme ve e-arşiv sağlayıcıları.</p>\r\n        <p>Saklama: sipariş ve fatura kayıtları mevzuat gereği 10 yıla kadar saklanabilir.</p>\r\n        <p>Haklar: bilgi alma, düzeltme, silme, itiraz, veri taşınabilirliği (uygunsa).</p>\r\n        </body></html>\r\n        \"\"\"\r\n\r\n    @app.route(\"/kvkk/acik-riza\")\r\n    def kvkk_acik_riza_page():\r\n        return \"\"\"\r\n        <html><head><meta charset=\"utf-8\"><title>Açık Rıza Metni</title></head>\r\n        <body style=\"font-family:Arial;max-width:800px;margin:20px auto;line-height:1.6;\">\r\n        <h1>Açık Rıza Metni</h1>\r\n        <p>Yurt dışına veri aktarımı (örn. bulut altyapısı), opsiyonel pazarlama ve profil/analiz amaçlı işleme için açık rızanız talep edilebilir. Rızanızı dilediğiniz zaman geri çekebilirsiniz.</p>\r\n        </body></html>\r\n        \"\"\"\r\n\r\n    # ---------- API ENDPOINTS ----------\r\n    @app.route(\"/api/health\", methods=[\"GET\"])\r\n    def health_check():\r\n        try:\r\n            app.db.collection(\"health_check\").limit(1).get()\r\n            return jsonify({\r\n                \"status\": \"healthy\",\r\n                \"timestamp\": now_iso(),\r\n                \"services\": {\"database\": \"connected\", \"storage\": \"connected\"}\r\n            })\r\n        except Exception as e:\r\n            logger.error(f\"Health check failed: {e}\")\r\n            return jsonify({\"status\": \"unhealthy\", \"error\": str(e)}), 500\r\n\r\n    # Product detail (GUI/quote için)\r\n    @app.route(\"/api/products/<product_id>\", methods=[\"GET\"])\r\n    @require_auth\r\n    def get_product_detail(product_id):\r\n        prod = app.db.collection(\"products\").document(product_id).get()\r\n        if not prod.exists:\r\n            return jsonify({\"error\": \"Product not found\"}), 404\r\n        data = prod.to_dict()\r\n        data[\"id\"] = prod.id\r\n        return jsonify(data)\r\n\r\n    # Pricing quote\r\n    @app.route(\"/api/pricing/quote\", methods=[\"POST\"])\r\n    @require_auth\r\n    def pricing_quote():\r\n        data = request.get_json() or {}\r\n        product_id = data.get(\"product_id\")\r\n        material_id = data.get(\"material_id\")\r\n        if not product_id or not material_id:\r\n            return jsonify({\"error\": \"product_id and material_id required\"}), 400\r\n\r\n        prod_doc = app.db.collection(\"products\").document(product_id).get()\r\n        if not prod_doc.exists:\r\n            return jsonify({\"error\": \"Product not found\"}), 404\r\n        product = prod_doc.to_dict()\r\n\r\n        mat_doc = app.db.collection(\"materials\").document(material_id).get()\r\n        if not mat_doc.exists:\r\n            return jsonify({\"error\": \"Material not found\"}), 404\r\n        material = mat_doc.to_dict()\r\n\r\n        params = {\r\n            \"material_price_per_g\": material[\"price_per_gram\"],\r\n            \"infill_density\": float(data.get(\"infill_density\", 0.2)),\r\n            \"support_required\": bool(data.get(\"support_required\", False)),\r\n            \"hourly_rate\": float(data.get(\"hourly_rate\", 5.0)),\r\n            \"fixed_cost\": float(data.get(\"fixed_cost\", 1.0)),\r\n            \"margin_percent\": float(data.get(\"margin_percent\", 0.20)),\r\n            \"commission_rate\": float(data.get(\"commission_rate\", Config.DEFAULT_COMMISSION_RATE)),\r\n            \"provider_fee_rate\": float(data.get(\"provider_fee_rate\", 0.025)),\r\n            \"min_order_amount\": float(data.get(\"min_order_amount\", 10.0)),\r\n        }\r\n        pricing = PricingEngine.calculate_price(product.get(\"analysis\", {}), params)\r\n        return jsonify({\"pricing\": pricing, \"params\": params})\r\n\r\n    # ---------- LOGIN (API) ----------\r\n    @app.route(\"/api/login\", methods=[\"POST\", \"OPTIONS\"])\r\n    def api_login():\r\n        # Preflight\r\n        if request.method == \"OPTIONS\":\r\n            return (\"\", 204)\r\n\r\n        data = request.get_json(silent=True) or {}\r\n        auth_header = request.headers.get(\"Authorization\", \"\")\r\n\r\n        # 1) PROD yolu: Bearer id_token\r\n        id_token = data.get(\"id_token\")\r\n        if auth_header.startswith(\"Bearer \"):\r\n            id_token = auth_header.split(\" \", 1)[1]\r\n\r\n        if id_token:\r\n            try:\r\n                decoded = fb_auth.verify_id_token(id_token)\r\n            except Exception as e:\r\n                logger.warning(f\"verify_id_token failed: {e}\")\r\n                return jsonify({\"success\": False, \"error\": \"Invalid id_token\"}), 401\r\n\r\n            uid = decoded.get(\"uid\")\r\n            email = decoded.get(\"email\")\r\n            name = decoded.get(\"name\") or (email or \"\").split(\"@\")[0]\r\n            user_ref = app.db.collection(\"users\").document(uid)\r\n            user_doc = user_ref.get()\r\n            created = False\r\n\r\n            if not user_doc.exists:\r\n                if not data.get(\"kvkk_consent\"):\r\n                    return jsonify({\"success\": False, \"error\": \"KVKK onayı gerekli\"}), 400\r\n                user_ref.set({\r\n                    \"email\": email,\r\n                    \"name\": name,\r\n                    \"role\": \"customer\",\r\n                    \"created_at\": now_iso(),\r\n                    \"last_login\": now_iso(),\r\n                    \"kvkk_consent\": True,\r\n                    \"kvkk_consent_date\": now_iso()\r\n                })\r\n                created = True\r\n            else:\r\n                updates = {\"last_login\": now_iso()}\r\n                current = user_doc.to_dict() or {}\r\n                if data.get(\"kvkk_consent\") is True and not current.get(\"kvkk_consent\"):\r\n                    updates.update({\r\n                        \"kvkk_consent\": True,\r\n                        \"kvkk_consent_date\": now_iso()\r\n                    })\r\n                user_ref.update(updates)\r\n\r\n            user = user_ref.get().to_dict()\r\n            return jsonify({\r\n                \"success\": True,\r\n                \"token\": f\"Bearer {id_token}\",\r\n                \"user\": {\"id\": uid, **user},\r\n                \"created\": created\r\n            }), 201 if created else 200\r\n\r\n        # 2) DEV yolu: email + password (DEBUG=True iken)\r\n        if app.config.get(\"DEBUG\"):\r\n            email = (data.get(\"email\") or \"\").strip().lower()\r\n            password = data.get(\"password\") or \"\"\r\n\r\n            # email + password geldiyse in-memory doğrulama (örnek)\r\n            if email and password:\r\n                DEV_USERS = {\r\n                    \"demo@example.com\": {\"password\": \"demo1234\", \"name\": \"Demo Kullanıcı\"},\r\n                    \"test@site.com\": {\"password\": \"test123\", \"name\": \"Test Kullanıcı\"},\r\n                }\r\n                u = DEV_USERS.get(email)\r\n                if not u or u[\"password\"] != password:\r\n                    return jsonify({\"success\": False, \"error\": \"Geçersiz email veya şifre.\"}), 401\r\n\r\n                # Firestore'da upsert et\r\n                existing = list(app.db.collection(\"users\").where(\"email\", \"==\", email).limit(1).stream())\r\n                if existing:\r\n                    uid = existing[0].id\r\n                    user_data = existing[0].to_dict() or {}\r\n                    app.db.collection(\"users\").document(uid).update({\"last_login\": now_iso()})\r\n                else:\r\n                    uid = str(uuid.uuid4())\r\n                    user_data = {\r\n                        \"email\": email,\r\n                        \"name\": u[\"name\"],\r\n                        \"role\": \"customer\",\r\n                        \"created_at\": now_iso(),\r\n                        \"last_login\": now_iso(),\r\n                        \"kvkk_consent\": True,\r\n                        \"kvkk_consent_date\": now_iso()\r\n                    }\r\n                    app.db.collection(\"users\").document(uid).set(user_data)\r\n\r\n                return jsonify({\r\n                    \"success\": True,\r\n                    \"token\": f\"Token {uid}\",\r\n                    \"user\": {\"id\": uid, **user_data}\r\n                }), 200\r\n\r\n            # DEV fallback: sadece email ile giriş (ilk seferde KVKK şart)\r\n            if not email:\r\n                return jsonify({\"success\": False, \"error\": \"email, password veya id_token gerekli\"}), 400\r\n\r\n            name = data.get(\"name\", email.split(\"@\")[0])\r\n            user_query = app.db.collection(\"users\").where(\"email\", \"==\", email).limit(1).stream()\r\n            user_doc = next(user_query, None)\r\n\r\n            if user_doc:\r\n                uid = user_doc.id\r\n                user_data = user_doc.to_dict()\r\n                app.db.collection(\"users\").document(uid).update({\"last_login\": now_iso()})\r\n                if data.get(\"kvkk_consent\") is True and not user_data.get(\"kvkk_consent\"):\r\n                    app.db.collection(\"users\").document(uid).update({\r\n                        \"kvkk_consent\": True,\r\n                        \"kvkk_consent_date\": now_iso()\r\n                    })\r\n                return jsonify({\r\n                    \"success\": True,\r\n                    \"token\": f\"Token {uid}\",\r\n                    \"user\": {\"id\": uid, **user_data}\r\n                }), 200\r\n\r\n            if not data.get(\"kvkk_consent\"):\r\n                return jsonify({\"success\": False, \"error\": \"KVKK onayı gerekli\"}), 400\r\n\r\n            uid = str(uuid.uuid4())\r\n            user_data = {\r\n                \"email\": email,\r\n                \"name\": name,\r\n                \"role\": \"customer\",\r\n                \"created_at\": now_iso(),\r\n                \"last_login\": now_iso(),\r\n                \"kvkk_consent\": True,\r\n                \"kvkk_consent_date\": now_iso()\r\n            }\r\n            app.db.collection(\"users\").document(uid).set(user_data)\r\n\r\n            logger.info(f\"New user (DEV) created: {email}\")\r\n            return jsonify({\r\n                \"success\": True,\r\n                \"token\": f\"Token {uid}\",\r\n                \"user\": {\"id\": uid, **user_data}\r\n            }), 201\r\n\r\n        # Prod ama id_token yoksa\r\n        return jsonify({\"success\": False, \"error\": \"id_token required\"}), 400\r\n\r\n    # /login alias\r\n    @app.route(\"/login\", methods=[\"POST\", \"OPTIONS\"])\r\n    def login_alias():\r\n        return api_login()\r\n\r\n    @app.route(\"/api/upload/stl\", methods=[\"POST\"])\r\n    @require_auth\r\n    def upload_stl_with_analysis():\r\n        if \"file\" not in request.files:\r\n            return jsonify({\"error\": \"File required\"}), 400\r\n        file = request.files[\"file\"]\r\n        if not file.filename:\r\n            return jsonify({\"error\": \"No file selected\"}), 400\r\n        if not Path(file.filename).suffix.lower() in app.config['ALLOWED_STL']:\r\n            return jsonify({\"error\": \"Invalid file type, only STL allowed\"}), 400\r\n\r\n        file.stream.seek(0, 2)\r\n        size = file.stream.tell()\r\n        file.stream.seek(0)\r\n        if size > app.config['MAX_STL_SIZE'] or size == 0:\r\n            return jsonify({\"error\": \"File too large or empty\"}), 400\r\n\r\n        temp_path = None\r\n        try:\r\n            temp_filename = f\"temp_{uuid.uuid4().hex}_{secure_filename(file.filename)}\"\r\n            temp_path = get_temp_path(temp_filename)\r\n            with open(temp_path, 'wb') as temp_file:\r\n                temp_file.write(file.stream.read())\r\n\r\n            # STL analizi (streaming) + ASCII reddi\r\n            try:\r\n                geometry = STLAnalyzer.analyze_model_geometry(temp_path)\r\n            except ValueError as ve:\r\n                return jsonify({\"error\": str(ve)}), 400\r\n            except Exception as e:\r\n                logger.error(f\"STL parse error: {e}\")\r\n                return jsonify({\"error\": \"Invalid STL file\"}), 400\r\n\r\n            print_props = STLAnalyzer.estimate_print_properties(geometry)\r\n\r\n            # Pinata\r\n            ipfs_hash, pinata_resp = pin_file_to_pinata(temp_path, secure_filename(file.filename))\r\n            if not ipfs_hash:\r\n                return jsonify({\"error\": \"File upload to IPFS failed\"}), 502\r\n\r\n            analysis_result = {\r\n                **{k: v for k, v in geometry.items() if k != 'preview'},\r\n                **print_props,\r\n                'file_size': size,\r\n                'analysis_timestamp': now_iso()\r\n            }\r\n\r\n            meta = request.form.to_dict() if request.form else (request.get_json(silent=True) or {})\r\n\r\n            product_data = {\r\n                \"owner_id\": g.user['id'],\r\n                \"title\": meta.get(\"title\", file.filename),\r\n                \"description\": meta.get(\"description\", \"\"),\r\n                \"file_ipfs_hash\": ipfs_hash,\r\n                \"original_filename\": file.filename,\r\n                \"analysis\": analysis_result,\r\n                \"created_at\": now_iso(),\r\n                \"status\": \"active\"\r\n            }\r\n            product_ref, _ = app.db.collection(\"products\").add(product_data)\r\n            product_id = product_ref.id\r\n\r\n            tr_log(\r\n                kullanici_adi=g.user.get('name'),\r\n                uretici_adi=None,\r\n                fiyat_try_val=None,\r\n                pinata_url=pinata_url_from_hash(ipfs_hash),\r\n                extra={\"event\":\"stl_upload\", \"user_id\": g.user['id'], \"product_title\": product_data[\"title\"]}\r\n            )\r\n\r\n            result = {\r\n                \"product_id\": product_id,\r\n                \"filename\": file.filename,\r\n                \"size\": size,\r\n                \"analysis\": analysis_result,\r\n                \"triangles_preview\": geometry.get('preview', []),\r\n                \"ipfs_hash\": ipfs_hash,\r\n                \"pinata_response\": pinata_resp\r\n            }\r\n\r\n            logger.info(f\"STL uploaded and analyzed by user {g.user['id']}\")\r\n            return jsonify(result)\r\n\r\n        except Exception as e:\r\n            logger.error(f\"STL upload/analysis error: {e}\")\r\n            return jsonify({\"error\": \"Upload and analysis failed\"}), 500\r\n\r\n        finally:\r\n            if temp_path and os.path.exists(temp_path):\r\n                try:\r\n                    os.remove(temp_path)\r\n                except Exception as ex:\r\n                    logger.warning(f\"Failed to delete temp file {temp_path}: {ex}\")\r\n\r\n    @app.route(\"/api/materials\", methods=[\"GET\"])\r\n    def get_materials():\r\n        try:\r\n            docs = list(app.db.collection(\"materials\").stream())\r\n            materials = []\r\n            for doc in docs:\r\n                data = doc.to_dict()\r\n                data[\"id\"] = doc.id\r\n                materials.append(data)\r\n\r\n            if not materials:\r\n                default_materials = [\r\n                    {\"name\": \"PLA\", \"price_per_gram\": 0.02, \"density\": 1.24, \"description\": \"Kolay yazdırılabilir, biyolojik olarak çözünür\"},\r\n                    {\"name\": \"ABS\", \"price_per_gram\": 0.025, \"density\": 1.04, \"description\": \"Güçlü ve dayanıklı\"},\r\n                    {\"name\": \"PETG\", \"price_per_gram\": 0.03, \"density\": 1.27, \"description\": \"Kimyasallara dayanıklı, şeffaf\"},\r\n                    {\"name\": \"TPU\", \"price_per_gram\": 0.04, \"density\": 1.21, \"description\": \"Esnek malzeme\"},\r\n                    {\"name\": \"Nylon\", \"price_per_gram\": 0.05, \"density\": 1.14, \"description\": \"Yüksek dayanıklılık\"}\r\n                ]\r\n                for mat in default_materials:\r\n                    doc_ref = app.db.collection(\"materials\").document()\r\n                    doc_ref.set({**mat, \"active\": True, \"created_at\": now_iso()})\r\n                    mat[\"id\"] = doc_ref.id\r\n                    materials.append(mat)\r\n            return jsonify({\"materials\": materials, \"count\": len(materials)})\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Material list error: {e}\")\r\n            return jsonify({\"error\": \"Failed to get materials\"}), 500\r\n\r\n    @app.route(\"/api/orders/create\", methods=[\"POST\"])\r\n    @require_auth\r\n    def create_order():\r\n        try:\r\n            data = request.get_json() or {}\r\n            required_fields = [\"product_id\", \"material_id\", \"infill_density\", \"layer_height_mm\"]\r\n            for field in required_fields:\r\n                if field not in data:\r\n                    return jsonify({\"error\": f\"{field} is required\"}), 400\r\n\r\n            product = get_product(data[\"product_id\"])\r\n            if not product:\r\n                return jsonify({\"error\": \"Product not found\"}), 404\r\n\r\n            material_doc = app.db.collection(\"materials\").document(data[\"material_id\"]).get()\r\n            if not material_doc.exists:\r\n                return jsonify({\"error\": \"Material not found\"}), 404\r\n            material = material_doc.to_dict()\r\n\r\n            pricing_params = {\r\n                \"material_price_per_g\": material[\"price_per_gram\"],\r\n                \"infill_density\": data[\"infill_density\"],\r\n                \"support_required\": data.get(\"support_required\", False),\r\n                \"hourly_rate\": float(data.get(\"hourly_rate\", 5.0)),\r\n                \"fixed_cost\": float(data.get(\"fixed_cost\", 1.0)),\r\n                \"margin_percent\": float(data.get(\"margin_percent\", 0.20)),\r\n                \"commission_rate\": Config.DEFAULT_COMMISSION_RATE,\r\n                \"provider_fee_rate\": float(data.get(\"provider_fee_rate\", 0.025)),\r\n                \"min_order_amount\": float(data.get(\"min_order_amount\", 10.0))\r\n            }\r\n            pricing = PricingEngine.calculate_price(product.get(\"analysis\", {}), pricing_params)\r\n\r\n            order_data = {\r\n                \"product_id\": data[\"product_id\"],\r\n                \"customer_id\": g.user[\"id\"],\r\n                \"producer_id\": None,\r\n                \"status\": \"pending\",\r\n                \"material_id\": data[\"material_id\"],\r\n                \"material_name\": material[\"name\"],\r\n                \"infill_density\": data[\"infill_density\"],\r\n                \"layer_height_mm\": data[\"layer_height_mm\"],\r\n                \"support_required\": data.get(\"support_required\", False),\r\n                \"color\": data.get(\"color\", \"default\"),\r\n                \"notes\": data.get(\"notes\", \"\"),\r\n                \"auto_price\": pricing[\"customer_price\"],\r\n                \"final_price\": pricing[\"customer_price\"],\r\n                \"producer_earnings\": pricing[\"producer_earnings\"],\r\n                \"commission_amount\": pricing[\"platform_commission\"],\r\n                \"payment_provider\": \"papara\",\r\n                \"payment_fee\": pricing[\"payment_fee\"],\r\n                \"pricing_breakdown\": pricing[\"breakdown\"],\r\n                \"payment_status\": \"unpaid\",\r\n                \"created_at\": now_iso(),\r\n                \"updated_at\": now_iso()\r\n            }\r\n\r\n            order_ref, _ = app.db.collection(\"orders\").add(order_data)\r\n            order_id = order_ref.id\r\n\r\n            tr_log(\r\n                kullanici_adi=g.user.get('name'),\r\n                uretici_adi=None,\r\n                fiyat_try_val=order_data[\"final_price\"],\r\n                pinata_url=pinata_url_from_hash(product.get(\"file_ipfs_hash\")),\r\n                extra={\"event\":\"order_created\", \"order_id\": order_id, \"product_id\": data[\"product_id\"]}\r\n            )\r\n\r\n            producers = app.db.collection(\"users\").where(\"role\", \"==\", \"producer\").stream()\r\n            for producer_doc in producers:\r\n                producer = producer_doc.to_dict()\r\n                if can_producer_handle_order(producer, product, order_data):\r\n                    create_notification(producer_doc.id, \"new_order_in_pool\", \"Yeni sipariş havuzda\", order_id)\r\n\r\n            return jsonify({\r\n                \"order_id\": order_id,\r\n                \"status\": \"pending\",\r\n                \"pricing\": pricing\r\n            }), 201\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Order creation error: {e}\")\r\n            return jsonify({\"error\": \"Failed to create order\"}), 500\r\n\r\n    def can_producer_handle_order(producer, product, order):\r\n        if order[\"material_name\"] not in producer.get(\"materials_supported\", []):\r\n            return False\r\n\r\n        printers = producer.get(\"printers\", [])\r\n        if not printers:\r\n            return True  # printer belirtilmemişse varsayılan kabul\r\n\r\n        dimensions = product.get(\"analysis\", {}).get(\"dimensions_mm\", [0, 0, 0])\r\n        for printer in printers:\r\n            max_xyz = printer.get(\"max_xyz\", [200, 200, 200])  # default hacim\r\n            if all(d <= m for d, m in zip(dimensions, max_xyz)):\r\n                return True\r\n        return False\r\n\r\n    # Adres set etme (müşteri)\r\n    @app.route(\"/api/orders/<order_id>/shipping/info\", methods=[\"POST\"])\r\n    @require_auth\r\n    def set_shipping_info(order_id):\r\n        order = get_order(order_id)\r\n        if not order:\r\n            return jsonify({\"error\": \"Order not found\"}), 404\r\n        if order['customer_id'] != g.user['id'] and g.user.get('role') != 'admin':\r\n            return jsonify({\"error\": \"Unauthorized\"}), 403\r\n        data = request.get_json() or {}\r\n        app.db.collection(\"orders\").document(order_id).update({\r\n            \"shipping_address\": data.get(\"address\", {}),\r\n            \"shipping_method\": data.get(\"method\", \"MANUAL\"),\r\n            \"shipping_fee_try\": float(data.get(\"fee_try\", 0.0)),\r\n            \"updated_at\": now_iso()\r\n        })\r\n        return jsonify({\"success\": True})\r\n\r\n    # Üretici takip no\r\n    @app.route(\"/api/orders/<order_id>/shipping/tracking\", methods=[\"POST\"])\r\n    @require_auth\r\n    @require_role(\"producer\")\r\n    def set_tracking_number(order_id):\r\n        order = get_order(order_id)\r\n        if not order:\r\n            return jsonify({\"error\": \"Order not found\"}), 404\r\n        # Yetki: sadece bu siparişin üreticisi ya da admin\r\n        if order.get('producer_id') != g.user['id'] and g.user.get('role') != 'admin':\r\n            return jsonify({\"error\": \"Unauthorized\"}), 403\r\n        data = request.get_json() or {}\r\n        app.db.collection(\"orders\").document(order_id).update({\r\n            \"tracking_number\": data.get(\"tracking_number\"),\r\n            \"carrier\": data.get(\"carrier\", \"MANUAL\"),\r\n            \"shipping_status\": \"shipped\",\r\n            \"shipped_at\": now_iso(),\r\n            \"updated_at\": now_iso()\r\n        })\r\n        create_notification(order['customer_id'], \"shipping_update\", \"Kargo çıkışı yapıldı\", order_id)\r\n        return jsonify({\"success\": True})\r\n\r\n    @app.route(\"/api/producer/pool\", methods=[\"GET\"])\r\n    @require_auth\r\n    @require_role(\"producer\")\r\n    def get_producer_pool():\r\n        try:\r\n            producer = g.user\r\n            query = app.db.collection(\"orders\").where(\"status\", \"==\", \"pending\")\r\n            orders = []\r\n            for doc in query.stream():\r\n                order = doc.to_dict()\r\n                order['id'] = doc.id\r\n                product = get_product(order['product_id'])\r\n                if product and can_producer_handle_order(producer, product, order):\r\n                    order['product'] = product\r\n                    orders.append(order)\r\n\r\n            return jsonify({\r\n                \"orders\": orders,\r\n                \"count\": len(orders),\r\n                \"producer_stats\": {\r\n                    \"success_rate\": producer.get(\"success_rate\", 0),\r\n                    \"total_orders\": producer.get(\"total_orders\", 0)\r\n                }\r\n            })\r\n        except Exception as e:\r\n            logger.error(f\"Producer pool error: {e}\")\r\n            return jsonify({\"error\": \"Failed to get pool\"}), 500\r\n\r\n    @app.route(\"/api/orders/<order_id>/accept\", methods=[\"POST\"])\r\n    @require_auth\r\n    @require_role(\"producer\")\r\n    def accept_order(order_id):\r\n        try:\r\n            data = request.get_json() or {}\r\n\r\n            # 1) Önce state'i kabul et (yarış koşulunu engeller)\r\n            order_before = OrderStateMachine.transition(app.db, order_id, \"accepted\", g.user['id'], data.get('notes'))\r\n\r\n            # 2) Producer bağla\r\n            app.db.collection(\"orders\").document(order_id).update({\r\n                \"producer_id\": g.user['id'],\r\n                \"delivery_eta_days\": data.get('delivery_eta_days', 3),\r\n                \"producer_notes\": data.get('notes', ''),\r\n                \"accepted_at\": now_iso()\r\n            })\r\n\r\n            # 3) Sonra ödeme linkini oluştur ve kaydet\r\n            payment_result = create_payment_link(order_id)\r\n            payment_url = payment_result.get(\"payment_url\")\r\n            if not payment_url:\r\n                raise Exception(\"Payment link creation failed\")\r\n\r\n            app.db.collection(\"orders\").document(order_id).update({\r\n                \"payment_link\": payment_url,\r\n                \"payment_expires_at\": (datetime.utcnow() + timedelta(hours=24)).isoformat()\r\n            })\r\n\r\n            # Audit\r\n            prod = get_product(order_before[\"product_id\"]) if order_before.get(\"product_id\") else None\r\n            customer = get_user(order_before['customer_id']) if order_before.get('customer_id') else None\r\n            tr_log(\r\n                kullanici_adi=customer.get('name') if customer else None,\r\n                uretici_adi=g.user.get('name'),\r\n                fiyat_try_val=order_before.get(\"final_price\"),\r\n                pinata_url=pinata_url_from_hash(prod.get(\"file_ipfs_hash\")) if prod else None,\r\n                extra={\"event\":\"order_accepted\", \"order_id\": order_id}\r\n            )\r\n\r\n            create_notification(order_before['customer_id'], \"order_accepted\", \"Siparişiniz kabul edildi\", order_id, f\"Tahmini teslim: {data.get('delivery_eta_days', 3)} gün\")\r\n            return jsonify({\"success\": True, \"payment_link\": payment_url})\r\n        except Exception as e:\r\n            logger.error(f\"Accept order failed: {e}\")\r\n            return jsonify({\"error\": \"Order acceptance failed\"}), 500\r\n\r\n    @app.route(\"/api/orders/<order_id>/reject\", methods=[\"POST\"])\r\n    @require_auth\r\n    @require_role(\"producer\")\r\n    def reject_order(order_id):\r\n        try:\r\n            data = request.get_json() or {}\r\n            reason = data.get('reason', 'Üretici tarafından reddedildi')\r\n            OrderStateMachine.transition(app.db, order_id, \"rejected\", g.user['id'], reason)\r\n            order = get_order(order_id)\r\n            create_notification(order['customer_id'], \"order_rejected\", \"Siparişiniz reddedildi\", order_id, reason)\r\n            return jsonify({\"success\": True})\r\n        except Exception as e:\r\n            logger.error(f\"Order reject error: {e}\")\r\n            return jsonify({\"error\": str(e)}), 400\r\n\r\n    @app.route(\"/api/orders/<order_id>\", methods=[\"GET\"])\r\n    @require_auth\r\n    def get_order_detail(order_id):\r\n        try:\r\n            order = get_order(order_id)\r\n            if not order:\r\n                return jsonify({\"error\": \"Order not found\"}), 404\r\n\r\n            user_id = g.user['id']\r\n            user_role = g.user.get('role')\r\n            is_customer = (user_id == order.get('customer_id'))\r\n            is_producer = (order.get('producer_id') is not None and user_id == order.get('producer_id'))\r\n            is_admin = (user_role == 'admin')\r\n            if not (is_customer or is_producer or is_admin):\r\n                return jsonify({\"error\": \"Unauthorized\"}), 403\r\n\r\n            order['product'] = get_product(order['product_id'])\r\n            order['customer'] = get_user(order['customer_id'])\r\n            if order.get('producer_id'):\r\n                order['producer'] = get_user(order['producer_id'])\r\n\r\n            photos = []\r\n            photo_docs = app.db.collection(\"photos\").where(\"order_id\", \"==\", order_id).stream()\r\n            for doc in photo_docs:\r\n                photo = doc.to_dict()\r\n                photo['id'] = doc.id\r\n                # Her getirilişte signed URL tazele\r\n                try:\r\n                    if photo.get(\"storage_path\"):\r\n                        photo[\"url\"] = generate_signed_url(app.bucket.blob(photo[\"storage_path\"]))\r\n                    if photo.get(\"thumbnail_storage_path\"):\r\n                        photo[\"thumbnail_url\"] = generate_signed_url(app.bucket.blob(photo[\"thumbnail_storage_path\"]))\r\n                except Exception:\r\n                    pass\r\n                photos.append(photo)\r\n            order['photos'] = photos\r\n\r\n            message_count = len(list(app.db.collection(\"messages\").where(\"order_id\", \"==\", order_id).limit(1).stream()))\r\n            order['has_messages'] = message_count > 0\r\n\r\n            history = []\r\n            history_docs = app.db.collection(\"order_state_history\").where(\"order_id\", \"==\", order_id).order_by(\"created_at\").stream()\r\n            for doc in history_docs:\r\n                history.append(doc.to_dict())\r\n            order['state_history'] = history\r\n\r\n            return jsonify(order)\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Get order detail error: {e}\")\r\n            return jsonify({\"error\": \"Failed to get order\"}), 500\r\n\r\n    @app.route(\"/api/orders/<order_id>/photos\", methods=[\"POST\"])\r\n    @require_auth\r\n    def upload_order_photo(order_id):\r\n        order = get_order(order_id)\r\n        if not order:\r\n            return jsonify({\"error\": \"Order not found\"}), 404\r\n\r\n        if g.user['id'] not in [order['customer_id'], order.get('producer_id')] and g.user.get('role') != 'admin':\r\n            return jsonify({\"error\": \"Unauthorized\"}), 403\r\n\r\n        photo_type = request.form.get('type')\r\n        if photo_type not in ['before', 'after', 'evidence']:\r\n            return jsonify({\"error\": \"Invalid photo type\"}), 400\r\n\r\n        if photo_type == 'before' and order['status'] not in ['paid', 'in_production']:\r\n            return jsonify({\"error\": \"Before photo requires paid or in_production status\"}), 400\r\n        if photo_type == 'after' and order['status'] not in ['paid', 'in_production', 'completed_by_producer']:\r\n            return jsonify({\"error\": \"After photo requires paid/in_production/completed_by_producer status\"}), 400\r\n\r\n        file = request.files.get('photo')\r\n        if not file:\r\n            return jsonify({\"error\": \"Photo required\"}), 400\r\n        if not Path(file.filename).suffix.lower() in app.config['ALLOWED_IMAGES']:\r\n            return jsonify({\"error\": \"Invalid file type\"}), 400\r\n\r\n        file.stream.seek(0, 2)\r\n        size = file.stream.tell()\r\n        file.stream.seek(0)\r\n        if size > app.config['MAX_PHOTO_SIZE']:\r\n            return jsonify({\"error\": \"Photo too large\"}), 400\r\n\r\n        filename = secure_filename(f\"{order_id}_{photo_type}_{uuid.uuid4().hex}.jpg\")\r\n        temp_path = get_temp_path(filename)\r\n        thumb_path = None\r\n\r\n        try:\r\n            file.save(temp_path)\r\n            try:\r\n                img = Image.open(temp_path)\r\n                img.verify()  # quick verify\r\n            except (UnidentifiedImageError, Image.DecompressionBombError) as e:\r\n                return jsonify({\"error\": \"Invalid or unsafe image\"}), 400\r\n\r\n            img = Image.open(temp_path).convert('RGB')  # re-open after verify()\r\n\r\n            # thumbnail\r\n            thumb = img.copy()\r\n            thumb.thumbnail((300, 300))\r\n            thumb_path = temp_path.replace('.jpg', '_thumb.jpg')\r\n            thumb.save(thumb_path, 'JPEG', quality=85)\r\n\r\n            # resize large\r\n            if img.width > 1920 or img.height > 1920:\r\n                img.thumbnail((1920, 1920))\r\n            img.save(temp_path, 'JPEG', quality=90)\r\n\r\n            photo_url, photo_storage_path = upload_private_to_storage(temp_path, f\"photos/{order_id}/{filename}\")\r\n            thumb_url, thumb_storage_path = upload_private_to_storage(thumb_path, f\"photos/{order_id}/thumbs/{filename}\")\r\n\r\n            photo_data = {\r\n                \"order_id\": order_id,\r\n                \"uploader_id\": g.user['id'],\r\n                \"type\": photo_type,\r\n                \"storage_path\": photo_storage_path,\r\n                \"thumbnail_storage_path\": thumb_storage_path,\r\n                \"caption\": request.form.get('caption', ''),\r\n                \"uploaded_at\": now_iso(),\r\n                \"archived\": False\r\n            }\r\n\r\n            photo_ref, _ = app.db.collection(\"photos\").add(photo_data)\r\n\r\n            if photo_type == 'before' and order['status'] == 'paid':\r\n                OrderStateMachine.transition(app.db, order_id, 'in_production', g.user['id'])\r\n\r\n            notify_user_id = order['customer_id'] if g.user['id'] == order.get('producer_id') else order.get('producer_id')\r\n            if notify_user_id:\r\n                create_notification(notify_user_id, \"new_photo\", f\"Siparişinize yeni {photo_type} fotoğrafı eklendi\", order_id)\r\n\r\n            return jsonify({\r\n                \"success\": True,\r\n                \"photo_id\": photo_ref.id,\r\n                \"url\": photo_url,\r\n                \"thumbnail_url\": thumb_url\r\n            })\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Photo upload error: {e}\")\r\n            return jsonify({\"error\": \"Photo upload failed\"}), 500\r\n\r\n        finally:\r\n            for path in [temp_path, thumb_path]:\r\n                if path and os.path.exists(path):\r\n                    try:\r\n                        os.remove(path)\r\n                    except:\r\n                        pass\r\n\r\n    @app.route(\"/api/orders/<order_id>/complete\", methods=[\"POST\"])\r\n    @require_auth\r\n    @require_role(\"producer\")\r\n    def complete_production(order_id):\r\n        try:\r\n            order = get_order(order_id)\r\n            if not order:\r\n                return jsonify({\"error\": \"Order not found\"}), 404\r\n            if order.get('producer_id') != g.user['id']:\r\n                return jsonify({\"error\": \"Unauthorized\"}), 403\r\n\r\n            after_photos = app.db.collection(\"photos\").where(\"order_id\", \"==\", order_id).where(\"type\", \"==\", \"after\").limit(1).stream()\r\n            if not list(after_photos):\r\n                return jsonify({\"error\": \"After photo required\"}), 400\r\n\r\n            OrderStateMachine.transition(app.db, order_id, \"completed_by_producer\", g.user['id'])\r\n            create_notification(order['customer_id'], \"production_completed\", \"Siparişiniz tamamlandı\", order_id, \"Lütfen teslimi onaylayın\")\r\n            return jsonify({\"success\": True})\r\n        except Exception as e:\r\n            logger.error(f\"Complete production error: {e}\")\r\n            return jsonify({\"error\": str(e)}), 400\r\n\r\n    @app.route(\"/api/orders/<order_id>/confirm\", methods=[\"POST\"])\r\n    @require_auth\r\n    def confirm_delivery(order_id):\r\n        try:\r\n            data = request.get_json() or {}\r\n            user_id = g.user['id']\r\n\r\n            @firestore.transactional\r\n            def confirm_delivery_transaction(transaction):\r\n                order_ref = app.db.collection(\"orders\").document(order_id)\r\n                order_snap = transaction.get(order_ref)\r\n                if not order_snap.exists:\r\n                    raise ValueError(\"Order not found\")\r\n                order = order_snap.to_dict()\r\n\r\n                if order['customer_id'] != user_id:\r\n                    raise ValueError(\"Unauthorized\")\r\n\r\n                updates = {\r\n                    \"status\": \"confirmed\",\r\n                    \"updated_at\": now_iso(),\r\n                    \"confirmed_at\": now_iso(),\r\n                    \"confirmed_by\": user_id\r\n                }\r\n                if 'rating' in data:\r\n                    updates.update({\r\n                        \"rating\": data['rating'],\r\n                        \"review_text\": data.get('review_text', ''),\r\n                        \"reviewed_at\": now_iso()\r\n                    })\r\n                transaction.update(order_ref, updates)\r\n\r\n                # Payout hesapla (refund düş)\r\n                refunds = list(app.db.collection(\"refunds\").where(\"order_id\", \"==\", order_id).stream())\r\n                total_refunded = 0.0\r\n                for r in refunds:\r\n                    try:\r\n                        total_refunded += float(r.to_dict().get('amount', 0) or 0)\r\n                    except:\r\n                        pass\r\n                net_customer_payment = max(float(order.get('final_price', 0.0)) - total_refunded, 0.0)\r\n                commission = net_customer_payment * Config.DEFAULT_COMMISSION_RATE\r\n                producer_amount = max(net_customer_payment - commission, 0.0)\r\n\r\n                payout_ref = app.db.collection(\"payouts\").document()\r\n                transaction.set(payout_ref, {\r\n                    \"order_id\": order_id,\r\n                    \"producer_id\": order.get('producer_id'),\r\n                    \"amount\": round(producer_amount, 2),\r\n                    \"commission_amount\": round(commission, 2),\r\n                    \"refund_deduction\": round(total_refunded, 2),\r\n                    \"status\": \"scheduled\",\r\n                    \"scheduled_date\": (datetime.utcnow() + timedelta(days=3)).isoformat(),\r\n                    \"created_at\": now_iso()\r\n                })\r\n\r\n                # Producer stats\r\n                if order.get('producer_id'):\r\n                    prod_ref = app.db.collection(\"users\").document(order['producer_id'])\r\n                    prod_snap = transaction.get(prod_ref)\r\n                    if prod_snap.exists:\r\n                        prod = prod_snap.to_dict() or {}\r\n                        transaction.update(prod_ref, {\r\n                            \"completed_orders\": int(prod.get(\"completed_orders\", 0)) + 1,\r\n                            \"total_orders\": int(prod.get(\"total_orders\", 0))\r\n                        })\r\n\r\n                return order\r\n\r\n            order = confirm_delivery_transaction(app.db.transaction())\r\n\r\n            if 'producer_id' in order and order['producer_id']:\r\n                create_notification(order['producer_id'], \"order_confirmed\", \"Sipariş onaylandı\", order_id, \"Ödemeniz planlandı\")\r\n\r\n            return jsonify({\"success\": True})\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Confirm delivery error: {e}\")\r\n            return jsonify({\"error\": str(e)}), 400\r\n\r\n    @app.route(\"/api/orders/<order_id>/dispute\", methods=[\"POST\"])\r\n    @require_auth\r\n    def open_dispute(order_id):\r\n        try:\r\n            order = get_order(order_id)\r\n            if not order:\r\n                return jsonify({\"error\": \"Order not found\"}), 404\r\n            if order['customer_id'] != g.user['id']:\r\n                return jsonify({\"error\": \"Unauthorized\"}), 403\r\n\r\n            data = request.get_json()\r\n            if not data or 'reason' not in data:\r\n                return jsonify({\"error\": \"Dispute reason required\"}), 400\r\n\r\n            valid_states = ['completed_by_producer', 'confirmed']\r\n            if order.get('status') not in valid_states:\r\n                return jsonify({\"error\": f\"Cannot dispute order in {order.get('status')} state\"}), 400\r\n\r\n            ts = order.get('confirmed_at') or order.get('completed_by_producer_at')\r\n            dt = parse_iso(ts)\r\n            if dt:\r\n                if (datetime.utcnow() - dt.replace(tzinfo=None)).days > 7:\r\n                    return jsonify({\"error\": \"Dispute period expired\"}), 400\r\n\r\n            OrderStateMachine.transition(app.db, order_id, \"dispute_open\", g.user['id'], data['reason'])\r\n            app.db.collection(\"orders\").document(order_id).update({\r\n                \"dispute_reason\": data['reason'],\r\n                \"dispute_details\": data.get('details', ''),\r\n                \"dispute_opened_at\": now_iso()\r\n            })\r\n\r\n            admins = app.db.collection(\"users\").where(\"role\", \"==\", \"admin\").stream()\r\n            for admin_doc in admins:\r\n                create_notification(admin_doc.id, \"dispute_opened\", f\"Yeni uyuşmazlık: {order_id[:8]}\", order_id)\r\n\r\n            return jsonify({\"success\": True})\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Open dispute error: {e}\")\r\n            return jsonify({\"error\": str(e)}), 400\r\n\r\n    # IPFS görüntüleme audit\r\n    @app.route(\"/api/ipfs/view\", methods=[\"POST\"])\r\n    @require_auth\r\n    def audit_ipfs_view():\r\n        data = request.get_json() or {}\r\n        ipfs_hash = data.get(\"ipfs_hash\")\r\n        product_id = data.get(\"product_id\")\r\n        if not ipfs_hash:\r\n            return jsonify({\"error\": \"ipfs_hash required\"}), 400\r\n        tr_log(\r\n            kullanici_adi=g.user.get('name'),\r\n            uretici_adi=None,\r\n            fiyat_try_val=None,\r\n            pinata_url=pinata_url_from_hash(ipfs_hash),\r\n            extra={\"event\":\"pinata_stl_goruntuleme\", \"user_id\": g.user['id'], \"product_id\": product_id}\r\n        )\r\n        return jsonify({\"success\": True})\r\n\r\n    # ---------- PAYMENT ----------\r\n    def create_payment_link(order_id):\r\n        order = get_order(order_id)\r\n        payment_data = {\r\n            \"order_id\": order_id,\r\n            \"amount\": order['final_price'],\r\n            \"provider\": \"demo\",\r\n            \"payment_link\": f\"/api/payment/demo/{order_id}\",\r\n            \"expires_at\": (datetime.utcnow() + timedelta(hours=24)).isoformat(),\r\n            \"created_at\": now_iso()\r\n        }\r\n        app.db.collection(\"payments\").add(payment_data)\r\n        return {\"payment_url\": payment_data[\"payment_link\"]}\r\n\r\n    @app.route(\"/api/payment/demo/<order_id>\", methods=[\"GET\", \"POST\"])\r\n    def demo_payment(order_id):\r\n        if request.method == \"GET\":\r\n            order = get_order(order_id)\r\n            if not order:\r\n                return \"Order not found\", 404\r\n            return f\"\"\"\r\n            <html>\r\n            <head><meta charset=\"utf-8\"><title>Ödeme Demo</title></head>\r\n            <body style=\"font-family: Arial; padding: 20px;\">\r\n                <h2>Demo Ödeme Sayfası</h2>\r\n                <p>Sipariş: {order_id}</p>\r\n                <p>Tutar: {format_try(order['final_price'])}</p>\r\n                <form method=\"POST\">\r\n                    <button type=\"submit\" style=\"padding: 10px 20px; background: #4CAF50; color: white; border: none; cursor: pointer;\">\r\n                        Ödemeyi Tamamla\r\n                    </button>\r\n                </form>\r\n            </body>\r\n            </html>\r\n            \"\"\"\r\n        else:\r\n            try:\r\n                OrderStateMachine.transition(app.db, order_id, \"paid\", \"system\")\r\n                app.db.collection(\"orders\").document(order_id).update({\r\n                    \"payment_status\": \"paid\",\r\n                    \"paid_at\": now_iso()\r\n                })\r\n                order = get_order(order_id)\r\n                # Audit: order paid\r\n                producer = get_user(order.get('producer_id')) if order else None\r\n                product = get_product(order.get('product_id')) if order else None\r\n                customer = get_user(order.get('customer_id')) if order else None\r\n                tr_log(\r\n                    kullanici_adi=customer.get('name') if customer else None,\r\n                    uretici_adi=producer.get('name') if producer else None,\r\n                    fiyat_try_val=order.get('final_price') if order else None,\r\n                    pinata_url=pinata_url_from_hash(product.get('file_ipfs_hash')) if product else None,\r\n                    extra={\"event\":\"order_paid\", \"order_id\": order_id}\r\n                )\r\n                if order and order.get('producer_id'):\r\n                    create_notification(order['producer_id'], \"payment_received\", \"Ödeme alındı\", order_id, \"Üretime başlayabilirsiniz\")\r\n                return redirect(f\"/order/{order_id}?payment=success\")\r\n            except Exception as e:\r\n                logger.error(f\"Demo payment error: {e}\")\r\n                return \"Payment failed\", 400\r\n\r\n    @app.route(\"/api/payment/callback\", methods=[\"POST\"])\r\n    def payment_callback():\r\n        data = request.get_json() or {}\r\n        logger.info(f\"Payment callback: {data}\")\r\n        order_id = data.get(\"order_id\")\r\n        status = data.get(\"status\")\r\n        if status == \"success\" and order_id:\r\n            try:\r\n                OrderStateMachine.transition(app.db, order_id, \"paid\", \"system\")\r\n                app.db.collection(\"orders\").document(order_id).update({\r\n                    \"payment_status\": \"paid\",\r\n                    \"paid_at\": now_iso()\r\n                })\r\n            except Exception as e:\r\n                logger.error(f\"Payment callback transition error: {e}\")\r\n        return jsonify({\"success\": True})\r\n\r\n    def schedule_payout(order_id):\r\n        order = get_order(order_id)\r\n        if not order:\r\n            return\r\n        refunds = list(app.db.collection(\"refunds\").where(\"order_id\", \"==\", order_id).stream())\r\n        total_refunded = 0.0\r\n        for r in refunds:\r\n            try:\r\n                total_refunded += float(r.to_dict().get('amount', 0) or 0)\r\n            except:\r\n                pass\r\n        net_customer_payment = max(float(order.get('final_price', 0.0)) - total_refunded, 0.0)\r\n        commission = net_customer_payment * Config.DEFAULT_COMMISSION_RATE\r\n        producer_amount = max(net_customer_payment - commission, 0.0)\r\n        payout_data = {\r\n            \"order_id\": order_id,\r\n            \"producer_id\": order.get('producer_id'),\r\n            \"amount\": round(producer_amount, 2),\r\n            \"original_amount\": float(order.get('producer_earnings', 0.0)),\r\n            \"refund_deduction\": round(total_refunded, 2),\r\n            \"commission_amount\": round(commission, 2),\r\n            \"status\": \"scheduled\",\r\n            \"scheduled_date\": (datetime.utcnow() + timedelta(days=3)).isoformat(),\r\n            \"created_at\": now_iso()\r\n        }\r\n        app.db.collection(\"payouts\").add(payout_data)\r\n\r\n    def update_producer_stats(producer_id):\r\n        orders = app.db.collection(\"orders\").where(\"producer_id\", \"==\", producer_id).stream()\r\n        total = 0\r\n        completed = 0\r\n        ratings = []\r\n        for order_doc in orders:\r\n            order = order_doc.to_dict()\r\n            total += 1\r\n            if order.get('status') == 'confirmed':\r\n                completed += 1\r\n                if 'rating' in order:\r\n                    ratings.append(order['rating'])\r\n        success_rate = (completed / total * 100) if total > 0 else 0\r\n        avg_rating = sum(ratings) / len(ratings) if ratings else 0\r\n        app.db.collection(\"users\").document(producer_id).update({\r\n            \"total_orders\": total,\r\n            \"completed_orders\": completed,\r\n            \"success_rate\": success_rate,\r\n            \"average_rating\": avg_rating\r\n        })\r\n\r\n    # ---------- MESSAGES ----------\r\n    @app.route(\"/api/orders/<order_id>/messages\", methods=[\"GET\"])\r\n    @require_auth\r\n    def get_messages(order_id):\r\n        order = get_order(order_id)\r\n        if not order:\r\n            return jsonify({\"error\": \"Order not found\"}), 404\r\n        if g.user['id'] not in [order['customer_id'], order.get('producer_id')] and g.user.get('role') != 'admin':\r\n            return jsonify({\"error\": \"Unauthorized\"}), 403\r\n\r\n        messages = []\r\n        message_docs = app.db.collection(\"messages\").where(\"order_id\", \"==\", order_id).order_by(\"created_at\").stream()\r\n        for doc in message_docs:\r\n            msg = doc.to_dict()\r\n            msg['id'] = doc.id\r\n            msg['sender'] = get_user(msg['sender_id'])\r\n            messages.append(msg)\r\n\r\n        for msg in messages:\r\n            if g.user['id'] not in msg.get('read_by', []):\r\n                app.db.collection(\"messages\").document(msg['id']).update({\r\n                    \"read_by\": firestore.ArrayUnion([g.user['id']])\r\n                })\r\n\r\n        return jsonify({\"messages\": messages, \"count\": len(messages)})\r\n\r\n    @app.route(\"/api/orders/<order_id>/messages\", methods=[\"POST\"])\r\n    @require_auth\r\n    def send_message(order_id):\r\n        order = get_order(order_id)\r\n        if not order:\r\n            return jsonify({\"error\": \"Order not found\"}), 404\r\n        if g.user['id'] not in [order['customer_id'], order.get('producer_id')] and g.user.get('role') != 'admin':\r\n            return jsonify({\"error\": \"Unauthorized\"}), 403\r\n\r\n        data = request.get_json()\r\n        if not data or 'body' not in data:\r\n            return jsonify({\"error\": \"Message body required\"}), 400\r\n\r\n        message_data = {\r\n            \"order_id\": order_id,\r\n            \"sender_id\": g.user['id'],\r\n            \"body\": data['body'],\r\n            \"attachments\": data.get('attachments', []),\r\n            \"created_at\": now_iso(),\r\n            \"read_by\": [g.user['id']]\r\n        }\r\n        msg_ref, _ = app.db.collection(\"messages\").add(message_data)\r\n        message_data['id'] = msg_ref.id\r\n        message_data['sender'] = g.user\r\n\r\n        socketio.emit('new_message', message_data, room=f\"order_{order_id}\")\r\n\r\n        recipients = [order['customer_id'], order.get('producer_id')]\r\n        for recipient_id in recipients:\r\n            if recipient_id and recipient_id != g.user['id']:\r\n                body_preview = data['body'][:50] + \"...\" if len(data['body']) > 50 else data['body']\r\n                create_notification(recipient_id, \"new_message\", \"Yeni mesaj\", order_id, body_preview)\r\n\r\n        return jsonify(message_data), 201\r\n\r\n    # ---------- ADMIN ENDPOINTS ----------\r\n    @app.route(\"/api/admin/stats\", methods=[\"GET\"])\r\n    @require_auth\r\n    @require_role(\"admin\")\r\n    def get_admin_stats():\r\n        try:\r\n            days = int(request.args.get('days', 30))\r\n            start_date = datetime.utcnow() - timedelta(days=days)\r\n\r\n            all_orders_docs = list(app.db.collection(\"orders\").stream())\r\n            recent_orders = [\r\n                o for o in all_orders_docs\r\n                if o.to_dict().get('created_at', '') > start_date.isoformat()\r\n            ]\r\n\r\n            status_dist = {}\r\n            total_revenue = 0.0\r\n            total_commission = 0.0\r\n\r\n            for order_doc in all_orders_docs:\r\n                order = order_doc.to_dict()\r\n                status = order.get('status', 'unknown')\r\n                status_dist[status] = status_dist.get(status, 0) + 1\r\n                if order.get('payment_status') == 'paid':\r\n                    total_revenue += order.get('final_price', 0.0)\r\n                    total_commission += order.get('commission_amount', 0.0)\r\n\r\n            producers = []\r\n            producer_docs = app.db.collection(\"users\").where(\"role\", \"==\", \"producer\").stream()\r\n            for prod_doc in producer_docs:\r\n                prod = prod_doc.to_dict()\r\n                producers.append({\r\n                    \"id\": prod_doc.id,\r\n                    \"name\": prod.get('name'),\r\n                    \"email\": prod.get('email'),\r\n                    \"total_orders\": prod.get('total_orders', 0),\r\n                    \"success_rate\": prod.get('success_rate', 0),\r\n                    \"average_rating\": prod.get('average_rating', 0)\r\n                })\r\n\r\n            material_usage = {}\r\n            for order_doc in all_orders_docs:\r\n                order = order_doc.to_dict()\r\n                material = order.get('material_name', 'Unknown')\r\n                material_usage[material] = material_usage.get(material, 0) + 1\r\n\r\n            return jsonify({\r\n                \"period_days\": days,\r\n                \"total_orders\": len(all_orders_docs),\r\n                \"recent_orders\": len(recent_orders),\r\n                \"status_distribution\": status_dist,\r\n                \"total_revenue\": total_revenue,\r\n                \"total_commission\": total_commission,\r\n                \"top_producers\": sorted(producers, key=lambda x: x['total_orders'], reverse=True)[:10],\r\n                \"material_usage\": material_usage,\r\n                \"disputes_open\": status_dist.get('dispute_open', 0)\r\n            })\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Admin stats error: {e}\")\r\n            return jsonify({\"error\": \"Failed to get stats\"}), 500\r\n\r\n    @app.route(\"/api/admin/disputes\", methods=[\"GET\"])\r\n    @require_auth\r\n    @require_role(\"admin\")\r\n    def get_disputes():\r\n        disputes = []\r\n        dispute_orders = app.db.collection(\"orders\").where(\"status\", \"==\", \"dispute_open\").stream()\r\n        for doc in dispute_orders:\r\n            order = doc.to_dict()\r\n            order['id'] = doc.id\r\n            order['customer'] = get_user(order['customer_id'])\r\n            order['producer'] = get_user(order['producer_id'])\r\n            disputes.append(order)\r\n        return jsonify({\"disputes\": disputes, \"count\": len(disputes)})\r\n\r\n    @app.route(\"/api/admin/disputes/<order_id>/resolve\", methods=[\"POST\"])\r\n    @require_auth\r\n    @require_role(\"admin\")\r\n    def resolve_dispute(order_id):\r\n        data = request.get_json() or {}\r\n        resolution = data.get('resolution')  # confirmed, refunded, partial_refund\r\n        if resolution not in ['confirmed', 'refunded', 'partial_refund']:\r\n            return jsonify({\"error\": \"Invalid resolution\"}), 400\r\n        try:\r\n            OrderStateMachine.transition(app.db, order_id, resolution, g.user['id'], data.get('reason', ''))\r\n            app.db.collection(\"orders\").document(order_id).update({\r\n                \"dispute_resolution\": resolution,\r\n                \"dispute_resolved_at\": now_iso(),\r\n                \"dispute_resolved_by\": g.user['id'],\r\n                \"dispute_resolution_notes\": data.get('notes', '')\r\n            })\r\n            order = get_order(order_id)\r\n\r\n            for user_id in [order['customer_id'], order['producer_id']]:\r\n                create_notification(user_id, \"dispute_resolved\", f\"Uyuşmazlık çözüldü: {resolution}\", order_id)\r\n\r\n            if resolution in ['refunded', 'partial_refund']:\r\n                refund_amount = order['final_price'] if resolution == 'refunded' else data.get('refund_amount', 0)\r\n                app.db.collection(\"refunds\").add({\r\n                    \"order_id\": order_id,\r\n                    \"amount\": refund_amount,\r\n                    \"reason\": data.get('reason', ''),\r\n                    \"status\": \"pending\",\r\n                    \"created_at\": now_iso()\r\n                })\r\n\r\n            return jsonify({\"success\": True})\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Dispute resolution error: {e}\")\r\n            return jsonify({\"error\": str(e)}), 400\r\n\r\n    # ---------- SOCKET.IO EVENTS ----------\r\n    @socketio.on('connect')\r\n    def handle_connect():\r\n        logger.info(f\"Client connected: {request.sid}\")\r\n\r\n    @socketio.on('disconnect')\r\n    def handle_disconnect():\r\n        logger.info(f\"Client disconnected: {request.sid}\")\r\n        for user_id, sid in list(socket_sessions.items()):\r\n            if sid == request.sid:\r\n                del socket_sessions[user_id]\r\n                break\r\n\r\n    @socketio.on('authenticate')\r\n    def handle_authenticate(data):\r\n        token_raw = (data.get('token') or '')\r\n        uid = None\r\n\r\n        if token_raw.startswith(\"Bearer \"):\r\n            id_token = token_raw.split(\" \", 1)[1]\r\n            try:\r\n                decoded = fb_auth.verify_id_token(id_token)\r\n                uid = decoded.get(\"uid\")\r\n            except Exception:\r\n                emit('authenticated', {'success': False})\r\n                return\r\n        elif app.config.get(\"DEBUG\") and token_raw.startswith(\"Token \"):\r\n            uid = token_raw.split(\" \", 1)[1]\r\n        else:\r\n            emit('authenticated', {'success': False})\r\n            return\r\n\r\n        user_doc = app.db.collection(\"users\").document(uid).get()\r\n        if user_doc.exists:\r\n            socket_sessions[uid] = request.sid\r\n            join_room(f\"user_{uid}\")\r\n            emit('authenticated', {'success': True})\r\n            unread_notifications = app.db.collection(\"notifications\").where(\"user_id\", \"==\", uid).where(\"is_read\", \"==\", False).stream()\r\n            for notif_doc in unread_notifications:\r\n                notif = notif_doc.to_dict()\r\n                notif['id'] = notif_doc.id\r\n                emit('notification', notif)\r\n        else:\r\n            emit('authenticated', {'success': False})\r\n\r\n    @socketio.on('join_order_chat')\r\n    def handle_join_order_chat(data):\r\n        order_id = data.get('order_id')\r\n        token_raw = (data.get('token') or '')\r\n        uid = None\r\n\r\n        if token_raw.startswith(\"Bearer \"):\r\n            id_token = token_raw.split(\" \", 1)[1]\r\n            try:\r\n                decoded = fb_auth.verify_id_token(id_token)\r\n                uid = decoded.get(\"uid\")\r\n            except Exception:\r\n                emit('error', {'message': 'Unauthorized'})\r\n                return\r\n        elif app.config.get(\"DEBUG\") and token_raw.startswith(\"Token \"):\r\n            uid = token_raw.split(\" \", 1)[1]\r\n        else:\r\n            emit('error', {'message': 'Unauthorized'})\r\n            return\r\n\r\n        order = get_order(order_id)\r\n        if not order:\r\n            emit('error', {'message': 'Order not found'})\r\n            return\r\n        if uid not in [order['customer_id'], order.get('producer_id')]:\r\n            user = get_user(uid)\r\n            if not user or user.get('role') != 'admin':\r\n                emit('error', {'message': 'Unauthorized'})\r\n                return\r\n        join_room(f\"order_{order_id}\")\r\n        emit('joined_order_chat', {'order_id': order_id})\r\n\r\n    @socketio.on('leave_order_chat')\r\n    def handle_leave_order_chat(data):\r\n        order_id = data.get('order_id')\r\n        leave_room(f\"order_{order_id}\")\r\n        emit('left_order_chat', {'order_id': order_id})\r\n\r\n    # ---------- JINJA FILTERS ----------\r\n    @app.template_filter('tl')\r\n    def jinja_tl(amount):\r\n        return format_try(amount)\r\n\r\n    @app.template_filter('dt')\r\n    def jinja_dt(iso_str):\r\n        return format_datetime_tr(iso_str, with_time=True)\r\n\r\n    @app.template_filter('rel')\r\n    def jinja_rel(iso_str):\r\n        return format_timedelta_tr(iso_str)\r\n\r\n    # ---------- ERROR HANDLERS ----------\r\n    @app.errorhandler(413)\r\n    @app.errorhandler(RequestEntityTooLarge)\r\n    def handle_file_too_large(e):\r\n        return jsonify({\"error\": \"File too large\"}), 413\r\n\r\n    @app.errorhandler(404)\r\n    def not_found(e):\r\n        return jsonify({\"error\": \"Resource not found\"}), 404\r\n\r\n    @app.errorhandler(500)\r\n    def internal_error(e):\r\n        logger.error(f\"Internal server error: {e}\")\r\n        return jsonify({\"error\": \"Internal server error\"}), 500\r\n\r\n    # ---------- CLEANUP TASKS ----------\r\n    def cleanup_old_orders():\r\n        cutoff_date = (datetime.utcnow() - timedelta(days=30)).isoformat()\r\n        old_orders = app.db.collection(\"orders\") \\\r\n            .where(\"payment_status\", \"==\", \"unpaid\") \\\r\n            .where(\"created_at\", \"<\", cutoff_date) \\\r\n            .stream()\r\n        count = 0\r\n        for order_doc in old_orders:\r\n            order = order_doc.to_dict()\r\n            if order.get('status') in ['pending', 'accepted']:\r\n                app.db.collection(\"orders\").document(order_doc.id).update({\r\n                    \"status\": \"cancelled\",\r\n                    \"cancelled_reason\": \"Payment timeout\",\r\n                    \"cancelled_at\": now_iso()\r\n                })\r\n                count += 1\r\n        logger.info(f\"Cleaned up {count} old unpaid orders\")\r\n\r\n    def archive_old_photos():\r\n        cutoff_date = (datetime.utcnow() - timedelta(days=90)).isoformat()\r\n        old_photos = app.db.collection(\"photos\") \\\r\n            .where(\"uploaded_at\", \"<\", cutoff_date) \\\r\n            .where(\"archived\", \"==\", False) \\\r\n            .stream()\r\n        for photo_doc in old_photos:\r\n            app.db.collection(\"photos\").document(photo_doc.id).update({\r\n                \"archived\": True,\r\n                \"archived_at\": now_iso()\r\n            })\r\n\r\n    def run_scheduled_tasks():\r\n        while True:\r\n            time.sleep(3600)\r\n            try:\r\n                cleanup_old_orders()\r\n                archive_old_photos()\r\n            except Exception as e:\r\n                logger.error(f\"Scheduled task error: {e}\")\r\n\r\n    if not app.config['DEBUG']:\r\n        task_thread = threading.Thread(target=run_scheduled_tasks, daemon=True)\r\n        task_thread.start()\r\n\r\n    return app, socketio\r\n\r\n# ---------- MAIN ----------\r\nif __name__ == \"__main__\":\r\n    app, socketio = create_app()\r\n    logger.info(f\"3D Printing Marketplace starting on {app.config['HOST']}:{app.config['PORT']}\")\r\n    socketio.run(app, host=app.config['HOST'], port=app.config['PORT'], debug=app.config['DEBUG'])\r\n    CORS(app, resources={r\"/*\": {\"origins\": [r\"http://localhost:\\d+\", r\"http://127.0.0.1:\\d+\"]}}, supports_credentials=False)\r\n","size_bytes":85881},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { Server as SocketIOServer } from \"socket.io\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport axios from \"axios\";\nimport { storage } from \"./storage\";\n\n// Flask backend URL\nconst FLASK_BACKEND_URL = process.env.FLASK_BACKEND_URL || \"http://localhost:8000\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: \"uploads/\",\n  limits: {\n    fileSize: 100 * 1024 * 1024, // 100MB\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['.stl', '.obj'];\n    const ext = path.extname(file.originalname).toLowerCase();\n    if (allowedTypes.includes(ext)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only STL and OBJ files are allowed'));\n    }\n  }\n});\n\ninterface AuthenticatedRequest extends Express.Request {\n  user?: {\n    id: string;\n    email: string;\n    name: string;\n    role: string;\n  };\n}\n\n// Authentication middleware\nconst authenticate = async (req: AuthenticatedRequest, res: any, next: any) => {\n  try {\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n      return res.status(401).json({ error: \"Authorization header required\" });\n    }\n\n    // Forward the request to Flask backend for authentication\n    const response = await axios.post(`${FLASK_BACKEND_URL}/api/auth/verify`, {}, {\n      headers: { Authorization: authHeader },\n      timeout: 5000,\n    });\n\n    if (response.data.success) {\n      req.user = response.data.user;\n      next();\n    } else {\n      return res.status(401).json({ error: \"Invalid token\" });\n    }\n  } catch (error) {\n    console.error(\"Authentication error:\", error);\n    return res.status(401).json({ error: \"Authentication failed\" });\n  }\n};\n\n// Role-based authorization middleware\nconst authorize = (roles: string[]) => {\n  return (req: AuthenticatedRequest, res: any, next: any) => {\n    if (!req.user || !roles.includes(req.user.role)) {\n      return res.status(403).json({ error: \"Insufficient permissions\" });\n    }\n    next();\n  };\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // Initialize Socket.IO\n  const io = new SocketIOServer(httpServer, {\n    cors: {\n      origin: process.env.FRONTEND_ORIGINS?.split(\",\") || [\"http://localhost:5173\"],\n      methods: [\"GET\", \"POST\"],\n      credentials: false,\n    },\n    path: \"/socket.io/\",\n  });\n\n  // Initialize WebSocket server for additional real-time features\n  const wss = new WebSocketServer({ \n    server: httpServer, \n    path: '/ws',\n    verifyClient: (info) => {\n      // Basic verification - in production, verify JWT tokens here\n      return true;\n    }\n  });\n\n  // Socket.IO connection handling\n  io.on(\"connection\", (socket) => {\n    console.log(\"Client connected:\", socket.id);\n\n    // Join user-specific room for notifications\n    socket.on(\"join_user_room\", (userId: string) => {\n      socket.join(`user_${userId}`);\n      console.log(`User ${userId} joined room`);\n    });\n\n    // Join order-specific room for messaging\n    socket.on(\"join_order_room\", (orderId: string) => {\n      socket.join(`order_${orderId}`);\n      console.log(`Joined order room: ${orderId}`);\n    });\n\n    // Handle sending messages\n    socket.on(\"send_message\", async (data) => {\n      try {\n        const { order_id, receiver_id, content } = data;\n        \n        // Save message to database\n        const message = await storage.createMessage({\n          order_id,\n          sender_id: data.sender_id,\n          receiver_id,\n          content,\n          is_read: false,\n        });\n\n        // Emit to order room\n        io.to(`order_${order_id}`).emit(\"new_message\", message);\n        \n        // Create notification for receiver\n        await storage.createNotification({\n          user_id: receiver_id,\n          type: \"new_message\",\n          title: \"Yeni Mesaj\",\n          body: content.substring(0, 100),\n          order_id,\n          is_read: false,\n        });\n\n        // Send notification to receiver\n        io.to(`user_${receiver_id}`).emit(\"notification\", {\n          type: \"new_message\",\n          title: \"Yeni Mesaj\",\n          body: content.substring(0, 100),\n          order_id,\n        });\n\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n        socket.emit(\"error\", { message: \"Failed to send message\" });\n      }\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"Client disconnected:\", socket.id);\n    });\n  });\n\n  // WebSocket connection handling for additional features\n  wss.on(\"connection\", (ws, request) => {\n    console.log(\"WebSocket client connected\");\n\n    ws.on(\"message\", (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        console.log(\"WebSocket message received:\", data);\n\n        // Echo back for now - extend as needed\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({ type: \"echo\", data }));\n        }\n      } catch (error) {\n        console.error(\"WebSocket message error:\", error);\n      }\n    });\n\n    ws.on(\"close\", () => {\n      console.log(\"WebSocket client disconnected\");\n    });\n  });\n\n  // Health check endpoint\n  app.get(\"/api/health\", async (req, res) => {\n    try {\n      // Check Flask backend health\n      const flaskResponse = await axios.get(`${FLASK_BACKEND_URL}/api/health`, {\n        timeout: 5000,\n      });\n\n      res.json({\n        status: \"healthy\",\n        timestamp: new Date().toISOString(),\n        services: {\n          frontend: \"connected\",\n          backend: flaskResponse.data.status || \"connected\",\n          database: \"connected\",\n          websocket: \"connected\",\n        },\n      });\n    } catch (error) {\n      console.error(\"Health check failed:\", error);\n      res.status(500).json({\n        status: \"unhealthy\",\n        error: \"Backend connection failed\",\n        timestamp: new Date().toISOString(),\n      });\n    }\n  });\n\n  // Authentication endpoints - proxy to Flask backend\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const response = await axios.post(`${FLASK_BACKEND_URL}/api/login`, req.body, {\n        timeout: 10000,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      res.json(response.data);\n    } catch (error: any) {\n      console.error(\"Login error:\", error);\n      if (error.response) {\n        res.status(error.response.status).json(error.response.data);\n      } else {\n        res.status(500).json({ error: \"Login service unavailable\" });\n      }\n    }\n  });\n\n  // File upload endpoint - proxy to Flask backend\n  app.post(\"/api/upload/stl\", authenticate, upload.single(\"file\"), async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      // Forward file to Flask backend for processing\n      const FormData = require('form-data');\n      const fs = require('fs');\n      \n      const formData = new FormData();\n      formData.append('file', fs.createReadStream(req.file.path), {\n        filename: req.file.originalname,\n        contentType: req.file.mimetype,\n      });\n\n      const response = await axios.post(`${FLASK_BACKEND_URL}/api/upload/stl`, formData, {\n        headers: {\n          ...formData.getHeaders(),\n          Authorization: req.headers.authorization,\n        },\n        timeout: 60000, // 60 seconds for large files\n        maxContentLength: 100 * 1024 * 1024, // 100MB\n      });\n\n      // Clean up temporary file\n      fs.unlinkSync(req.file.path);\n\n      // Save product to database if upload successful\n      if (response.data.success && response.data.analysis) {\n        const product = await storage.createProduct({\n          user_id: req.user!.id,\n          name: req.file.originalname.replace(/\\.[^/.]+$/, \"\"), // Remove extension\n          stl_file_url: response.data.file_url,\n          ipfs_hash: response.data.ipfs_hash,\n          analysis: response.data.analysis,\n          status: \"pending\",\n        });\n\n        res.json({\n          success: true,\n          product_id: product.id,\n          analysis: response.data.analysis,\n          file_url: response.data.file_url,\n          ipfs_hash: response.data.ipfs_hash,\n        });\n      } else {\n        res.json(response.data);\n      }\n    } catch (error: any) {\n      console.error(\"Upload error:\", error);\n      \n      // Clean up temporary file if it exists\n      if (req.file) {\n        const fs = require('fs');\n        try {\n          fs.unlinkSync(req.file.path);\n        } catch (cleanupError) {\n          console.error(\"File cleanup error:\", cleanupError);\n        }\n      }\n\n      if (error.response) {\n        res.status(error.response.status).json(error.response.data);\n      } else {\n        res.status(500).json({ error: \"Upload service unavailable\" });\n      }\n    }\n  });\n\n  // Pricing quote endpoint\n  app.post(\"/api/pricing/quote\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const response = await axios.post(`${FLASK_BACKEND_URL}/api/pricing/quote`, req.body, {\n        headers: {\n          Authorization: req.headers.authorization,\n          'Content-Type': 'application/json',\n        },\n        timeout: 10000,\n      });\n\n      res.json(response.data);\n    } catch (error: any) {\n      console.error(\"Pricing quote error:\", error);\n      if (error.response) {\n        res.status(error.response.status).json(error.response.data);\n      } else {\n        res.status(500).json({ error: \"Pricing service unavailable\" });\n      }\n    }\n  });\n\n  // Product endpoints\n  app.get(\"/api/products/:id\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n\n      // Check if user has access to this product\n      if (product.user_id !== req.user!.id && req.user!.role !== \"admin\") {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      res.json(product);\n    } catch (error) {\n      console.error(\"Get product error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve product\" });\n    }\n  });\n\n  app.get(\"/api/products\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const products = await storage.getProductsByUser(req.user!.id);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Get products error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve products\" });\n    }\n  });\n\n  // Order endpoints\n  app.post(\"/api/orders\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const orderData = {\n        ...req.body,\n        customer_id: req.user!.id,\n        status: \"draft\",\n      };\n\n      const order = await storage.createOrder(orderData);\n      \n      // Emit notification to relevant users\n      if (orderData.producer_id) {\n        io.to(`user_${orderData.producer_id}`).emit(\"notification\", {\n          type: \"new_order\",\n          title: \"Yeni Sipariş\",\n          body: \"Size yeni bir sipariş geldi\",\n          order_id: order.id,\n        });\n      }\n\n      res.json(order);\n    } catch (error) {\n      console.error(\"Create order error:\", error);\n      res.status(500).json({ error: \"Failed to create order\" });\n    }\n  });\n\n  app.get(\"/api/orders\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      let orders;\n      if (req.user!.role === \"producer\") {\n        orders = await storage.getOrdersByProducer(req.user!.id);\n      } else if (req.user!.role === \"customer\") {\n        orders = await storage.getOrdersByCustomer(req.user!.id);\n      } else if (req.user!.role === \"admin\") {\n        // Admin can see all orders - implement this in storage if needed\n        orders = await storage.getOrdersByCustomer(req.user!.id); // Placeholder\n      } else {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Get orders error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n\n      // Check access permissions\n      const hasAccess = order.customer_id === req.user!.id || \n                       order.producer_id === req.user!.id || \n                       req.user!.role === \"admin\";\n\n      if (!hasAccess) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      res.json(order);\n    } catch (error) {\n      console.error(\"Get order error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve order\" });\n    }\n  });\n\n  app.patch(\"/api/orders/:id\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const order = await storage.getOrder(req.params.id);\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n\n      // Check permissions for order updates\n      const canUpdate = order.customer_id === req.user!.id || \n                       order.producer_id === req.user!.id || \n                       req.user!.role === \"admin\";\n\n      if (!canUpdate) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      const updatedOrder = await storage.updateOrder(req.params.id, req.body);\n      \n      // Emit real-time update\n      io.to(`order_${req.params.id}`).emit(\"order_updated\", updatedOrder);\n\n      res.json(updatedOrder);\n    } catch (error) {\n      console.error(\"Update order error:\", error);\n      res.status(500).json({ error: \"Failed to update order\" });\n    }\n  });\n\n  // Message endpoints\n  app.get(\"/api/orders/:orderId/messages\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const order = await storage.getOrder(req.params.orderId);\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n\n      // Check access permissions\n      const hasAccess = order.customer_id === req.user!.id || \n                       order.producer_id === req.user!.id;\n\n      if (!hasAccess) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      const messages = await storage.getMessagesByOrder(req.params.orderId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Get messages error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve messages\" });\n    }\n  });\n\n  // Notification endpoints\n  app.get(\"/api/notifications\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const notifications = await storage.getNotificationsByUser(req.user!.id);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Get notifications error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve notifications\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.markNotificationAsRead(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Mark notification read error:\", error);\n      res.status(500).json({ error: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // Materials endpoint\n  app.get(\"/api/materials\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const materials = await storage.getMaterials();\n      res.json(materials);\n    } catch (error) {\n      console.error(\"Get materials error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve materials\" });\n    }\n  });\n\n  // Admin endpoints\n  app.get(\"/api/admin/users\", authenticate, authorize([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      // Forward to Flask backend for user management\n      const response = await axios.get(`${FLASK_BACKEND_URL}/api/admin/users`, {\n        headers: {\n          Authorization: req.headers.authorization,\n        },\n        timeout: 10000,\n      });\n\n      res.json(response.data);\n    } catch (error: any) {\n      console.error(\"Get admin users error:\", error);\n      if (error.response) {\n        res.status(error.response.status).json(error.response.data);\n      } else {\n        res.status(500).json({ error: \"Admin service unavailable\" });\n      }\n    }\n  });\n\n  app.get(\"/api/admin/analytics\", authenticate, authorize([\"admin\"]), async (req: AuthenticatedRequest, res) => {\n    try {\n      // Forward to Flask backend for analytics\n      const response = await axios.get(`${FLASK_BACKEND_URL}/api/admin/analytics`, {\n        headers: {\n          Authorization: req.headers.authorization,\n        },\n        timeout: 10000,\n      });\n\n      res.json(response.data);\n    } catch (error: any) {\n      console.error(\"Get admin analytics error:\", error);\n      if (error.response) {\n        res.status(error.response.status).json(error.response.data);\n      } else {\n        res.status(500).json({ error: \"Analytics service unavailable\" });\n      }\n    }\n  });\n\n  // Proxy any unhandled API requests to Flask backend\n  app.use(\"/api/*\", authenticate, async (req: AuthenticatedRequest, res) => {\n    try {\n      const response = await axios({\n        method: req.method.toLowerCase() as any,\n        url: `${FLASK_BACKEND_URL}${req.originalUrl}`,\n        data: req.body,\n        headers: {\n          ...req.headers,\n          host: undefined, // Remove host header to avoid conflicts\n        },\n        timeout: 30000,\n      });\n\n      res.status(response.status).json(response.data);\n    } catch (error: any) {\n      console.error(\"Proxy request error:\", error);\n      if (error.response) {\n        res.status(error.response.status).json(error.response.data);\n      } else {\n        res.status(500).json({ error: \"Backend service unavailable\" });\n      }\n    }\n  });\n\n  // Error handling middleware\n  app.use((error: any, req: any, res: any, next: any) => {\n    console.error(\"Server error:\", error);\n    \n    if (error instanceof multer.MulterError) {\n      if (error.code === 'LIMIT_FILE_SIZE') {\n        return res.status(400).json({ error: \"Dosya boyutu çok büyük. Maksimum 100MB.\" });\n      }\n    }\n\n    res.status(error.status || 500).json({ \n      error: error.message || \"Internal server error\" \n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":18544},"server/storage.ts":{"content":"import { \n  users, \n  products, \n  orders, \n  messages, \n  notifications, \n  materials,\n  type User, \n  type InsertUser, \n  type Product, \n  type InsertProduct, \n  type Order, \n  type InsertOrder, \n  type Message, \n  type InsertMessage, \n  type Notification, \n  type InsertNotification, \n  type Material, \n  type InsertMaterial \n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, like } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n  \n  // Products\n  getProduct(id: string): Promise<Product | undefined>;\n  getProductsByUser(userId: string): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, updates: Partial<InsertProduct>): Promise<Product | undefined>;\n  \n  // Orders\n  getOrder(id: string): Promise<Order | undefined>;\n  getOrdersByCustomer(customerId: string): Promise<Order[]>;\n  getOrdersByProducer(producerId: string): Promise<Order[]>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: string, updates: Partial<InsertOrder>): Promise<Order | undefined>;\n  \n  // Messages\n  getMessagesByOrder(orderId: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  \n  // Notifications\n  getNotificationsByUser(userId: string): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<void>;\n  \n  // Materials\n  getMaterials(): Promise<Material[]>;\n  createMaterial(material: InsertMaterial): Promise<Material>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({ ...insertUser, created_at: new Date(), updated_at: new Date() })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updated_at: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  // Products\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async getProductsByUser(userId: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(eq(products.user_id, userId))\n      .orderBy(desc(products.created_at));\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const [product] = await db\n      .insert(products)\n      .values({ ...insertProduct, created_at: new Date(), updated_at: new Date() })\n      .returning();\n    return product;\n  }\n\n  async updateProduct(id: string, updates: Partial<InsertProduct>): Promise<Product | undefined> {\n    const [product] = await db\n      .update(products)\n      .set({ ...updates, updated_at: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return product || undefined;\n  }\n\n  // Orders\n  async getOrder(id: string): Promise<Order | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order || undefined;\n  }\n\n  async getOrdersByCustomer(customerId: string): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .where(eq(orders.customer_id, customerId))\n      .orderBy(desc(orders.created_at));\n  }\n\n  async getOrdersByProducer(producerId: string): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .where(eq(orders.producer_id, producerId))\n      .orderBy(desc(orders.created_at));\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const [order] = await db\n      .insert(orders)\n      .values({ ...insertOrder, created_at: new Date(), updated_at: new Date() })\n      .returning();\n    return order;\n  }\n\n  async updateOrder(id: string, updates: Partial<InsertOrder>): Promise<Order | undefined> {\n    const [order] = await db\n      .update(orders)\n      .set({ ...updates, updated_at: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    return order || undefined;\n  }\n\n  // Messages\n  async getMessagesByOrder(orderId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.order_id, orderId))\n      .orderBy(messages.created_at);\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values({ ...insertMessage, created_at: new Date() })\n      .returning();\n    return message;\n  }\n\n  // Notifications\n  async getNotificationsByUser(userId: string): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.user_id, userId))\n      .orderBy(desc(notifications.created_at));\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const [notification] = await db\n      .insert(notifications)\n      .values({ ...insertNotification, created_at: new Date() })\n      .returning();\n    return notification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ is_read: true })\n      .where(eq(notifications.id, id));\n  }\n\n  // Materials\n  async getMaterials(): Promise<Material[]> {\n    return await db\n      .select()\n      .from(materials)\n      .where(eq(materials.is_active, true));\n  }\n\n  async createMaterial(insertMaterial: InsertMaterial): Promise<Material> {\n    const [material] = await db\n      .insert(materials)\n      .values(insertMaterial)\n      .returning();\n    return material;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6419},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, decimal, jsonb, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  role: text(\"role\").notNull().default(\"customer\"), // customer, producer, admin\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  kvkk_consent: boolean(\"kvkk_consent\").default(false),\n  kvkk_consent_date: timestamp(\"kvkk_consent_date\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n  last_login: timestamp(\"last_login\"),\n  is_active: boolean(\"is_active\").default(true),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  user_id: varchar(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  stl_file_url: text(\"stl_file_url\"),\n  ipfs_hash: text(\"ipfs_hash\"),\n  analysis: jsonb(\"analysis\"), // STL analysis data\n  status: text(\"status\").default(\"draft\"), // draft, pending, approved, rejected\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customer_id: varchar(\"customer_id\").notNull().references(() => users.id),\n  producer_id: varchar(\"producer_id\").references(() => users.id),\n  product_id: varchar(\"product_id\").notNull().references(() => products.id),\n  status: text(\"status\").default(\"draft\"),\n  quantity: integer(\"quantity\").default(1),\n  material_type: text(\"material_type\"),\n  pricing_data: jsonb(\"pricing_data\"),\n  customer_price: decimal(\"customer_price\", { precision: 10, scale: 2 }),\n  producer_earnings: decimal(\"producer_earnings\", { precision: 10, scale: 2 }),\n  platform_commission: decimal(\"platform_commission\", { precision: 10, scale: 2 }),\n  payment_fee: decimal(\"payment_fee\", { precision: 10, scale: 2 }),\n  notes: text(\"notes\"),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n  accepted_at: timestamp(\"accepted_at\"),\n  paid_at: timestamp(\"paid_at\"),\n  completed_at: timestamp(\"completed_at\"),\n  cancelled_at: timestamp(\"cancelled_at\"),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  order_id: varchar(\"order_id\").notNull().references(() => orders.id),\n  sender_id: varchar(\"sender_id\").notNull().references(() => users.id),\n  receiver_id: varchar(\"receiver_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  is_read: boolean(\"is_read\").default(false),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  user_id: varchar(\"user_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull(),\n  title: text(\"title\").notNull(),\n  body: text(\"body\"),\n  order_id: varchar(\"order_id\").references(() => orders.id),\n  is_read: boolean(\"is_read\").default(false),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const materials = pgTable(\"materials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // PLA, ABS, PETG, TPU\n  price_per_gram: decimal(\"price_per_gram\", { precision: 6, scale: 4 }),\n  density: decimal(\"density\", { precision: 4, scale: 2 }),\n  properties: jsonb(\"properties\"),\n  is_active: boolean(\"is_active\").default(true),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const insertMaterialSchema = createInsertSchema(materials).omit({\n  id: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Material = typeof materials.$inferSelect;\nexport type InsertMaterial = z.infer<typeof insertMaterialSchema>;\n","size_bytes":5249},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport NotFound from \"@/pages/not-found\";\nimport LoginPage from \"@/pages/auth/login\";\nimport CustomerLayout from \"@/layouts/customer-layout\";\nimport ProducerLayout from \"@/layouts/producer-layout\";\nimport AdminLayout from \"@/layouts/admin-layout\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/dashboard\" nest>\n        <CustomerLayout />\n      </Route>\n      <Route path=\"/producer\" nest>\n        <ProducerLayout />\n      </Route>\n      <Route path=\"/admin\" nest>\n        <AdminLayout />\n      </Route>\n      <Route path=\"/\">\n        <LoginPage />\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1271},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217, 91%, 60%, 0);\n  --shadow-xs: 0px 2px 0px 0px hsl(217, 91%, 60%, 0);\n  --shadow-sm: 0px 2px 0px 0px hsl(217, 91%, 60%, 0), 0px 1px 2px -1px hsl(217, 91%, 60%, 0);\n  --shadow: 0px 2px 0px 0px hsl(217, 91%, 60%, 0), 0px 1px 2px -1px hsl(217, 91%, 60%, 0);\n  --shadow-md: 0px 2px 0px 0px hsl(217, 91%, 60%, 0), 0px 2px 4px -1px hsl(217, 91%, 60%, 0);\n  --shadow-lg: 0px 2px 0px 0px hsl(217, 91%, 60%, 0), 0px 4px 6px -1px hsl(217, 91%, 60%, 0);\n  --shadow-xl: 0px 2px 0px 0px hsl(217, 91%, 60%, 0), 0px 8px 10px -1px hsl(217, 91%, 60%, 0);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217, 91%, 60%, 0);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom Components */\n.gradient-bg {\n  background: linear-gradient(135deg, hsl(217, 91%, 60%) 0%, hsl(142, 76%, 36%) 100%);\n}\n\n.file-drop-zone {\n  border: 2px dashed hsl(var(--border));\n  transition: all 0.3s ease;\n}\n\n.file-drop-zone:hover,\n.file-drop-zone.drag-over {\n  border-color: hsl(var(--primary));\n  background-color: hsl(var(--accent));\n}\n\n.chat-bubble {\n  max-width: 70%;\n}\n\n.chat-bubble.sent {\n  margin-left: auto;\n  background-color: hsl(var(--primary));\n  color: hsl(var(--primary-foreground));\n}\n\n.chat-bubble.received {\n  background-color: hsl(var(--muted));\n  color: hsl(var(--muted-foreground));\n}\n\n.status-badge {\n  display: inline-flex;\n  align-items: center;\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.375rem;\n  font-size: 0.75rem;\n  font-weight: 500;\n}\n\n.status-draft { \n  background-color: hsl(220, 14%, 96%); \n  color: hsl(220, 9%, 46%); \n}\n\n.status-pending { \n  background-color: hsl(48, 100%, 96%); \n  color: hsl(25, 95%, 53%); \n}\n\n.status-accepted { \n  background-color: hsl(142, 76%, 96%); \n  color: hsl(142, 76%, 36%); \n}\n\n.status-paid { \n  background-color: hsl(217, 91%, 96%); \n  color: hsl(217, 91%, 60%); \n}\n\n.status-in_production { \n  background-color: hsl(262, 83%, 96%); \n  color: hsl(262, 83%, 58%); \n}\n\n.status-completed { \n  background-color: hsl(142, 76%, 96%); \n  color: hsl(142, 76%, 36%); \n}\n\n.status-cancelled { \n  background-color: hsl(0, 84%, 96%); \n  color: hsl(0, 84%, 60%); \n}\n\n.timeline-step {\n  position: relative;\n}\n\n.timeline-step:not(:last-child)::after {\n  content: '';\n  position: absolute;\n  left: 0.75rem;\n  top: 2rem;\n  height: 2rem;\n  width: 2px;\n  background-color: hsl(var(--border));\n}\n\n.timeline-step.completed::after {\n  background-color: hsl(var(--secondary));\n}\n","size_bytes":5461},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\nimport { \n  User as FirebaseUser, \n  onAuthStateChanged, \n  signInWithEmailAndPassword,\n  signOut as firebaseSignOut,\n  getIdToken\n} from \"firebase/auth\";\nimport { auth } from \"@/lib/firebase\";\nimport { authApi, LoginResponse } from \"@/lib/api\";\nimport { socketService } from \"@/lib/socket\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  role: \"customer\" | \"producer\" | \"admin\";\n  kvkk_consent: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string, kvkkConsent?: boolean) => Promise<void>;\n  logout: () => Promise<void>;\n  token: string | null;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser: FirebaseUser | null) => {\n      try {\n        if (firebaseUser) {\n          const idToken = await getIdToken(firebaseUser);\n          const response = await authApi.login({ id_token: idToken });\n          \n          if (response.success) {\n            setUser(response.user as User);\n            setToken(response.token);\n            localStorage.setItem(\"auth_token\", response.token);\n            \n            // Connect to Socket.IO\n            socketService.connect(response.token);\n          }\n        } else {\n          setUser(null);\n          setToken(null);\n          localStorage.removeItem(\"auth_token\");\n          socketService.disconnect();\n        }\n      } catch (error) {\n        console.error(\"Auth state change error:\", error);\n        toast({\n          title: \"Kimlik doğrulama hatası\",\n          description: \"Giriş yapılırken bir hata oluştu.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    });\n\n    return () => unsubscribe();\n  }, [toast]);\n\n  const login = async (email: string, password: string, kvkkConsent = false) => {\n    try {\n      setLoading(true);\n      \n      // For development, try direct API login first\n      if (import.meta.env.DEV) {\n        try {\n          const response = await authApi.login({ \n            email, \n            password, \n            kvkk_consent: kvkkConsent \n          });\n          \n          if (response.success) {\n            setUser(response.user as User);\n            setToken(response.token);\n            localStorage.setItem(\"auth_token\", response.token);\n            socketService.connect(response.token);\n            return;\n          }\n        } catch (devError) {\n          // Fall back to Firebase auth\n          console.log(\"Dev login failed, trying Firebase:\", devError);\n        }\n      }\n\n      // Firebase authentication\n      const credential = await signInWithEmailAndPassword(auth, email, password);\n      const idToken = await getIdToken(credential.user);\n      \n      const response = await authApi.login({ \n        id_token: idToken, \n        kvkk_consent: kvkkConsent \n      });\n      \n      if (response.success) {\n        setUser(response.user as User);\n        setToken(response.token);\n        localStorage.setItem(\"auth_token\", response.token);\n        socketService.connect(response.token);\n      } else {\n        throw new Error(response.error || \"Giriş başarısız\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Giriş hatası\",\n        description: error.message || \"Giriş yapılırken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await firebaseSignOut(auth);\n      setUser(null);\n      setToken(null);\n      localStorage.removeItem(\"auth_token\");\n      socketService.disconnect();\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, loading, login, logout, token }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":4510},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-socket.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { socketService } from \"@/lib/socket\";\nimport { useAuth } from \"./use-auth\";\n\nexport function useSocket() {\n  const [connected, setConnected] = useState(false);\n  const { token } = useAuth();\n\n  useEffect(() => {\n    if (!token) return;\n\n    const socket = socketService.connect(token);\n\n    const handleConnect = () => setConnected(true);\n    const handleDisconnect = () => setConnected(false);\n\n    socket.on(\"connect\", handleConnect);\n    socket.on(\"disconnect\", handleDisconnect);\n\n    return () => {\n      socket.off(\"connect\", handleConnect);\n      socket.off(\"disconnect\", handleDisconnect);\n    };\n  }, [token]);\n\n  return {\n    socket: socketService.getSocket(),\n    connected,\n    emit: socketService.emit.bind(socketService),\n    on: socketService.on.bind(socketService),\n    off: socketService.off.bind(socketService),\n  };\n}\n\nexport function useSocketEvent(event: string, callback: Function) {\n  const { socket } = useSocket();\n\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.on(event, callback);\n    return () => {\n      socket.off(event, callback);\n    };\n  }, [socket, event, callback]);\n}\n","size_bytes":1168},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/layouts/admin-layout.tsx":{"content":"import { useState } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { Shield } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Header } from \"@/components/shared/header\";\nimport { PageLoader } from \"@/components/shared/loading-spinner\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport AdminUsers from \"@/pages/admin/users\";\nimport AdminOrders from \"@/pages/admin/orders\";\nimport AdminAnalytics from \"@/pages/admin/analytics\";\n\nexport default function AdminLayout() {\n  const [activeSection, setActiveSection] = useState(\"dashboard\");\n  const [location, navigate] = useLocation();\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return <PageLoader />;\n  }\n\n  if (!user) {\n    navigate(\"/login\");\n    return null;\n  }\n\n  if (user.role !== \"admin\") {\n    navigate(\"/login\");\n    return null;\n  }\n\n  const navigation = [\n    { label: \"Panel\", section: \"dashboard\", active: activeSection === \"dashboard\" },\n    { label: \"Kullanıcılar\", section: \"users\", active: activeSection === \"users\" },\n    { label: \"Siparişler\", section: \"orders\", active: activeSection === \"orders\" },\n    { label: \"Analitik\", section: \"analytics\", active: activeSection === \"analytics\" },\n  ];\n\n  const handleNavigate = (section: string) => {\n    setActiveSection(section);\n    navigate(`/admin/${section}`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"admin-layout\">\n      <Header\n        title=\"Admin Paneli\"\n        icon={<Shield className=\"w-5 h-5 text-destructive-foreground\" />}\n        navigation={navigation}\n        onNavigate={handleNavigate}\n        color=\"destructive\"\n      />\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Switch>\n          <Route path=\"/admin/users\">\n            <AdminUsers />\n          </Route>\n          <Route path=\"/admin/orders\">\n            <AdminOrders />\n          </Route>\n          <Route path=\"/admin/analytics\">\n            <AdminAnalytics />\n          </Route>\n          <Route path=\"/admin/:section?\" params={{ section: activeSection }}>\n            <AdminDashboard />\n          </Route>\n        </Switch>\n      </main>\n    </div>\n  );\n}\n","size_bytes":2201},"client/src/layouts/customer-layout.tsx":{"content":"import { useState } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { Box, Upload, Package, MessageCircle } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Header } from \"@/components/shared/header\";\nimport { PageLoader } from \"@/components/shared/loading-spinner\";\nimport CustomerDashboard from \"@/pages/customer/dashboard\";\nimport UploadPage from \"@/pages/customer/upload\";\nimport CustomerOrders from \"@/pages/customer/orders\";\nimport CustomerMessages from \"@/pages/customer/messages\";\n\nexport default function CustomerLayout() {\n  const [activeSection, setActiveSection] = useState(\"dashboard\");\n  const [location, navigate] = useLocation();\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return <PageLoader />;\n  }\n\n  if (!user) {\n    navigate(\"/login\");\n    return null;\n  }\n\n  if (user.role !== \"customer\") {\n    navigate(\"/login\");\n    return null;\n  }\n\n  const navigation = [\n    { label: \"Panel\", section: \"dashboard\", active: activeSection === \"dashboard\" },\n    { label: \"Dosya Yükle\", section: \"upload\", active: activeSection === \"upload\" },\n    { label: \"Siparişlerim\", section: \"orders\", active: activeSection === \"orders\" },\n    { label: \"Mesajlar\", section: \"messages\", active: activeSection === \"messages\" },\n  ];\n\n  const handleNavigate = (section: string) => {\n    setActiveSection(section);\n    navigate(`/dashboard/${section}`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"customer-layout\">\n      <Header\n        title=\"3D Baskı Pazaryeri\"\n        icon={<Box className=\"w-5 h-5 text-primary-foreground\" />}\n        navigation={navigation}\n        onNavigate={handleNavigate}\n        color=\"primary\"\n      />\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Switch>\n          <Route path=\"/dashboard/upload\">\n            <UploadPage />\n          </Route>\n          <Route path=\"/dashboard/orders\">\n            <CustomerOrders onNavigate={handleNavigate} />\n          </Route>\n          <Route path=\"/dashboard/messages\">\n            <CustomerMessages />\n          </Route>\n          <Route path=\"/dashboard/:section?\" params={{ section: activeSection }}>\n            <CustomerDashboard onNavigate={handleNavigate} />\n          </Route>\n        </Switch>\n      </main>\n    </div>\n  );\n}\n","size_bytes":2339},"client/src/layouts/producer-layout.tsx":{"content":"import { useState } from \"react\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { Factory } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Header } from \"@/components/shared/header\";\nimport { PageLoader } from \"@/components/shared/loading-spinner\";\nimport ProducerDashboard from \"@/pages/producer/dashboard\";\nimport ProducerOrders from \"@/pages/producer/orders\";\nimport ProducerSettings from \"@/pages/producer/settings\";\n\nexport default function ProducerLayout() {\n  const [activeSection, setActiveSection] = useState(\"dashboard\");\n  const [location, navigate] = useLocation();\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return <PageLoader />;\n  }\n\n  if (!user) {\n    navigate(\"/login\");\n    return null;\n  }\n\n  if (user.role !== \"producer\") {\n    navigate(\"/login\");\n    return null;\n  }\n\n  const navigation = [\n    { label: \"Panel\", section: \"dashboard\", active: activeSection === \"dashboard\" },\n    { label: \"Siparişler\", section: \"orders\", active: activeSection === \"orders\" },\n    { label: \"Ayarlar\", section: \"settings\", active: activeSection === \"settings\" },\n  ];\n\n  const handleNavigate = (section: string) => {\n    setActiveSection(section);\n    navigate(`/producer/${section}`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"producer-layout\">\n      <Header\n        title=\"Üretici Paneli\"\n        icon={<Factory className=\"w-5 h-5 text-secondary-foreground\" />}\n        navigation={navigation}\n        onNavigate={handleNavigate}\n        color=\"secondary\"\n      />\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Switch>\n          <Route path=\"/producer/orders\">\n            <ProducerOrders />\n          </Route>\n          <Route path=\"/producer/settings\">\n            <ProducerSettings />\n          </Route>\n          <Route path=\"/producer/:section?\" params={{ section: activeSection }}>\n            <ProducerDashboard />\n          </Route>\n        </Switch>\n      </main>\n    </div>\n  );\n}\n","size_bytes":2027},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nconst API_BASE = \"/api\";\n\nexport interface LoginRequest {\n  email?: string;\n  password?: string;\n  id_token?: string;\n  kvkk_consent?: boolean;\n}\n\nexport interface LoginResponse {\n  success: boolean;\n  token: string;\n  user: {\n    id: string;\n    email: string;\n    name: string;\n    role: string;\n    kvkk_consent: boolean;\n  };\n  created?: boolean;\n}\n\nexport interface HealthResponse {\n  status: string;\n  timestamp: string;\n  services: {\n    database: string;\n    storage: string;\n  };\n}\n\nexport interface PricingQuoteRequest {\n  product_id: string;\n  material_id: string;\n  infill_density?: number;\n  support_required?: boolean;\n  hourly_rate?: number;\n  fixed_cost?: number;\n  margin_percent?: number;\n  commission_rate?: number;\n  provider_fee_rate?: number;\n  min_order_amount?: number;\n}\n\nexport interface PricingQuoteResponse {\n  pricing: {\n    breakdown: {\n      material_cost: number;\n      time_cost: number;\n      support_cost: number;\n      fixed_cost: number;\n      producer_margin: number;\n      producer_subtotal: number;\n      platform_commission: number;\n      payment_fee: number;\n      customer_total: number;\n    };\n    producer_earnings: number;\n    platform_commission: number;\n    payment_fee: number;\n    customer_price: number;\n  };\n  params: any;\n}\n\nexport const authApi = {\n  login: (data: LoginRequest): Promise<LoginResponse> =>\n    apiRequest(\"POST\", `${API_BASE}/login`, data).then(res => res.json()),\n\n  health: (): Promise<HealthResponse> =>\n    apiRequest(\"GET\", `${API_BASE}/health`).then(res => res.json()),\n};\n\nexport const productApi = {\n  getProduct: (id: string): Promise<any> =>\n    apiRequest(\"GET\", `${API_BASE}/products/${id}`).then(res => res.json()),\n\n  quote: (data: PricingQuoteRequest): Promise<PricingQuoteResponse> =>\n    apiRequest(\"POST\", `${API_BASE}/pricing/quote`, data).then(res => res.json()),\n};\n\nexport const uploadApi = {\n  uploadSTL: (file: File, onProgress?: (progress: number) => void): Promise<any> => {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      const formData = new FormData();\n      formData.append(\"file\", file);\n\n      if (onProgress) {\n        xhr.upload.addEventListener(\"progress\", (e) => {\n          if (e.lengthComputable) {\n            const progress = (e.loaded / e.total) * 100;\n            onProgress(progress);\n          }\n        });\n      }\n\n      xhr.addEventListener(\"load\", () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            resolve(JSON.parse(xhr.responseText));\n          } catch (e) {\n            resolve(xhr.responseText);\n          }\n        } else {\n          reject(new Error(`Upload failed: ${xhr.statusText}`));\n        }\n      });\n\n      xhr.addEventListener(\"error\", () => {\n        reject(new Error(\"Upload failed\"));\n      });\n\n      xhr.open(\"POST\", `${API_BASE}/upload/stl`);\n      \n      // Add auth header if available\n      const token = localStorage.getItem(\"auth_token\");\n      if (token) {\n        xhr.setRequestHeader(\"Authorization\", token);\n      }\n\n      xhr.send(formData);\n    });\n  },\n};\n","size_bytes":3135},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport default app;\n","size_bytes":526},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/socket.ts":{"content":"import { io, Socket } from \"socket.io-client\";\n\nclass SocketService {\n  private socket: Socket | null = null;\n\n  connect(token: string): Socket {\n    if (this.socket?.connected) {\n      return this.socket;\n    }\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n\n    this.socket = io(wsUrl, {\n      auth: { token },\n      transports: [\"websocket\", \"polling\"],\n    });\n\n    return this.socket;\n  }\n\n  disconnect(): void {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  getSocket(): Socket | null {\n    return this.socket;\n  }\n\n  emit(event: string, data: any): void {\n    if (this.socket?.connected) {\n      this.socket.emit(event, data);\n    }\n  }\n\n  on(event: string, callback: Function): void {\n    if (this.socket) {\n      this.socket.on(event, callback);\n    }\n  }\n\n  off(event: string, callback?: Function): void {\n    if (this.socket) {\n      this.socket.off(event, callback);\n    }\n  }\n}\n\nexport const socketService = new SocketService();\n","size_bytes":1082},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: \"customer\" | \"producer\" | \"admin\";\n  phone?: string;\n  address?: string;\n  kvkk_consent: boolean;\n  kvkk_consent_date?: string;\n  created_at: string;\n  updated_at: string;\n  last_login?: string;\n  is_active: boolean;\n}\n\nexport interface Product {\n  id: string;\n  user_id: string;\n  name: string;\n  description?: string;\n  stl_file_url?: string;\n  ipfs_hash?: string;\n  analysis?: STLAnalysis;\n  status: \"draft\" | \"pending\" | \"approved\" | \"rejected\";\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface STLAnalysis {\n  triangle_count: number;\n  dimensions_mm: [number, number, number];\n  volume_mm3: number;\n  surface_area_mm2: number;\n  bounding_box_volume_mm3: number;\n  estimated_weight_g: number;\n  estimated_print_time_minutes: number;\n  print_difficulty: string;\n  complexity_score: number;\n  preview?: Array<[[number, number, number], [number, number, number], [number, number, number]]>;\n}\n\nexport interface Order {\n  id: string;\n  customer_id: string;\n  producer_id?: string;\n  product_id: string;\n  status: OrderStatus;\n  quantity: number;\n  material_type?: string;\n  pricing_data?: PricingData;\n  customer_price?: number;\n  producer_earnings?: number;\n  platform_commission?: number;\n  payment_fee?: number;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n  accepted_at?: string;\n  paid_at?: string;\n  completed_at?: string;\n  cancelled_at?: string;\n  \n  // Populated fields\n  customer?: User;\n  producer?: User;\n  product?: Product;\n}\n\nexport type OrderStatus = \n  | \"draft\"\n  | \"pending\"\n  | \"accepted\"\n  | \"rejected\"\n  | \"paid\"\n  | \"in_production\"\n  | \"completed_by_producer\"\n  | \"confirmed\"\n  | \"cancelled\"\n  | \"refunded\"\n  | \"dispute_open\"\n  | \"partial_refund\";\n\nexport interface PricingData {\n  breakdown: {\n    material_cost: number;\n    time_cost: number;\n    support_cost: number;\n    fixed_cost: number;\n    producer_margin: number;\n    producer_subtotal: number;\n    platform_commission: number;\n    payment_fee: number;\n    customer_total: number;\n  };\n  producer_earnings: number;\n  platform_commission: number;\n  payment_fee: number;\n  customer_price: number;\n}\n\nexport interface Message {\n  id: string;\n  order_id: string;\n  sender_id: string;\n  receiver_id: string;\n  content: string;\n  is_read: boolean;\n  created_at: string;\n  \n  // Populated fields\n  sender?: User;\n  receiver?: User;\n  order?: Order;\n}\n\nexport interface Notification {\n  id: string;\n  user_id: string;\n  type: string;\n  title: string;\n  body?: string;\n  order_id?: string;\n  is_read: boolean;\n  created_at: string;\n  \n  // Populated fields\n  order?: Order;\n}\n\nexport interface Material {\n  id: string;\n  name: string;\n  type: string;\n  price_per_gram: number;\n  density: number;\n  properties?: Record<string, any>;\n  is_active: boolean;\n}\n\nexport interface UploadProgress {\n  loaded: number;\n  total: number;\n  percentage: number;\n}\n\nexport interface Conversation {\n  id: string;\n  order_id: string;\n  other_user: {\n    id: string;\n    name: string;\n  };\n  last_message?: Message;\n  unread_count: number;\n}\n\nexport interface DashboardStats {\n  total_orders?: number;\n  active_orders?: number;\n  total_spent?: number;\n  total_earnings?: number;\n  messages?: number;\n  rating?: number;\n  completed_orders?: number;\n}\n","size_bytes":3317},"client/src/utils/format.ts":{"content":"import { format, formatDistanceToNow } from \"date-fns\";\nimport { tr } from \"date-fns/locale\";\n\nexport function formatTRY(amount: number | string): string {\n  const num = typeof amount === \"string\" ? parseFloat(amount) : amount;\n  \n  if (isNaN(num)) return \"₺0,00\";\n  \n  return new Intl.NumberFormat(\"tr-TR\", {\n    style: \"currency\",\n    currency: \"TRY\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(num);\n}\n\nexport function formatDate(dateString: string, withTime = false): string {\n  const date = new Date(dateString);\n  \n  if (withTime) {\n    return format(date, \"d MMMM yyyy HH:mm\", { locale: tr });\n  }\n  \n  return format(date, \"d MMMM yyyy\", { locale: tr });\n}\n\nexport function formatRelativeTime(dateString: string): string {\n  const date = new Date(dateString);\n  \n  return formatDistanceToNow(date, {\n    addSuffix: true,\n    locale: tr,\n  });\n}\n\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return \"0 Bytes\";\n  \n  const k = 1024;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n}\n\nexport function formatDimensions(dimensions: [number, number, number]): string {\n  return dimensions.map(d => d.toFixed(1)).join(\"×\") + \" mm\";\n}\n\nexport function formatVolume(volumeMm3: number): string {\n  const volumeCm3 = volumeMm3 / 1000;\n  return volumeCm3.toFixed(1) + \" cm³\";\n}\n\nexport function formatWeight(weightG: number): string {\n  return weightG.toFixed(1) + \" gram\";\n}\n\nexport function formatPrintTime(minutes: number): string {\n  const hours = minutes / 60;\n  \n  if (hours < 1) {\n    return Math.round(minutes) + \" dakika\";\n  } else if (hours < 24) {\n    return hours.toFixed(1) + \" saat\";\n  } else {\n    const days = hours / 24;\n    return days.toFixed(1) + \" gün\";\n  }\n}\n\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.slice(0, maxLength) + \"...\";\n}\n","size_bytes":2032},"client/src/components/auth/kvkk-notice.tsx":{"content":"import { ShieldCheck } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface KvkkNoticeProps {\n  onAccept: () => void;\n}\n\nexport function KvkkNotice({ onAccept }: KvkkNoticeProps) {\n  return (\n    <div className=\"bg-card rounded-lg p-6 shadow-xl mb-6 border border-border\" data-testid=\"kvkk-notice\">\n      <div className=\"flex items-center space-x-3 mb-4\">\n        <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n          <ShieldCheck className=\"w-4 h-4 text-primary-foreground\" />\n        </div>\n        <h3 className=\"text-lg font-semibold text-card-foreground\">KVKK Bildirimi</h3>\n      </div>\n      <p className=\"text-sm text-muted-foreground mb-4\">\n        Kişisel verileriniz, 3D baskı pazaryeri hizmetlerini sunabilmek için KVKK kapsamında işlenmektedir. \n        Devam ederek{\" \"}\n        <a \n          href=\"/kvkk/aydinlatma\" \n          target=\"_blank\" \n          className=\"text-primary hover:underline\"\n          data-testid=\"link-kvkk-info\"\n        >\n          veri işleme politikamızı\n        </a>{\" \"}\n        kabul etmiş olursunuz.\n      </p>\n      <div className=\"text-xs text-muted-foreground mb-4 space-y-1\">\n        <p><strong>İşlenen veriler:</strong> Ad-soyad, iletişim bilgileri, adres, STL dosyaları, sipariş verileri</p>\n        <p><strong>Amaçlar:</strong> Sipariş/üretim/kargo/faturalandırma/müşteri desteği</p>\n        <p><strong>Haklar:</strong> Bilgi alma, düzeltme, silme, itiraz, veri taşınabilirliği</p>\n      </div>\n      <Button \n        onClick={onAccept} \n        className=\"w-full\"\n        data-testid=\"button-accept-kvkk\"\n      >\n        Kabul Ediyorum\n      </Button>\n    </div>\n  );\n}\n","size_bytes":1713},"client/src/components/auth/login-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Eye, EyeOff, Mail, Lock } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Geçerli bir e-posta adresi girin\"),\n  password: z.string().min(6, \"Şifre en az 6 karakter olmalıdır\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\ninterface LoginFormProps {\n  kvkkAccepted: boolean;\n}\n\nexport function LoginForm({ kvkkAccepted }: LoginFormProps) {\n  const [showPassword, setShowPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    if (!kvkkAccepted) {\n      toast({\n        title: \"KVKK Onayı Gerekli\",\n        description: \"Devam etmek için KVKK metnini kabul etmelisiniz.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await login(data.email, data.password, kvkkAccepted);\n      toast({\n        title: \"Giriş Başarılı\",\n        description: \"Hoş geldiniz!\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Giriş Hatası\",\n        description: error.message || \"Giriş yapılırken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg p-8 shadow-xl border border-border\" data-testid=\"login-form\">\n      <div className=\"text-center mb-8\">\n        <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n          <div className=\"w-8 h-8 bg-primary-foreground rounded text-primary font-bold flex items-center justify-center\">\n            3D\n          </div>\n        </div>\n        <h1 className=\"text-2xl font-bold text-card-foreground\">3D Baskı Pazaryeri</h1>\n        <p className=\"text-muted-foreground mt-2\">Hesabınıza giriş yapın</p>\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\" className=\"text-sm font-medium text-card-foreground\">\n            E-posta\n          </Label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              {...register(\"email\")}\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"ornek@email.com\"\n              className=\"pl-10\"\n              data-testid=\"input-email\"\n            />\n          </div>\n          {errors.email && (\n            <p className=\"text-xs text-destructive\" data-testid=\"error-email\">\n              {errors.email.message}\n            </p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"password\" className=\"text-sm font-medium text-card-foreground\">\n            Şifre\n          </Label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              {...register(\"password\")}\n              id=\"password\"\n              type={showPassword ? \"text\" : \"password\"}\n              placeholder=\"••••••••\"\n              className=\"pl-10 pr-10\"\n              data-testid=\"input-password\"\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-toggle-password\"\n            >\n              {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n            </button>\n          </div>\n          {errors.password && (\n            <p className=\"text-xs text-destructive\" data-testid=\"error-password\">\n              {errors.password.message}\n            </p>\n          )}\n        </div>\n\n        <Button\n          type=\"submit\"\n          className=\"w-full\"\n          disabled={loading}\n          data-testid=\"button-login\"\n        >\n          {loading ? \"Giriş yapılıyor...\" : \"Giriş Yap\"}\n        </Button>\n      </form>\n\n      <div className=\"mt-6 text-center\">\n        <button className=\"text-primary hover:underline text-sm\" data-testid=\"link-forgot-password\">\n          Şifremi Unuttum\n        </button>\n        <p className=\"mt-4 text-sm text-muted-foreground\">\n          Hesabınız yok mu?{\" \"}\n          <button className=\"text-primary hover:underline\" data-testid=\"link-register\">\n            Kayıt Ol\n          </button>\n        </p>\n      </div>\n\n      {/* Development hint */}\n      {import.meta.env.DEV && (\n        <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n          <p className=\"text-xs text-muted-foreground mb-2\">Test kullanıcıları (geliştirme):</p>\n          <div className=\"text-xs space-y-1\">\n            <p><strong>Admin:</strong> admin@example.com / admin123</p>\n            <p><strong>Üretici:</strong> producer@example.com / producer123</p>\n            <p><strong>Müşteri:</strong> demo@example.com / demo1234</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5714},"client/src/components/chat/chat-interface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Send, User } from \"lucide-react\";\nimport { useSocketEvent } from \"@/hooks/use-socket\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface Message {\n  id: string;\n  sender_id: string;\n  receiver_id: string;\n  content: string;\n  created_at: string;\n  sender_name?: string;\n}\n\ninterface Conversation {\n  id: string;\n  other_user: {\n    id: string;\n    name: string;\n  };\n  order_id: string;\n  last_message?: Message;\n  unread_count: number;\n}\n\ninterface ChatInterfaceProps {\n  conversations: Conversation[];\n  selectedConversation?: Conversation;\n  onSelectConversation: (conversation: Conversation) => void;\n  className?: string;\n}\n\nexport function ChatInterface({\n  conversations,\n  selectedConversation,\n  onSelectConversation,\n  className,\n}: ChatInterfaceProps) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { user } = useAuth();\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useSocketEvent(\"new_message\", (message: Message) => {\n    if (selectedConversation && \n        (message.sender_id === selectedConversation.other_user.id || \n         message.receiver_id === selectedConversation.other_user.id)) {\n      setMessages(prev => [...prev, message]);\n    }\n  });\n\n  const handleSendMessage = async () => {\n    if (!newMessage.trim() || !selectedConversation || !user) return;\n\n    const messageData = {\n      order_id: selectedConversation.order_id,\n      receiver_id: selectedConversation.other_user.id,\n      content: newMessage.trim(),\n    };\n\n    setLoading(true);\n    try {\n      // Emit via Socket.IO\n      const socket = (window as any).socketService?.getSocket();\n      if (socket) {\n        socket.emit(\"send_message\", messageData);\n      }\n\n      // Add to local state optimistically\n      const tempMessage: Message = {\n        id: `temp-${Date.now()}`,\n        sender_id: user.id,\n        receiver_id: selectedConversation.other_user.id,\n        content: newMessage.trim(),\n        created_at: new Date().toISOString(),\n        sender_name: user.name,\n      };\n\n      setMessages(prev => [...prev, tempMessage]);\n      setNewMessage(\"\");\n    } catch (error) {\n      console.error(\"Failed to send message:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatTime = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString(\"tr-TR\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const formatLastMessage = (dateString: string) => {\n    const now = new Date();\n    const date = new Date(dateString);\n    const diffMs = now.getTime() - date.getTime();\n    const diffHours = diffMs / (1000 * 60 * 60);\n    const diffDays = diffMs / (1000 * 60 * 60 * 24);\n\n    if (diffHours < 1) {\n      const diffMinutes = Math.floor(diffMs / (1000 * 60));\n      return `${diffMinutes} dakika önce`;\n    } else if (diffHours < 24) {\n      return `${Math.floor(diffHours)} saat önce`;\n    } else if (diffDays < 7) {\n      return `${Math.floor(diffDays)} gün önce`;\n    } else {\n      return date.toLocaleDateString(\"tr-TR\");\n    }\n  };\n\n  return (\n    <div className={`grid grid-cols-1 lg:grid-cols-3 gap-6 ${className}`}>\n      {/* Conversations List */}\n      <div className=\"bg-card rounded-lg border border-border\">\n        <div className=\"p-4 border-b border-border\">\n          <h3 className=\"font-semibold text-card-foreground\">Konuşmalar</h3>\n        </div>\n        <ScrollArea className=\"h-80\">\n          {conversations.length === 0 ? (\n            <div className=\"p-4 text-center text-muted-foreground\">\n              Henüz konuşma yok\n            </div>\n          ) : (\n            conversations.map((conversation) => (\n              <div\n                key={conversation.id}\n                onClick={() => onSelectConversation(conversation)}\n                className={`p-4 border-b border-border hover:bg-accent cursor-pointer transition-colors ${\n                  selectedConversation?.id === conversation.id ? \"bg-accent\" : \"\"\n                }`}\n                data-testid={`chat-item-${conversation.id}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                    <User className=\"w-5 h-5 text-primary\" />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"font-medium text-card-foreground\">\n                      {conversation.other_user.name}\n                    </p>\n                    {conversation.last_message && (\n                      <>\n                        <p className=\"text-sm text-muted-foreground truncate\">\n                          {conversation.last_message.content}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {formatLastMessage(conversation.last_message.created_at)}\n                        </p>\n                      </>\n                    )}\n                  </div>\n                  {conversation.unread_count > 0 && (\n                    <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n        </ScrollArea>\n      </div>\n\n      {/* Chat Area */}\n      <div className=\"lg:col-span-2 bg-card rounded-lg border border-border flex flex-col\">\n        {selectedConversation ? (\n          <>\n            {/* Chat Header */}\n            <div className=\"p-4 border-b border-border\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <User className=\"w-5 h-5 text-primary\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-card-foreground\">\n                    {selectedConversation.other_user.name}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Sipariş #{selectedConversation.order_id}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Messages */}\n            <ScrollArea className=\"flex-1 p-4\">\n              <div className=\"space-y-4\" data-testid=\"chat-messages\">\n                {messages.map((message) => {\n                  const isSent = message.sender_id === user?.id;\n                  return (\n                    <div\n                      key={message.id}\n                      className={`chat-bubble p-3 rounded-lg max-w-[70%] ${\n                        isSent\n                          ? \"chat-bubble sent ml-auto bg-primary text-primary-foreground\"\n                          : \"chat-bubble received bg-muted text-muted-foreground\"\n                      }`}\n                      data-testid={`message-${message.id}`}\n                    >\n                      <p className=\"text-sm\">{message.content}</p>\n                      <p className={`text-xs mt-1 ${\n                        isSent ? \"text-primary-foreground/70\" : \"text-muted-foreground\"\n                      }`}>\n                        {formatTime(message.created_at)}\n                      </p>\n                    </div>\n                  );\n                })}\n                <div ref={messagesEndRef} />\n              </div>\n            </ScrollArea>\n\n            {/* Message Input */}\n            <div className=\"p-4 border-t border-border\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  placeholder=\"Mesajınızı yazın...\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\" && !e.shiftKey) {\n                      e.preventDefault();\n                      handleSendMessage();\n                    }\n                  }}\n                  disabled={loading}\n                  data-testid=\"input-message\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={loading || !newMessage.trim()}\n                  size=\"icon\"\n                  data-testid=\"button-send-message\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center text-muted-foreground\">\n              <p>Mesajlaşmaya başlamak için bir konuşma seçin</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9164},"client/src/components/orders/order-timeline.tsx":{"content":"import { Check, Clock, Settings, Package, CheckCircle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TimelineStep {\n  id: string;\n  label: string;\n  status: \"completed\" | \"current\" | \"pending\";\n  timestamp?: string;\n  icon?: React.ReactNode;\n}\n\ninterface OrderTimelineProps {\n  orderStatus: string;\n  timestamps?: Record<string, string>;\n  className?: string;\n}\n\nexport function OrderTimeline({ orderStatus, timestamps = {}, className }: OrderTimelineProps) {\n  const getSteps = (): TimelineStep[] => {\n    const baseSteps = [\n      {\n        id: \"pending\",\n        label: \"Onaylandı\",\n        icon: <Check className=\"w-3 h-3\" />,\n      },\n      {\n        id: \"paid\",\n        label: \"Ödendi\",\n        icon: <Check className=\"w-3 h-3\" />,\n      },\n      {\n        id: \"in_production\",\n        label: \"Üretimde\",\n        icon: <Settings className=\"w-3 h-3\" />,\n      },\n      {\n        id: \"completed\",\n        label: \"Tamamlandı\",\n        icon: <CheckCircle className=\"w-3 h-3\" />,\n      },\n    ];\n\n    const statusOrder = [\"pending\", \"accepted\", \"paid\", \"in_production\", \"completed_by_producer\", \"confirmed\"];\n    const currentIndex = statusOrder.indexOf(orderStatus);\n\n    return baseSteps.map((step, index) => {\n      let status: \"completed\" | \"current\" | \"pending\";\n      \n      if (index < currentIndex || (currentIndex >= 2 && index <= 2)) {\n        status = \"completed\";\n      } else if (index === currentIndex || (orderStatus === \"in_production\" && index === 2)) {\n        status = \"current\";\n      } else {\n        status = \"pending\";\n      }\n\n      return {\n        ...step,\n        status,\n        timestamp: timestamps[step.id],\n      };\n    });\n  };\n\n  const steps = getSteps();\n\n  return (\n    <div className={cn(\"space-y-4\", className)} data-testid=\"order-timeline\">\n      <h4 className=\"font-medium text-card-foreground mb-3\">Sipariş Durumu</h4>\n      <div className=\"flex items-center space-x-4\">\n        {steps.map((step, index) => (\n          <div key={step.id} className=\"timeline-step flex flex-col items-center\">\n            <div\n              className={cn(\n                \"w-6 h-6 rounded-full flex items-center justify-center relative z-10\",\n                {\n                  \"bg-secondary text-secondary-foreground\": step.status === \"completed\",\n                  \"bg-primary text-primary-foreground\": step.status === \"current\",\n                  \"bg-muted border-2 border-border\": step.status === \"pending\",\n                }\n              )}\n              data-testid={`timeline-step-${step.id}`}\n            >\n              {step.status === \"current\" && step.id === \"in_production\" ? (\n                <Settings className=\"w-3 h-3 animate-spin\" />\n              ) : (\n                step.icon\n              )}\n            </div>\n            <p\n              className={cn(\n                \"text-xs mt-1 text-center\",\n                {\n                  \"text-foreground font-medium\": step.status === \"current\",\n                  \"text-muted-foreground\": step.status !== \"current\",\n                }\n              )}\n              data-testid={`timeline-label-${step.id}`}\n            >\n              {step.label}\n            </p>\n            {step.timestamp && (\n              <p className=\"text-xs text-muted-foreground mt-1\" data-testid={`timeline-time-${step.id}`}>\n                {new Date(step.timestamp).toLocaleDateString(\"tr-TR\")}\n              </p>\n            )}\n            \n            {/* Connection line */}\n            {index < steps.length - 1 && (\n              <div\n                className={cn(\n                  \"absolute left-8 top-3 h-0.5 w-8 -z-10\",\n                  step.status === \"completed\" ? \"bg-secondary\" : \"bg-border\"\n                )}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\ninterface OrderStatusBadgeProps {\n  status: string;\n  className?: string;\n}\n\nexport function OrderStatusBadge({ status, className }: OrderStatusBadgeProps) {\n  const getStatusConfig = (status: string) => {\n    const configs = {\n      draft: { label: \"Taslak\", className: \"status-draft bg-gray-100 text-gray-600\" },\n      pending: { label: \"Onay Bekliyor\", className: \"status-pending bg-yellow-100 text-yellow-600\" },\n      accepted: { label: \"Onaylandı\", className: \"status-accepted bg-green-100 text-green-600\" },\n      paid: { label: \"Ödendi\", className: \"status-paid bg-blue-100 text-blue-600\" },\n      in_production: { label: \"Üretimde\", className: \"status-in_production bg-purple-100 text-purple-600\" },\n      completed_by_producer: { label: \"Üretim Tamamlandı\", className: \"status-completed bg-green-100 text-green-600\" },\n      confirmed: { label: \"Teslim Edildi\", className: \"status-completed bg-green-100 text-green-600\" },\n      cancelled: { label: \"İptal Edildi\", className: \"status-cancelled bg-red-100 text-red-600\" },\n      rejected: { label: \"Reddedildi\", className: \"status-cancelled bg-red-100 text-red-600\" },\n    };\n\n    return configs[status as keyof typeof configs] || { label: status, className: \"bg-gray-100 text-gray-600\" };\n  };\n\n  const config = getStatusConfig(status);\n\n  return (\n    <span\n      className={cn(\n        \"status-badge inline-flex items-center px-2 py-1 rounded text-xs font-medium\",\n        config.className,\n        className\n      )}\n      data-testid={`status-badge-${status}`}\n    >\n      {config.label}\n    </span>\n  );\n}\n","size_bytes":5399},"client/src/components/pricing/price-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { formatTRY } from \"@/utils/format\";\n\ninterface Material {\n  id: string;\n  name: string;\n  type: string;\n  price_per_gram: number;\n}\n\ninterface PricingData {\n  breakdown: {\n    material_cost: number;\n    time_cost: number;\n    support_cost: number;\n    fixed_cost: number;\n    producer_margin: number;\n    producer_subtotal: number;\n    platform_commission: number;\n    payment_fee: number;\n    customer_total: number;\n  };\n  producer_earnings: number;\n  platform_commission: number;\n  payment_fee: number;\n  customer_price: number;\n}\n\ninterface PriceCalculatorProps {\n  materials?: Material[];\n  onPriceChange?: (pricing: PricingData) => void;\n  productId?: string;\n  className?: string;\n}\n\nexport function PriceCalculator({\n  materials = [],\n  onPriceChange,\n  productId,\n  className,\n}: PriceCalculatorProps) {\n  const [selectedMaterial, setSelectedMaterial] = useState<string>(\"\");\n  const [infillDensity, setInfillDensity] = useState([20]);\n  const [supportRequired, setSupportRequired] = useState(false);\n  const [pricing, setPricing] = useState<PricingData | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  // Default materials if none provided\n  const defaultMaterials: Material[] = [\n    { id: \"pla\", name: \"PLA\", type: \"PLA\", price_per_gram: 0.02 },\n    { id: \"abs\", name: \"ABS\", type: \"ABS\", price_per_gram: 0.03 },\n    { id: \"petg\", name: \"PETG\", type: \"PETG\", price_per_gram: 0.04 },\n    { id: \"tpu\", name: \"TPU\", type: \"TPU\", price_per_gram: 0.06 },\n  ];\n\n  const availableMaterials = materials.length > 0 ? materials : defaultMaterials;\n\n  useEffect(() => {\n    if (selectedMaterial && productId) {\n      calculatePrice();\n    }\n  }, [selectedMaterial, infillDensity[0], supportRequired, productId]);\n\n  const calculatePrice = async () => {\n    if (!selectedMaterial || !productId) return;\n\n    setLoading(true);\n    try {\n      // Mock calculation for now - replace with actual API call\n      const mockPricing: PricingData = {\n        breakdown: {\n          material_cost: 12.5,\n          time_cost: 18.0,\n          support_cost: supportRequired ? 5.0 : 0,\n          fixed_cost: 2.0,\n          producer_margin: 7.5,\n          producer_subtotal: 45.0,\n          platform_commission: 6.75,\n          payment_fee: 1.25,\n          customer_total: 53.0,\n        },\n        producer_earnings: 38.25,\n        platform_commission: 6.75,\n        payment_fee: 1.25,\n        customer_price: 53.0,\n      };\n\n      setPricing(mockPricing);\n      onPriceChange?.(mockPricing);\n    } catch (error) {\n      console.error(\"Price calculation failed:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card className={className} data-testid=\"price-calculator\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold text-card-foreground\">\n          Fiyat Hesaplayıcı\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Material Selection */}\n        <div className=\"space-y-2\">\n          <label className=\"block text-sm font-medium text-card-foreground\">\n            Malzeme\n          </label>\n          <Select value={selectedMaterial} onValueChange={setSelectedMaterial} data-testid=\"select-material\">\n            <SelectTrigger>\n              <SelectValue placeholder=\"Malzeme seçin\" />\n            </SelectTrigger>\n            <SelectContent>\n              {availableMaterials.map((material) => (\n                <SelectItem key={material.id} value={material.id}>\n                  {material.name} - {formatTRY(material.price_per_gram)}/gram\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Infill Density */}\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between items-center\">\n            <label className=\"block text-sm font-medium text-card-foreground\">\n              Dolgu Yoğunluğu\n            </label>\n            <span className=\"text-sm font-medium text-primary\" data-testid=\"text-infill-value\">\n              %{infillDensity[0]}\n            </span>\n          </div>\n          <Slider\n            value={infillDensity}\n            onValueChange={setInfillDensity}\n            max={100}\n            min={10}\n            step={5}\n            className=\"w-full\"\n            data-testid=\"slider-infill\"\n          />\n        </div>\n\n        {/* Support Required */}\n        <div className=\"flex items-center space-x-2\">\n          <Checkbox\n            id=\"support\"\n            checked={supportRequired}\n            onCheckedChange={setSupportRequired}\n            data-testid=\"checkbox-support\"\n          />\n          <label\n            htmlFor=\"support\"\n            className=\"text-sm text-card-foreground cursor-pointer\"\n          >\n            Destek Malzemesi Gerekli\n          </label>\n        </div>\n\n        {/* Pricing Breakdown */}\n        {pricing && (\n          <div className=\"mt-6 p-4 bg-muted rounded-lg\" data-testid=\"pricing-breakdown\">\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Malzeme:</span>\n                <span className=\"text-card-foreground\" data-testid=\"text-material-cost\">\n                  {formatTRY(pricing.breakdown.material_cost)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">İşçilik:</span>\n                <span className=\"text-card-foreground\" data-testid=\"text-labor-cost\">\n                  {formatTRY(pricing.breakdown.time_cost)}\n                </span>\n              </div>\n              {pricing.breakdown.support_cost > 0 && (\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Destek:</span>\n                  <span className=\"text-card-foreground\" data-testid=\"text-support-cost\">\n                    {formatTRY(pricing.breakdown.support_cost)}\n                  </span>\n                </div>\n              )}\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Platform Komisyonu:</span>\n                <span className=\"text-card-foreground\" data-testid=\"text-commission\">\n                  {formatTRY(pricing.breakdown.platform_commission)}\n                </span>\n              </div>\n              <Separator className=\"my-2\" />\n              <div className=\"flex justify-between items-center font-medium\">\n                <span className=\"text-card-foreground\">Toplam:</span>\n                <span className=\"text-lg text-primary\" data-testid=\"text-total-price\">\n                  {formatTRY(pricing.customer_price)}\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {loading && (\n          <div className=\"text-center py-4\">\n            <p className=\"text-sm text-muted-foreground\">Fiyat hesaplanıyor...</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7491},"client/src/components/shared/header.tsx":{"content":"import { useState } from \"react\";\nimport { LogOut, Bell, User, Menu, X } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\n\ninterface HeaderProps {\n  title: string;\n  icon: React.ReactNode;\n  navigation: Array<{\n    label: string;\n    section: string;\n    active?: boolean;\n  }>;\n  onNavigate: (section: string) => void;\n  color?: \"primary\" | \"secondary\" | \"destructive\";\n}\n\nexport function Header({ title, icon, navigation, onNavigate, color = \"primary\" }: HeaderProps) {\n  const { user, logout } = useAuth();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const colorClasses = {\n    primary: \"text-primary bg-primary\",\n    secondary: \"text-secondary bg-secondary\",\n    destructive: \"text-destructive bg-destructive\",\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n\n  return (\n    <>\n      {/* Main Header */}\n      <header className=\"bg-card border-b border-border shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className={`w-8 h-8 ${colorClasses[color]} rounded-lg flex items-center justify-center`}>\n                {icon}\n              </div>\n              <h1 className=\"text-xl font-semibold text-card-foreground\">{title}</h1>\n            </div>\n            \n            {/* Desktop Navigation */}\n            <nav className=\"hidden md:flex space-x-8\">\n              {navigation.map((item) => (\n                <button\n                  key={item.section}\n                  onClick={() => onNavigate(item.section)}\n                  className={`nav-btn transition-colors ${\n                    item.active\n                      ? `${colorClasses[color].split(\" \")[0]} font-medium`\n                      : \"text-muted-foreground hover:text-foreground\"\n                  }`}\n                  data-testid={`nav-${item.section}`}\n                >\n                  {item.label}\n                </button>\n              ))}\n            </nav>\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Mobile Menu Trigger */}\n              <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n                <SheetTrigger asChild className=\"md:hidden\">\n                  <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-mobile-menu\">\n                    <Menu className=\"w-5 h-5\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-64\">\n                  <div className=\"flex flex-col space-y-4 mt-8\">\n                    {navigation.map((item) => (\n                      <button\n                        key={item.section}\n                        onClick={() => {\n                          onNavigate(item.section);\n                          setMobileMenuOpen(false);\n                        }}\n                        className={`text-left p-3 rounded-md transition-colors ${\n                          item.active\n                            ? `${colorClasses[color]} text-${color}-foreground`\n                            : \"text-muted-foreground hover:bg-accent hover:text-foreground\"\n                        }`}\n                        data-testid={`mobile-nav-${item.section}`}\n                      >\n                        {item.label}\n                      </button>\n                    ))}\n                  </div>\n                </SheetContent>\n              </Sheet>\n\n              {/* Notifications */}\n              <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-notifications\">\n                <Bell className=\"w-5 h-5\" />\n                <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full text-xs\"></span>\n              </Button>\n\n              {/* User Profile */}\n              <div className=\"flex items-center space-x-2\">\n                <Avatar className=\"w-8 h-8\">\n                  <AvatarFallback>\n                    <User className=\"w-4 h-4\" />\n                  </AvatarFallback>\n                </Avatar>\n                <span className=\"hidden sm:block text-sm font-medium text-card-foreground\" data-testid=\"text-username\">\n                  {user?.name}\n                </span>\n              </div>\n\n              {/* Logout */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleLogout}\n                className=\"text-muted-foreground hover:text-foreground\"\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Mobile Navigation Bar */}\n      <div className=\"md:hidden bg-card border-b border-border\">\n        <div className=\"px-4 py-2 flex space-x-2 overflow-x-auto\">\n          {navigation.map((item) => (\n            <button\n              key={item.section}\n              onClick={() => onNavigate(item.section)}\n              className={`whitespace-nowrap px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                item.active\n                  ? `${colorClasses[color]} text-${color}-foreground`\n                  : \"text-muted-foreground hover:bg-accent hover:text-foreground\"\n              }`}\n              data-testid={`mobile-tab-${item.section}`}\n            >\n              {item.label}\n            </button>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":5813},"client/src/components/shared/loading-spinner.tsx":{"content":"import { Loader2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface LoadingSpinnerProps {\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n  text?: string;\n}\n\nexport function LoadingSpinner({ size = \"md\", className, text }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: \"w-4 h-4\",\n    md: \"w-6 h-6\",\n    lg: \"w-8 h-8\",\n  };\n\n  return (\n    <div className={cn(\"flex items-center justify-center\", className)} data-testid=\"loading-spinner\">\n      <div className=\"flex flex-col items-center space-y-2\">\n        <Loader2 className={cn(\"animate-spin text-primary\", sizeClasses[size])} />\n        {text && (\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"loading-text\">\n            {text}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport function PageLoader() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <LoadingSpinner size=\"lg\" text=\"Yükleniyor...\" />\n    </div>\n  );\n}\n\nexport function SectionLoader() {\n  return (\n    <div className=\"flex items-center justify-center py-12\">\n      <LoadingSpinner text=\"Yükleniyor...\" />\n    </div>\n  );\n}\n","size_bytes":1160},"client/src/components/three/stl-viewer.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { Canvas, useFrame, useLoader } from \"@react-three/fiber\";\nimport { OrbitControls, PerspectiveCamera } from \"@react-three/drei\";\nimport { STLLoader } from \"three/examples/jsm/loaders/STLLoader\";\nimport * as THREE from \"three\";\nimport { Axis3d, RotateCcw } from \"lucide-react\";\n\ninterface STLViewerProps {\n  fileUrl?: string;\n  analysis?: {\n    dimensions_mm: [number, number, number];\n    volume_mm3: number;\n    surface_area_mm2: number;\n    estimated_weight_g: number;\n    estimated_print_time_minutes: number;\n  };\n  className?: string;\n}\n\nfunction STLModel({ url }: { url: string }) {\n  const meshRef = useRef<THREE.Mesh>(null);\n  const geometry = useLoader(STLLoader, url);\n\n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y = state.clock.elapsedTime * 0.2;\n    }\n  });\n\n  useEffect(() => {\n    if (geometry) {\n      geometry.computeBoundingBox();\n      geometry.center();\n    }\n  }, [geometry]);\n\n  return (\n    <mesh ref={meshRef} geometry={geometry}>\n      <meshStandardMaterial color=\"#4f46e5\" />\n    </mesh>\n  );\n}\n\nexport function STLViewer({ fileUrl, analysis, className }: STLViewerProps) {\n  const [error, setError] = useState<string | null>(null);\n  const controlsRef = useRef<any>(null);\n\n  const resetCamera = () => {\n    if (controlsRef.current) {\n      controlsRef.current.reset();\n    }\n  };\n\n  if (!fileUrl) {\n    return (\n      <div className={`bg-gradient-to-br from-muted to-accent/50 flex items-center justify-center ${className}`}>\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Axis3d className=\"w-8 h-8 text-primary\" />\n          </div>\n          <p className=\"text-muted-foreground mb-2\">STL dosyası yüklendiğinde</p>\n          <p className=\"text-muted-foreground\">3D önizleme burada görünecek</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`bg-muted/50 flex items-center justify-center ${className}`}>\n        <div className=\"text-center text-destructive\">\n          <p>3D model yüklenemedi</p>\n          <p className=\"text-sm\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`relative ${className}`} data-testid=\"stl-viewer\">\n      <div className=\"absolute top-4 right-4 z-10\">\n        <button\n          onClick={resetCamera}\n          className=\"p-2 bg-card/80 backdrop-blur-sm rounded-md shadow-md hover:bg-card transition-colors\"\n          data-testid=\"button-reset-camera\"\n          title=\"Kamerayı sıfırla\"\n        >\n          <RotateCcw className=\"w-4 h-4\" />\n        </button>\n      </div>\n      \n      <Canvas>\n        <PerspectiveCamera makeDefault position={[0, 0, 100]} />\n        <OrbitControls ref={controlsRef} enablePan={true} enableZoom={true} />\n        \n        <ambientLight intensity={0.6} />\n        <directionalLight position={[10, 10, 5]} intensity={1} />\n        <directionalLight position={[-10, -10, -5]} intensity={0.4} />\n        \n        <STLModel url={fileUrl} />\n      </Canvas>\n\n      {analysis && (\n        <div className=\"absolute bottom-0 left-0 right-0 p-6 bg-muted/30 backdrop-blur-sm\">\n          <h4 className=\"font-medium text-card-foreground mb-3\">Model Analizi</h4>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-muted-foreground\">Boyutlar:</span>\n              <span className=\"ml-2 text-card-foreground\" data-testid=\"text-dimensions\">\n                {analysis.dimensions_mm.map(d => d.toFixed(1)).join('×')} mm\n              </span>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Hacim:</span>\n              <span className=\"ml-2 text-card-foreground\" data-testid=\"text-volume\">\n                {(analysis.volume_mm3 / 1000).toFixed(1)} cm³\n              </span>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Ağırlık:</span>\n              <span className=\"ml-2 text-card-foreground\" data-testid=\"text-weight\">\n                ~{analysis.estimated_weight_g.toFixed(1)} gram\n              </span>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Baskı Süresi:</span>\n              <span className=\"ml-2 text-card-foreground\" data-testid=\"text-print-time\">\n                ~{(analysis.estimated_print_time_minutes / 60).toFixed(1)} saat\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4614},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/file-upload.tsx":{"content":"import { useCallback, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Upload, File, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FileUploadProps {\n  onFileSelect: (file: File) => void;\n  onFileRemove?: () => void;\n  accept?: string;\n  maxSize?: number;\n  className?: string;\n  selectedFile?: File | null;\n}\n\nexport function FileUpload({\n  onFileSelect,\n  onFileRemove,\n  accept = \".stl\",\n  maxSize = 100 * 1024 * 1024, // 100MB\n  className,\n  selectedFile,\n}: FileUploadProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  const onDrop = useCallback(\n    (acceptedFiles: File[]) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        onFileSelect(file);\n      }\n      setIsDragOver(false);\n    },\n    [onFileSelect]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: { \"application/sla\": [\".stl\"] },\n    maxSize,\n    multiple: false,\n    onDragEnter: () => setIsDragOver(true),\n    onDragLeave: () => setIsDragOver(false),\n  });\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  if (selectedFile) {\n    return (\n      <div className={cn(\"bg-card rounded-lg p-6 border border-border\", className)}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <File className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <p className=\"font-medium text-card-foreground\">{selectedFile.name}</p>\n              <p className=\"text-sm text-muted-foreground\">\n                {formatFileSize(selectedFile.size)}\n              </p>\n            </div>\n          </div>\n          {onFileRemove && (\n            <button\n              onClick={onFileRemove}\n              className=\"p-2 text-muted-foreground hover:text-destructive transition-colors\"\n              data-testid=\"button-remove-file\"\n            >\n              <X className=\"w-4 h-4\" />\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      {...getRootProps()}\n      className={cn(\n        \"file-drop-zone bg-card rounded-lg p-8 text-center border-2 border-dashed cursor-pointer transition-all duration-300\",\n        isDragActive || isDragOver\n          ? \"border-primary bg-accent\"\n          : \"border-border hover:border-primary hover:bg-accent\",\n        className\n      )}\n      data-testid=\"file-upload-zone\"\n    >\n      <input {...getInputProps()} data-testid=\"input-file\" />\n      <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n        <Upload className=\"w-8 h-8 text-primary\" />\n      </div>\n      <h3 className=\"text-lg font-semibold text-card-foreground mb-2\">\n        STL Dosyasını Sürükleyin\n      </h3>\n      <p className=\"text-muted-foreground mb-4\">veya dosya seçmek için tıklayın</p>\n      <button\n        type=\"button\"\n        className=\"bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90 transition-colors\"\n        data-testid=\"button-select-file\"\n      >\n        Dosya Seç\n      </button>\n      <p className=\"text-xs text-muted-foreground mt-2\">\n        Maksimum dosya boyutu: {formatFileSize(maxSize)}\n      </p>\n    </div>\n  );\n}\n","size_bytes":3613},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/analytics.tsx":{"content":"import { useState } from \"react\";\nimport { TrendingUp, TrendingDown, Calendar, Download } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { formatTRY } from \"@/utils/format\";\n\nexport default function AdminAnalytics() {\n  const [dateRange, setDateRange] = useState(\"30d\");\n\n  // Mock analytics data\n  const analyticsData = {\n    revenue: {\n      current: 54320,\n      previous: 48750,\n      change: 11.4,\n    },\n    orders: {\n      current: 127,\n      previous: 115,\n      change: 10.4,\n    },\n    users: {\n      current: 89,\n      previous: 76,\n      change: 17.1,\n    },\n    conversion: {\n      current: 24.5,\n      previous: 22.1,\n      change: 10.9,\n    },\n    topProducers: [\n      { name: \"Mehmet Özkan\", orders: 23, revenue: 1245.50 },\n      { name: \"Ayşe Demir\", orders: 19, revenue: 987.25 },\n      { name: \"Can Yılmaz\", orders: 15, revenue: 834.75 },\n      { name: \"Zeynep Kaya\", orders: 12, revenue: 675.00 },\n    ],\n    popularProducts: [\n      { name: \"Telefon Kılıfı\", orders: 45, percentage: 35.4 },\n      { name: \"Anahtarlık\", orders: 32, percentage: 25.2 },\n      { name: \"Telefon Stand\", orders: 28, percentage: 22.0 },\n      { name: \"Bardak Tutacağı\", orders: 22, percentage: 17.3 },\n    ],\n    revenueByMonth: [\n      { month: \"Ocak\", revenue: 42500 },\n      { month: \"Şubat\", revenue: 38750 },\n      { month: \"Mart\", revenue: 51200 },\n      { month: \"Nisan\", revenue: 48900 },\n      { month: \"Mayıs\", revenue: 54320 },\n    ],\n  };\n\n  const handleExportReport = () => {\n    // TODO: Implement report export\n    console.log(\"Exporting analytics report...\");\n  };\n\n  const getChangeColor = (change: number) => {\n    return change >= 0 ? \"text-green-600\" : \"text-red-600\";\n  };\n\n  const getChangeIcon = (change: number) => {\n    return change >= 0 ? (\n      <TrendingUp className=\"w-4 h-4 text-green-600\" />\n    ) : (\n      <TrendingDown className=\"w-4 h-4 text-red-600\" />\n    );\n  };\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"admin-analytics\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">Analitik Raporlar</h2>\n          <p className=\"text-muted-foreground\">Pazaryeri performansını detaylı olarak analiz edin.</p>\n        </div>\n        <div className=\"flex gap-4\">\n          <Select value={dateRange} onValueChange={setDateRange}>\n            <SelectTrigger className=\"w-[180px]\" data-testid=\"select-date-range\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7d\">Son 7 Gün</SelectItem>\n              <SelectItem value=\"30d\">Son 30 Gün</SelectItem>\n              <SelectItem value=\"90d\">Son 3 Ay</SelectItem>\n              <SelectItem value=\"1y\">Son 1 Yıl</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button onClick={handleExportReport} data-testid=\"button-export-report\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Rapor İndir\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Toplam Gelir</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"metric-revenue\">\n                  {formatTRY(analyticsData.revenue.current)}\n                </p>\n                <div className=\"flex items-center space-x-1 mt-1\">\n                  {getChangeIcon(analyticsData.revenue.change)}\n                  <span className={`text-sm font-medium ${getChangeColor(analyticsData.revenue.change)}`}>\n                    %{Math.abs(analyticsData.revenue.change)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Toplam Sipariş</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"metric-orders\">\n                  {analyticsData.orders.current}\n                </p>\n                <div className=\"flex items-center space-x-1 mt-1\">\n                  {getChangeIcon(analyticsData.orders.change)}\n                  <span className={`text-sm font-medium ${getChangeColor(analyticsData.orders.change)}`}>\n                    %{Math.abs(analyticsData.orders.change)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Yeni Kullanıcı</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"metric-users\">\n                  {analyticsData.users.current}\n                </p>\n                <div className=\"flex items-center space-x-1 mt-1\">\n                  {getChangeIcon(analyticsData.users.change)}\n                  <span className={`text-sm font-medium ${getChangeColor(analyticsData.users.change)}`}>\n                    %{Math.abs(analyticsData.users.change)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Dönüşüm Oranı</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"metric-conversion\">\n                  %{analyticsData.conversion.current}\n                </p>\n                <div className=\"flex items-center space-x-1 mt-1\">\n                  {getChangeIcon(analyticsData.conversion.change)}\n                  <span className={`text-sm font-medium ${getChangeColor(analyticsData.conversion.change)}`}>\n                    %{Math.abs(analyticsData.conversion.change)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Top Producers */}\n        <Card>\n          <CardHeader>\n            <CardTitle>En Çok Sipariş Alan Üreticiler</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {analyticsData.topProducers.map((producer, index) => (\n                <div\n                  key={producer.name}\n                  className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\"\n                  data-testid={`top-producer-${index}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-secondary/10 rounded-full flex items-center justify-center\">\n                      <span className=\"text-sm font-medium text-secondary\">\n                        {index + 1}\n                      </span>\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-card-foreground\">{producer.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {producer.orders} sipariş\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium text-card-foreground\">\n                      {formatTRY(producer.revenue)}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Popular Products */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Popüler Ürünler</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {analyticsData.popularProducts.map((product, index) => (\n                <div key={product.name} className=\"space-y-2\" data-testid={`popular-product-${index}`}>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium text-card-foreground\">\n                      {product.name}\n                    </span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {product.orders} sipariş\n                    </span>\n                  </div>\n                  <Progress value={product.percentage} className=\"h-2\" />\n                  <div className=\"text-right\">\n                    <span className=\"text-xs text-muted-foreground\">\n                      %{product.percentage}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Revenue Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Aylık Gelir Trendi</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {analyticsData.revenueByMonth.map((month, index) => (\n              <div\n                key={month.month}\n                className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\"\n                data-testid={`revenue-month-${index}`}\n              >\n                <span className=\"font-medium text-card-foreground\">{month.month}</span>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-48 bg-muted rounded-full h-2\">\n                    <div\n                      className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n                      style={{\n                        width: `${(month.revenue / Math.max(...analyticsData.revenueByMonth.map(m => m.revenue))) * 100}%`\n                      }}\n                    />\n                  </div>\n                  <span className=\"font-medium text-card-foreground min-w-[80px] text-right\">\n                    {formatTRY(month.revenue)}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10931},"client/src/pages/admin/dashboard.tsx":{"content":"import { Users, Factory, RussianRuble, Percent, UserPlus, CheckCircle } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { formatTRY, formatDate } from \"@/utils/format\";\nimport { DashboardStats } from \"@/types\";\n\ninterface AdminDashboardProps {\n  stats?: DashboardStats;\n  recentActivity?: Array<{\n    id: string;\n    type: \"user_registration\" | \"order_completed\" | \"producer_joined\";\n    title: string;\n    description: string;\n    timestamp: string;\n  }>;\n}\n\nexport default function AdminDashboard({ \n  stats = {}, \n  recentActivity = [] \n}: AdminDashboardProps) {\n  const mockStats = {\n    total_users: 1247,\n    active_producers: 89,\n    total_revenue: 54320,\n    commission_earned: 8148,\n    ...stats,\n  };\n\n  const mockActivity = recentActivity.length > 0 ? recentActivity : [\n    {\n      id: \"1\",\n      type: \"user_registration\" as const,\n      title: \"Yeni kullanıcı kaydı\",\n      description: \"can.demir@email.com - 5 dakika önce\",\n      timestamp: \"2024-01-16T15:55:00Z\",\n    },\n    {\n      id: \"2\", \n      type: \"order_completed\" as const,\n      title: \"Sipariş tamamlandı\",\n      description: \"#ORD-2024-156 - ₺75,00 - 15 dakika önce\",\n      timestamp: \"2024-01-16T15:45:00Z\",\n    },\n    {\n      id: \"3\",\n      type: \"producer_joined\" as const,\n      title: \"Yeni üretici katıldı\",\n      description: \"Ankara 3D Baskı - 1 saat önce\",\n      timestamp: \"2024-01-16T15:00:00Z\",\n    },\n  ];\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case \"user_registration\":\n        return <UserPlus className=\"w-4 h-4 text-primary\" />;\n      case \"order_completed\":\n        return <CheckCircle className=\"w-4 h-4 text-secondary\" />;\n      case \"producer_joined\":\n        return <Factory className=\"w-4 h-4 text-accent-foreground\" />;\n      default:\n        return <UserPlus className=\"w-4 h-4 text-primary\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"admin-dashboard\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">Yönetim Paneli</h2>\n        <p className=\"text-muted-foreground\">Pazaryeri istatistiklerini ve kullanıcıları yönetin.</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Toplam Kullanıcı</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-total-users\">\n                  {mockStats.total_users?.toLocaleString('tr-TR')}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-primary\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Aktif Üretici</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-active-producers\">\n                  {mockStats.active_producers}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                <Factory className=\"w-6 h-6 text-secondary\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Bu Ay Ciro</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-total-revenue\">\n                  {formatTRY(mockStats.total_revenue || 0)}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center\">\n                <RussianRuble className=\"w-6 h-6 text-accent-foreground\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Komisyon</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-commission\">\n                  {formatTRY(mockStats.commission_earned || 0)}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n                <Percent className=\"w-6 h-6 text-destructive\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-card-foreground\">Son Aktiviteler</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {mockActivity.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground\">Henüz aktivite bulunmuyor</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {mockActivity.map((activity) => (\n                <div\n                  key={activity.id}\n                  className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\"\n                  data-testid={`activity-${activity.id}`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      {getActivityIcon(activity.type)}\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-card-foreground\" data-testid={`activity-title-${activity.id}`}>\n                        {activity.title}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`activity-description-${activity.id}`}>\n                        {activity.description}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\" data-testid={`activity-time-${activity.id}`}>\n                    {formatDate(activity.timestamp, true)}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"hover:shadow-md transition-shadow cursor-pointer\" data-testid=\"quick-action-users\">\n          <CardContent className=\"p-6 text-center\">\n            <Users className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n            <h3 className=\"font-semibold text-card-foreground mb-1\">Kullanıcı Yönetimi</h3>\n            <p className=\"text-sm text-muted-foreground\">Kullanıcıları görüntüle ve yönet</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover:shadow-md transition-shadow cursor-pointer\" data-testid=\"quick-action-orders\">\n          <CardContent className=\"p-6 text-center\">\n            <CheckCircle className=\"w-8 h-8 text-secondary mx-auto mb-2\" />\n            <h3 className=\"font-semibold text-card-foreground mb-1\">Sipariş Yönetimi</h3>\n            <p className=\"text-sm text-muted-foreground\">Tüm siparişleri incele</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover:shadow-md transition-shadow cursor-pointer\" data-testid=\"quick-action-analytics\">\n          <CardContent className=\"p-6 text-center\">\n            <Percent className=\"w-8 h-8 text-destructive mx-auto mb-2\" />\n            <h3 className=\"font-semibold text-card-foreground mb-1\">Analitik Raporlar</h3>\n            <p className=\"text-sm text-muted-foreground\">Detaylı raporları görüntüle</p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8390},"client/src/pages/admin/orders.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Filter, Download, Eye } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { OrderStatusBadge } from \"@/components/orders/order-timeline\";\nimport { formatTRY, formatDate } from \"@/utils/format\";\nimport { Order } from \"@/types\";\n\nexport default function AdminOrders() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"created_at\");\n\n  // Mock orders data\n  const mockOrders: Order[] = [\n    {\n      id: \"ORD-2024-001\",\n      customer_id: \"customer1\",\n      producer_id: \"producer1\",\n      product_id: \"prod1\",\n      status: \"in_production\",\n      quantity: 1,\n      customer_price: 45.00,\n      producer_earnings: 38.25,\n      platform_commission: 6.75,\n      payment_fee: 1.13,\n      created_at: \"2024-01-15T14:30:00Z\",\n      updated_at: \"2024-01-15T14:30:00Z\",\n      accepted_at: \"2024-01-15T15:00:00Z\",\n      paid_at: \"2024-01-15T15:30:00Z\",\n      product: {\n        id: \"prod1\",\n        user_id: \"customer1\",\n        name: \"Telefon Kılıfı\",\n        status: \"approved\",\n        created_at: \"2024-01-15T14:30:00Z\",\n        updated_at: \"2024-01-15T14:30:00Z\",\n      },\n      customer: {\n        id: \"customer1\",\n        email: \"ahmet@example.com\",\n        name: \"Ahmet Yılmaz\",\n        role: \"customer\" as const,\n        kvkk_consent: true,\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n        is_active: true,\n      },\n      producer: {\n        id: \"producer1\",\n        email: \"mehmet@example.com\",\n        name: \"Mehmet Özkan\",\n        role: \"producer\" as const,\n        kvkv_consent: true,\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n        is_active: true,\n      },\n    },\n    {\n      id: \"ORD-2024-002\",\n      customer_id: \"customer2\",\n      producer_id: \"producer2\",\n      product_id: \"prod2\",\n      status: \"confirmed\",\n      quantity: 1,\n      customer_price: 25.50,\n      producer_earnings: 21.67,\n      platform_commission: 3.83,\n      payment_fee: 0.64,\n      created_at: \"2024-01-12T09:15:00Z\",\n      updated_at: \"2024-01-12T09:15:00Z\",\n      accepted_at: \"2024-01-12T10:00:00Z\",\n      paid_at: \"2024-01-12T10:30:00Z\",\n      completed_at: \"2024-01-13T16:00:00Z\",\n      product: {\n        id: \"prod2\",\n        user_id: \"customer2\",\n        name: \"Anahtarlık\",\n        status: \"approved\",\n        created_at: \"2024-01-12T09:15:00Z\",\n        updated_at: \"2024-01-12T09:15:00Z\",\n      },\n      customer: {\n        id: \"customer2\",\n        email: \"zeynep@example.com\",\n        name: \"Zeynep Kaya\",\n        role: \"customer\" as const,\n        kvkk_consent: true,\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n        is_active: true,\n      },\n      producer: {\n        id: \"producer2\",\n        email: \"ayse@example.com\",\n        name: \"Ayşe Demir\",\n        role: \"producer\" as const,\n        kvkk_consent: true,\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n        is_active: true,\n      },\n    },\n    {\n      id: \"ORD-2024-003\",\n      customer_id: \"customer3\",\n      product_id: \"prod3\",\n      status: \"pending\",\n      quantity: 1,\n      customer_price: 65.00,\n      created_at: \"2024-01-16T10:20:00Z\",\n      updated_at: \"2024-01-16T10:20:00Z\",\n      product: {\n        id: \"prod3\",\n        user_id: \"customer3\",\n        name: \"Telefon Stand\",\n        status: \"approved\",\n        created_at: \"2024-01-16T10:20:00Z\",\n        updated_at: \"2024-01-16T10:20:00Z\",\n      },\n      customer: {\n        id: \"customer3\",\n        email: \"can@example.com\",\n        name: \"Can Demir\",\n        role: \"customer\" as const,\n        kvkk_consent: true,\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n        is_active: true,\n      },\n    },\n  ];\n\n  const filteredOrders = mockOrders.filter(order => {\n    const matchesSearch = \n      order.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.customer?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.producer?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.product?.name.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const sortedOrders = [...filteredOrders].sort((a, b) => {\n    switch (sortBy) {\n      case \"created_at\":\n        return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n      case \"customer_price\":\n        return (b.customer_price || 0) - (a.customer_price || 0);\n      case \"status\":\n        return a.status.localeCompare(b.status);\n      default:\n        return 0;\n    }\n  });\n\n  const handleExportOrders = () => {\n    // TODO: Implement order export functionality\n    console.log(\"Exporting orders...\");\n  };\n\n  const handleViewOrder = (orderId: string) => {\n    // TODO: Implement order detail view\n    console.log(\"Viewing order:\", orderId);\n  };\n\n  const orderStats = {\n    total: mockOrders.length,\n    pending: mockOrders.filter(o => o.status === \"pending\").length,\n    active: mockOrders.filter(o => \n      [\"accepted\", \"paid\", \"in_production\"].includes(o.status)\n    ).length,\n    completed: mockOrders.filter(o => o.status === \"confirmed\").length,\n    totalRevenue: mockOrders.reduce((sum, order) => sum + (order.customer_price || 0), 0),\n    totalCommission: mockOrders.reduce((sum, order) => sum + (order.platform_commission || 0), 0),\n  };\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"admin-orders\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">Sipariş Yönetimi</h2>\n        <p className=\"text-muted-foreground\">Tüm siparişleri görüntüleyin ve yönetin.</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4\">\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-total-orders\">\n              {orderStats.total}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Toplam</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <p className=\"text-2xl font-bold text-yellow-600\" data-testid=\"stat-pending-orders\">\n              {orderStats.pending}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Bekleyen</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <p className=\"text-2xl font-bold text-blue-600\" data-testid=\"stat-active-orders\">\n              {orderStats.active}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Aktif</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <p className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-completed-orders\">\n              {orderStats.completed}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Tamamlanan</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <p className=\"text-lg font-bold text-card-foreground\" data-testid=\"stat-total-revenue\">\n              {formatTRY(orderStats.totalRevenue)}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Toplam Ciro</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <p className=\"text-lg font-bold text-primary\" data-testid=\"stat-total-commission\">\n              {formatTRY(orderStats.totalCommission)}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Komisyon</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle>Siparişler</CardTitle>\n            <Button onClick={handleExportOrders} data-testid=\"button-export-orders\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Dışa Aktar\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Sipariş ara...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-orders\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Durum filtrele\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tüm Durumlar</SelectItem>\n                <SelectItem value=\"pending\">Bekleyen</SelectItem>\n                <SelectItem value=\"accepted\">Kabul Edildi</SelectItem>\n                <SelectItem value=\"paid\">Ödendi</SelectItem>\n                <SelectItem value=\"in_production\">Üretimde</SelectItem>\n                <SelectItem value=\"confirmed\">Tamamlandı</SelectItem>\n                <SelectItem value=\"cancelled\">İptal Edildi</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-[160px]\" data-testid=\"select-sort\">\n                <SelectValue placeholder=\"Sırala\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"created_at\">Tarihe Göre</SelectItem>\n                <SelectItem value=\"customer_price\">Fiyata Göre</SelectItem>\n                <SelectItem value=\"status\">Duruma Göre</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Orders Table */}\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Sipariş</TableHead>\n                  <TableHead>Müşteri</TableHead>\n                  <TableHead>Üretici</TableHead>\n                  <TableHead>Durum</TableHead>\n                  <TableHead>Tarih</TableHead>\n                  <TableHead>Tutar</TableHead>\n                  <TableHead>Komisyon</TableHead>\n                  <TableHead className=\"w-[70px]\"></TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {sortedOrders.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-8\">\n                      <p className=\"text-muted-foreground\">Sipariş bulunamadı</p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  sortedOrders.map((order) => (\n                    <TableRow key={order.id} data-testid={`order-row-${order.id}`}>\n                      <TableCell>\n                        <div>\n                          <p className=\"font-medium text-card-foreground\" data-testid={`order-id-${order.id}`}>\n                            {order.id}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`order-product-${order.id}`}>\n                            {order.product?.name}\n                          </p>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Avatar className=\"w-6 h-6\">\n                            <AvatarFallback className=\"text-xs\">\n                              {order.customer?.name.charAt(0)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <span className=\"text-sm\" data-testid={`order-customer-${order.id}`}>\n                            {order.customer?.name}\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {order.producer ? (\n                          <div className=\"flex items-center space-x-2\">\n                            <Avatar className=\"w-6 h-6\">\n                              <AvatarFallback className=\"text-xs\">\n                                {order.producer.name.charAt(0)}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span className=\"text-sm\" data-testid={`order-producer-${order.id}`}>\n                              {order.producer.name}\n                            </span>\n                          </div>\n                        ) : (\n                          <span className=\"text-sm text-muted-foreground\">-</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <OrderStatusBadge status={order.status} />\n                      </TableCell>\n                      <TableCell data-testid={`order-date-${order.id}`}>\n                        {formatDate(order.created_at)}\n                      </TableCell>\n                      <TableCell data-testid={`order-price-${order.id}`}>\n                        {formatTRY(order.customer_price || 0)}\n                      </TableCell>\n                      <TableCell data-testid={`order-commission-${order.id}`}>\n                        {formatTRY(order.platform_commission || 0)}\n                      </TableCell>\n                      <TableCell>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleViewOrder(order.id)}\n                          data-testid={`button-view-order-${order.id}`}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":15146},"client/src/pages/admin/users.tsx":{"content":"import { useState } from \"react\";\nimport { Search, UserPlus, MoreHorizontal, Shield, Factory, User } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { formatDate } from \"@/utils/format\";\nimport { User as UserType } from \"@/types\";\n\nexport default function AdminUsers() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedRole, setSelectedRole] = useState<string>(\"all\");\n\n  // Mock users data\n  const mockUsers: UserType[] = [\n    {\n      id: \"1\",\n      email: \"admin@example.com\",\n      name: \"Admin User\",\n      role: \"admin\",\n      kvkk_consent: true,\n      created_at: \"2024-01-01T00:00:00Z\",\n      updated_at: \"2024-01-16T10:00:00Z\",\n      last_login: \"2024-01-16T15:30:00Z\",\n      is_active: true,\n    },\n    {\n      id: \"2\",\n      email: \"mehmet@example.com\",\n      name: \"Mehmet Özkan\",\n      role: \"producer\",\n      phone: \"+90 555 123 4567\",\n      kvkk_consent: true,\n      created_at: \"2024-01-05T00:00:00Z\",\n      updated_at: \"2024-01-16T09:00:00Z\",\n      last_login: \"2024-01-16T14:20:00Z\",\n      is_active: true,\n    },\n    {\n      id: \"3\",\n      email: \"ayse@example.com\",\n      name: \"Ayşe Demir\",\n      role: \"producer\",\n      phone: \"+90 555 987 6543\",\n      kvkk_consent: true,\n      created_at: \"2024-01-08T00:00:00Z\",\n      updated_at: \"2024-01-16T08:30:00Z\",\n      last_login: \"2024-01-16T13:45:00Z\",\n      is_active: true,\n    },\n    {\n      id: \"4\",\n      email: \"ahmet@example.com\",\n      name: \"Ahmet Yılmaz\",\n      role: \"customer\",\n      kvkk_consent: true,\n      created_at: \"2024-01-10T00:00:00Z\",\n      updated_at: \"2024-01-16T11:15:00Z\",\n      last_login: \"2024-01-16T16:00:00Z\",\n      is_active: true,\n    },\n    {\n      id: \"5\",\n      email: \"zeynep@example.com\",\n      name: \"Zeynep Kaya\",\n      role: \"customer\",\n      kvkk_consent: true,\n      created_at: \"2024-01-12T00:00:00Z\",\n      updated_at: \"2024-01-16T07:20:00Z\",\n      last_login: \"2024-01-15T19:30:00Z\",\n      is_active: false,\n    },\n  ];\n\n  const filteredUsers = mockUsers.filter(user => {\n    const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRole = selectedRole === \"all\" || user.role === selectedRole;\n    return matchesSearch && matchesRole;\n  });\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return <Shield className=\"w-4 h-4 text-destructive\" />;\n      case \"producer\":\n        return <Factory className=\"w-4 h-4 text-secondary\" />;\n      default:\n        return <User className=\"w-4 h-4 text-primary\" />;\n    }\n  };\n\n  const getRoleBadge = (role: string) => {\n    const variants = {\n      admin: \"destructive\",\n      producer: \"secondary\", \n      customer: \"default\",\n    } as const;\n\n    const labels = {\n      admin: \"Admin\",\n      producer: \"Üretici\",\n      customer: \"Müşteri\",\n    };\n\n    return (\n      <Badge variant={variants[role as keyof typeof variants] || \"default\"}>\n        {labels[role as keyof typeof labels] || role}\n      </Badge>\n    );\n  };\n\n  const handleUserAction = (action: string, userId: string) => {\n    // TODO: Implement user actions (activate, deactivate, delete, etc.)\n    console.log(`Action: ${action}, User: ${userId}`);\n  };\n\n  const userStats = {\n    total: mockUsers.length,\n    admin: mockUsers.filter(u => u.role === \"admin\").length,\n    producer: mockUsers.filter(u => u.role === \"producer\").length,\n    customer: mockUsers.filter(u => u.role === \"customer\").length,\n    active: mockUsers.filter(u => u.is_active).length,\n  };\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"admin-users\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">Kullanıcı Yönetimi</h2>\n        <p className=\"text-muted-foreground\">Tüm kullanıcıları görüntüleyin ve yönetin.</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-total-users\">\n              {userStats.total}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Toplam</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <p className=\"text-2xl font-bold text-destructive\" data-testid=\"stat-admin-users\">\n              {userStats.admin}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Admin</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <p className=\"text-2xl font-bold text-secondary\" data-testid=\"stat-producer-users\">\n              {userStats.producer}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Üretici</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <p className=\"text-2xl font-bold text-primary\" data-testid=\"stat-customer-users\">\n              {userStats.customer}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Müşteri</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-active-users\">\n              {userStats.active}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Aktif</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle>Kullanıcılar</CardTitle>\n            <Button data-testid=\"button-add-user\">\n              <UserPlus className=\"w-4 h-4 mr-2\" />\n              Yeni Kullanıcı\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Kullanıcı ara...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-users\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              {[\"all\", \"admin\", \"producer\", \"customer\"].map((role) => (\n                <Button\n                  key={role}\n                  variant={selectedRole === role ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedRole(role)}\n                  data-testid={`filter-${role}`}\n                >\n                  {role === \"all\" ? \"Tümü\" : \n                   role === \"admin\" ? \"Admin\" :\n                   role === \"producer\" ? \"Üretici\" : \"Müşteri\"}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Users Table */}\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Kullanıcı</TableHead>\n                  <TableHead>Rol</TableHead>\n                  <TableHead>Durum</TableHead>\n                  <TableHead>Kayıt Tarihi</TableHead>\n                  <TableHead>Son Giriş</TableHead>\n                  <TableHead className=\"w-[70px]\"></TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredUsers.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\">\n                      <p className=\"text-muted-foreground\">Kullanıcı bulunamadı</p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredUsers.map((user) => (\n                    <TableRow key={user.id} data-testid={`user-row-${user.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <Avatar className=\"w-8 h-8\">\n                            <AvatarFallback className=\"text-xs\">\n                              {user.name.charAt(0)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <p className=\"font-medium text-card-foreground\" data-testid={`user-name-${user.id}`}>\n                              {user.name}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\" data-testid={`user-email-${user.id}`}>\n                              {user.email}\n                            </p>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          {getRoleIcon(user.role)}\n                          {getRoleBadge(user.role)}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={user.is_active ? \"default\" : \"secondary\"}\n                          data-testid={`user-status-${user.id}`}\n                        >\n                          {user.is_active ? \"Aktif\" : \"Pasif\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell data-testid={`user-created-${user.id}`}>\n                        {formatDate(user.created_at)}\n                      </TableCell>\n                      <TableCell data-testid={`user-last-login-${user.id}`}>\n                        {user.last_login ? formatDate(user.last_login, true) : \"Hiç\"}\n                      </TableCell>\n                      <TableCell>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\" data-testid={`user-actions-${user.id}`}>\n                              <MoreHorizontal className=\"w-4 h-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => handleUserAction(\"view\", user.id)}>\n                              Detayları Görüntüle\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={() => handleUserAction(\"edit\", user.id)}>\n                              Düzenle\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleUserAction(user.is_active ? \"deactivate\" : \"activate\", user.id)}\n                            >\n                              {user.is_active ? \"Pasifleştir\" : \"Aktifleştir\"}\n                            </DropdownMenuItem>\n                            {user.role !== \"admin\" && (\n                              <DropdownMenuItem \n                                onClick={() => handleUserAction(\"delete\", user.id)}\n                                className=\"text-destructive\"\n                              >\n                                Sil\n                              </DropdownMenuItem>\n                            )}\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12432},"client/src/pages/auth/login.tsx":{"content":"import { useState } from \"react\";\nimport { Navigate } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { KvkkNotice } from \"@/components/auth/kvkk-notice\";\nimport { LoginForm } from \"@/components/auth/login-form\";\nimport { PageLoader } from \"@/components/shared/loading-spinner\";\n\nexport default function LoginPage() {\n  const [kvkkAccepted, setKvkkAccepted] = useState(false);\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return <PageLoader />;\n  }\n\n  if (user) {\n    // Redirect based on user role\n    switch (user.role) {\n      case \"admin\":\n        return <Navigate to=\"/admin\" replace />;\n      case \"producer\":\n        return <Navigate to=\"/producer\" replace />;\n      default:\n        return <Navigate to=\"/dashboard\" replace />;\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center gradient-bg p-4\" data-testid=\"login-page\">\n      <div className=\"w-full max-w-md\">\n        {!kvkkAccepted ? (\n          <KvkkNotice onAccept={() => setKvkkAccepted(true)} />\n        ) : (\n          <LoginForm kvkkAccepted={kvkkAccepted} />\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1140},"client/src/pages/customer/dashboard.tsx":{"content":"import { Package, Clock, RussianRuble, MessageCircle, Box } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { OrderStatusBadge } from \"@/components/orders/order-timeline\";\nimport { formatTRY, formatDate } from \"@/utils/format\";\nimport { DashboardStats, Order } from \"@/types\";\n\ninterface CustomerDashboardProps {\n  stats?: DashboardStats;\n  recentOrders?: Order[];\n  onNavigate: (section: string) => void;\n}\n\nexport default function CustomerDashboard({ \n  stats = {}, \n  recentOrders = [], \n  onNavigate \n}: CustomerDashboardProps) {\n  // Mock data for demonstration - replace with real data\n  const mockStats: DashboardStats = {\n    total_orders: 12,\n    active_orders: 3,\n    total_spent: 847.50,\n    messages: 5,\n    ...stats,\n  };\n\n  const mockRecentOrders: Order[] = recentOrders.length > 0 ? recentOrders : [\n    {\n      id: \"ORD-2024-001\",\n      customer_id: \"user1\",\n      product_id: \"prod1\",\n      status: \"in_production\",\n      quantity: 1,\n      customer_price: 45.00,\n      created_at: \"2024-01-15T14:30:00Z\",\n      updated_at: \"2024-01-15T14:30:00Z\",\n      product: {\n        id: \"prod1\",\n        user_id: \"user1\",\n        name: \"Telefon Kılıfı\",\n        status: \"approved\",\n        created_at: \"2024-01-15T14:30:00Z\",\n        updated_at: \"2024-01-15T14:30:00Z\",\n      },\n      producer: {\n        id: \"producer1\",\n        email: \"mehmet@example.com\",\n        name: \"Mehmet Özkan\",\n        role: \"producer\" as const,\n        kvkk_consent: true,\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n        is_active: true,\n      },\n    },\n    {\n      id: \"ORD-2024-002\",\n      customer_id: \"user1\",\n      product_id: \"prod2\",\n      status: \"confirmed\",\n      quantity: 1,\n      customer_price: 25.50,\n      created_at: \"2024-01-12T09:15:00Z\",\n      updated_at: \"2024-01-12T09:15:00Z\",\n      product: {\n        id: \"prod2\",\n        user_id: \"user1\",\n        name: \"Anahtarlık\",\n        status: \"approved\",\n        created_at: \"2024-01-12T09:15:00Z\",\n        updated_at: \"2024-01-12T09:15:00Z\",\n      },\n      producer: {\n        id: \"producer2\",\n        email: \"ayse@example.com\",\n        name: \"Ayşe Demir\",\n        role: \"producer\" as const,\n        kvkk_consent: true,\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n        is_active: true,\n      },\n    },\n  ];\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"customer-dashboard\">\n      {/* Welcome Section */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">Hoş Geldiniz!</h2>\n        <p className=\"text-muted-foreground\">3D baskı siparişlerinizi yönetin ve yeni projeler oluşturun.</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Toplam Sipariş</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-total-orders\">\n                  {mockStats.total_orders}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Package className=\"w-6 h-6 text-primary\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Aktif Sipariş</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-active-orders\">\n                  {mockStats.active_orders}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                <Clock className=\"w-6 h-6 text-secondary\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Toplam Harcama</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-total-spent\">\n                  {formatTRY(mockStats.total_spent || 0)}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center\">\n                <RussianRuble className=\"w-6 h-6 text-accent-foreground\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Mesaj</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-messages\">\n                  {mockStats.messages}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n                <MessageCircle className=\"w-6 h-6 text-destructive\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Orders */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-card-foreground\">Son Siparişler</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {mockRecentOrders.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Box className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">Henüz sipariş bulunmuyor</p>\n              <Button \n                onClick={() => onNavigate(\"upload\")} \n                className=\"mt-4\"\n                data-testid=\"button-create-first-order\"\n              >\n                İlk Siparişinizi Oluşturun\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {mockRecentOrders.map((order) => (\n                <div\n                  key={order.id}\n                  className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\"\n                  data-testid={`order-item-${order.id}`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      <Box className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-card-foreground\" data-testid={`order-name-${order.id}`}>\n                        {order.product?.name}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`order-date-${order.id}`}>\n                        {formatDate(order.created_at, true)}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <OrderStatusBadge status={order.status} data-testid={`order-status-${order.id}`} />\n                    <span className=\"font-medium text-card-foreground\" data-testid={`order-price-${order.id}`}>\n                      {formatTRY(order.customer_price || 0)}\n                    </span>\n                  </div>\n                </div>\n              ))}\n              \n              <div className=\"pt-4 border-t border-border\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => onNavigate(\"orders\")}\n                  className=\"w-full\"\n                  data-testid=\"button-view-all-orders\"\n                >\n                  Tüm Siparişleri Görüntüle\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8335},"client/src/pages/customer/messages.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ChatInterface } from \"@/components/chat/chat-interface\";\nimport { useSocket } from \"@/hooks/use-socket\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Conversation } from \"@/types\";\n\nexport default function CustomerMessages() {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [selectedConversation, setSelectedConversation] = useState<Conversation | undefined>();\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n  const { connected } = useSocket();\n\n  // Mock conversations for demonstration\n  const mockConversations: Conversation[] = [\n    {\n      id: \"conv1\",\n      order_id: \"ORD-2024-001\",\n      other_user: {\n        id: \"producer1\",\n        name: \"Mehmet Özkan\",\n      },\n      last_message: {\n        id: \"msg1\",\n        order_id: \"ORD-2024-001\",\n        sender_id: \"producer1\",\n        receiver_id: \"user1\",\n        content: \"Merhaba! Siparişinizi aldım. Yaklaşık 2 gün içinde tamamlayabilirim.\",\n        is_read: false,\n        created_at: \"2024-01-15T16:30:00Z\",\n      },\n      unread_count: 1,\n    },\n    {\n      id: \"conv2\",\n      order_id: \"ORD-2024-002\",\n      other_user: {\n        id: \"producer2\",\n        name: \"Ayşe Demir\",\n      },\n      last_message: {\n        id: \"msg2\",\n        order_id: \"ORD-2024-002\",\n        sender_id: \"user1\",\n        receiver_id: \"producer2\",\n        content: \"Teşekkür ederim, mükemmel olmuş!\",\n        is_read: true,\n        created_at: \"2024-01-13T18:00:00Z\",\n      },\n      unread_count: 0,\n    },\n  ];\n\n  useEffect(() => {\n    // Load conversations from API\n    const loadConversations = async () => {\n      try {\n        setLoading(true);\n        // TODO: Replace with actual API call\n        setConversations(mockConversations);\n      } catch (error) {\n        console.error(\"Failed to load conversations:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (user) {\n      loadConversations();\n    }\n  }, [user]);\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    setSelectedConversation(conversation);\n    \n    // Mark as read\n    setConversations(prev => \n      prev.map(conv => \n        conv.id === conversation.id \n          ? { ...conv, unread_count: 0 }\n          : conv\n      )\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-8\" data-testid=\"messages-loading\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">Mesajlar</h2>\n          <p className=\"text-muted-foreground\">Üreticilerle iletişim kurun ve siparişlerinizi görüşün.</p>\n        </div>\n        <div className=\"flex items-center justify-center py-12\">\n          <p className=\"text-muted-foreground\">Konuşmalar yükleniyor...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"customer-messages\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">Mesajlar</h2>\n        <p className=\"text-muted-foreground\">\n          Üreticilerle iletişim kurun ve siparişlerinizi görüşün.\n          {connected && (\n            <span className=\"ml-2 text-green-600 text-sm\">● Bağlı</span>\n          )}\n        </p>\n      </div>\n\n      {conversations.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <h3 className=\"text-lg font-semibold text-card-foreground mb-2\">Henüz mesaj bulunmuyor</h3>\n          <p className=\"text-muted-foreground\">\n            Sipariş oluşturduğunuzda üreticilerle mesajlaşmaya başlayabilirsiniz.\n          </p>\n        </div>\n      ) : (\n        <ChatInterface\n          conversations={conversations}\n          selectedConversation={selectedConversation}\n          onSelectConversation={handleSelectConversation}\n          className=\"h-96\"\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":3935},"client/src/pages/customer/orders.tsx":{"content":"import { useState } from \"react\";\nimport { Box, Star, MessageCircle, RotateCcw } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { OrderStatusBadge, OrderTimeline } from \"@/components/orders/order-timeline\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { formatTRY, formatDate } from \"@/utils/format\";\nimport { Order } from \"@/types\";\n\ninterface CustomerOrdersProps {\n  orders?: Order[];\n  onNavigate: (section: string) => void;\n}\n\nexport default function CustomerOrders({ orders = [], onNavigate }: CustomerOrdersProps) {\n  const [activeFilter, setActiveFilter] = useState(\"all\");\n\n  // Mock orders for demonstration\n  const mockOrders: Order[] = orders.length > 0 ? orders : [\n    {\n      id: \"ORD-2024-001\",\n      customer_id: \"user1\",\n      product_id: \"prod1\",\n      status: \"in_production\",\n      quantity: 1,\n      customer_price: 45.00,\n      created_at: \"2024-01-15T14:30:00Z\",\n      updated_at: \"2024-01-15T14:30:00Z\",\n      accepted_at: \"2024-01-15T15:00:00Z\",\n      paid_at: \"2024-01-15T15:30:00Z\",\n      product: {\n        id: \"prod1\",\n        user_id: \"user1\",\n        name: \"Telefon Kılıfı\",\n        status: \"approved\",\n        created_at: \"2024-01-15T14:30:00Z\",\n        updated_at: \"2024-01-15T14:30:00Z\",\n      },\n      producer: {\n        id: \"producer1\",\n        email: \"mehmet@example.com\",\n        name: \"Mehmet Özkan\",\n        role: \"producer\" as const,\n        kvkk_consent: true,\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n        is_active: true,\n      },\n    },\n    {\n      id: \"ORD-2024-002\",\n      customer_id: \"user1\",\n      product_id: \"prod2\",\n      status: \"confirmed\",\n      quantity: 1,\n      customer_price: 25.50,\n      created_at: \"2024-01-12T09:15:00Z\",\n      updated_at: \"2024-01-12T09:15:00Z\",\n      accepted_at: \"2024-01-12T10:00:00Z\",\n      paid_at: \"2024-01-12T10:30:00Z\",\n      completed_at: \"2024-01-13T16:00:00Z\",\n      product: {\n        id: \"prod2\",\n        user_id: \"user1\",\n        name: \"Anahtarlık\",\n        status: \"approved\",\n        created_at: \"2024-01-12T09:15:00Z\",\n        updated_at: \"2024-01-12T09:15:00Z\",\n      },\n      producer: {\n        id: \"producer2\",\n        email: \"ayse@example.com\",\n        name: \"Ayşe Demir\",\n        role: \"producer\" as const,\n        kvkk_consent: true,\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n        is_active: true,\n      },\n    },\n  ];\n\n  const filterOrders = (orders: Order[], filter: string) => {\n    switch (filter) {\n      case \"active\":\n        return orders.filter(order => \n          [\"pending\", \"accepted\", \"paid\", \"in_production\", \"completed_by_producer\"].includes(order.status)\n        );\n      case \"completed\":\n        return orders.filter(order => order.status === \"confirmed\");\n      case \"cancelled\":\n        return orders.filter(order => [\"cancelled\", \"rejected\"].includes(order.status));\n      default:\n        return orders;\n    }\n  };\n\n  const filteredOrders = filterOrders(mockOrders, activeFilter);\n\n  const handleReorder = (order: Order) => {\n    // TODO: Implement reorder functionality\n    console.log(\"Reordering:\", order.id);\n  };\n\n  const handleRateProducer = (order: Order) => {\n    // TODO: Implement rating functionality\n    console.log(\"Rating producer for order:\", order.id);\n  };\n\n  const handleMessageProducer = (order: Order) => {\n    onNavigate(\"messages\");\n    // TODO: Open specific conversation\n  };\n\n  if (mockOrders.length === 0) {\n    return (\n      <div className=\"space-y-8\" data-testid=\"customer-orders-empty\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">Siparişlerim</h2>\n          <p className=\"text-muted-foreground\">Tüm siparişlerinizi takip edin ve yönetin.</p>\n        </div>\n\n        <div className=\"text-center py-12\">\n          <Box className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-card-foreground mb-2\">Henüz sipariş bulunmuyor</h3>\n          <p className=\"text-muted-foreground mb-6\">İlk 3D baskı siparişinizi oluşturun</p>\n          <Button onClick={() => onNavigate(\"upload\")} data-testid=\"button-create-order\">\n            Sipariş Oluştur\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"customer-orders\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">Siparişlerim</h2>\n        <p className=\"text-muted-foreground\">Tüm siparişlerinizi takip edin ve yönetin.</p>\n      </div>\n\n      {/* Order Filters */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Tabs value={activeFilter} onValueChange={setActiveFilter}>\n            <TabsList className=\"w-full justify-start rounded-none border-b\">\n              <TabsTrigger value=\"all\" data-testid=\"filter-all\">\n                Tümü ({mockOrders.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"active\" data-testid=\"filter-active\">\n                Aktif ({filterOrders(mockOrders, \"active\").length})\n              </TabsTrigger>\n              <TabsTrigger value=\"completed\" data-testid=\"filter-completed\">\n                Tamamlanan ({filterOrders(mockOrders, \"completed\").length})\n              </TabsTrigger>\n              <TabsTrigger value=\"cancelled\" data-testid=\"filter-cancelled\">\n                İptal Edilen ({filterOrders(mockOrders, \"cancelled\").length})\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value={activeFilter} className=\"mt-0\">\n              <div className=\"p-6\">\n                {filteredOrders.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-muted-foreground\">Bu kategoride sipariş bulunmuyor</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {filteredOrders.map((order) => (\n                      <Card key={order.id} data-testid={`order-card-${order.id}`}>\n                        <CardContent className=\"p-6\">\n                          {/* Order Header */}\n                          <div className=\"flex items-start justify-between mb-4\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"w-16 h-16 bg-primary/10 rounded-lg flex items-center justify-center\">\n                                <Box className=\"w-8 h-8 text-primary\" />\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-card-foreground\" data-testid={`order-name-${order.id}`}>\n                                  {order.product?.name}\n                                </h3>\n                                <p className=\"text-sm text-muted-foreground\" data-testid={`order-id-${order.id}`}>\n                                  Sipariş #{order.id}\n                                </p>\n                                <p className=\"text-sm text-muted-foreground\" data-testid={`order-date-${order.id}`}>\n                                  {formatDate(order.created_at, true)}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <OrderStatusBadge status={order.status} data-testid={`order-status-${order.id}`} />\n                              <p className=\"text-lg font-semibold text-card-foreground mt-2\" data-testid={`order-price-${order.id}`}>\n                                {formatTRY(order.customer_price || 0)}\n                              </p>\n                            </div>\n                          </div>\n\n                          {/* Order Timeline */}\n                          <OrderTimeline \n                            orderStatus={order.status}\n                            timestamps={{\n                              pending: order.accepted_at,\n                              paid: order.paid_at,\n                              completed: order.completed_at,\n                            }}\n                          />\n\n                          {/* Producer Info & Actions */}\n                          <div className=\"flex items-center justify-between mt-6 pt-6 border-t border-border\">\n                            <div className=\"flex items-center space-x-4\">\n                              {order.producer && (\n                                <>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Avatar className=\"w-6 h-6\">\n                                      <AvatarFallback className=\"text-xs\">\n                                        {order.producer.name.charAt(0)}\n                                      </AvatarFallback>\n                                    </Avatar>\n                                    <span className=\"text-sm text-muted-foreground\">\n                                      Üretici: <span className=\"text-card-foreground font-medium\">{order.producer.name}</span>\n                                    </span>\n                                  </div>\n                                  {order.status === \"confirmed\" && (\n                                    <div className=\"flex items-center space-x-1\">\n                                      {Array.from({ length: 5 }).map((_, i) => (\n                                        <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                                      ))}\n                                    </div>\n                                  )}\n                                </>\n                              )}\n                            </div>\n\n                            <div className=\"flex space-x-2\">\n                              {order.producer && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleMessageProducer(order)}\n                                  data-testid={`button-message-${order.id}`}\n                                >\n                                  <MessageCircle className=\"w-4 h-4 mr-2\" />\n                                  Mesaj Gönder\n                                </Button>\n                              )}\n                              \n                              {order.status === \"confirmed\" && (\n                                <>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => handleReorder(order)}\n                                    data-testid={`button-reorder-${order.id}`}\n                                  >\n                                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                                    Tekrar Sipariş Ver\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    onClick={() => handleRateProducer(order)}\n                                    data-testid={`button-rate-${order.id}`}\n                                  >\n                                    <Star className=\"w-4 h-4 mr-2\" />\n                                    Değerlendir\n                                  </Button>\n                                </>\n                              )}\n\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                data-testid={`button-details-${order.id}`}\n                              >\n                                Detaylar\n                              </Button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12431},"client/src/pages/customer/upload.tsx":{"content":"import { useState } from \"react\";\nimport { FileUpload } from \"@/components/ui/file-upload\";\nimport { STLViewer } from \"@/components/three/stl-viewer\";\nimport { PriceCalculator } from \"@/components/pricing/price-calculator\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { uploadApi } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { STLAnalysis, PricingData } from \"@/types\";\n\nexport default function UploadPage() {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [analysis, setAnalysis] = useState<STLAnalysis | null>(null);\n  const [fileUrl, setFileUrl] = useState<string | null>(null);\n  const [pricing, setPricing] = useState<PricingData | null>(null);\n  const { toast } = useToast();\n\n  const handleFileSelect = async (file: File) => {\n    setSelectedFile(file);\n    setAnalysis(null);\n    setFileUrl(null);\n    \n    // Create local URL for preview\n    const url = URL.createObjectURL(file);\n    setFileUrl(url);\n    \n    // Start upload\n    await handleUpload(file);\n  };\n\n  const handleFileRemove = () => {\n    if (fileUrl) {\n      URL.revokeObjectURL(fileUrl);\n    }\n    setSelectedFile(null);\n    setAnalysis(null);\n    setFileUrl(null);\n    setUploadProgress(0);\n    setPricing(null);\n  };\n\n  const handleUpload = async (file: File) => {\n    setUploading(true);\n    setUploadProgress(0);\n\n    try {\n      const result = await uploadApi.uploadSTL(file, (progress) => {\n        setUploadProgress(progress);\n      });\n\n      if (result.analysis) {\n        setAnalysis(result.analysis);\n      }\n\n      toast({\n        title: \"Dosya yüklendi\",\n        description: \"STL dosyanız başarıyla analiz edildi.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Yükleme hatası\",\n        description: error.message || \"Dosya yüklenirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n      handleFileRemove();\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleOrderSubmit = async () => {\n    if (!selectedFile || !pricing) {\n      toast({\n        title: \"Eksik bilgi\",\n        description: \"Lütfen dosya yükleyin ve fiyat hesaplatın.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // TODO: Implement order creation API call\n      toast({\n        title: \"Sipariş oluşturuldu\",\n        description: \"Siparişiniz başarıyla oluşturuldu. Üretici onayını bekliyor.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Sipariş hatası\",\n        description: error.message || \"Sipariş oluşturulurken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"upload-page\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">STL Dosyası Yükle</h2>\n        <p className=\"text-muted-foreground\">3D modelinizi yükleyin ve fiyat teklifi alın.</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Upload Area */}\n        <div className=\"space-y-6\">\n          {/* File Upload */}\n          {!selectedFile ? (\n            <FileUpload\n              onFileSelect={handleFileSelect}\n              accept=\".stl\"\n              maxSize={100 * 1024 * 1024} // 100MB\n            />\n          ) : (\n            <FileUpload\n              onFileSelect={handleFileSelect}\n              onFileRemove={handleFileRemove}\n              selectedFile={selectedFile}\n            />\n          )}\n\n          {/* Upload Progress */}\n          {uploading && (\n            <Card data-testid=\"upload-progress\">\n              <CardContent className=\"pt-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">Yükleniyor...</span>\n                    <span className=\"text-sm text-muted-foreground\">{Math.round(uploadProgress)}%</span>\n                  </div>\n                  <Progress value={uploadProgress} className=\"w-full\" />\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Pricing Calculator */}\n          {analysis && (\n            <PriceCalculator\n              onPriceChange={setPricing}\n              productId=\"temp\" // Temporary ID for calculation\n            />\n          )}\n        </div>\n\n        {/* 3D Preview Area */}\n        <Card className=\"overflow-hidden\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-semibold text-card-foreground\">3D Önizleme</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <STLViewer\n              fileUrl={fileUrl || undefined}\n              analysis={analysis || undefined}\n              className=\"h-96\"\n            />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Action Buttons */}\n      {selectedFile && (\n        <div className=\"flex justify-end space-x-4\">\n          <Button \n            variant=\"outline\"\n            onClick={() => {\n              // TODO: Implement draft save\n              toast({\n                title: \"Taslak kaydedildi\",\n                description: \"Projeniz taslak olarak kaydedildi.\",\n              });\n            }}\n            data-testid=\"button-save-draft\"\n          >\n            Taslak Kaydet\n          </Button>\n          <Button\n            onClick={handleOrderSubmit}\n            disabled={!pricing}\n            data-testid=\"button-create-order\"\n          >\n            Sipariş Ver\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5863},"client/src/pages/producer/dashboard.tsx":{"content":"import { Package, RussianRuble, Star, CheckCircle } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { OrderStatusBadge } from \"@/components/orders/order-timeline\";\nimport { formatTRY, formatDate } from \"@/utils/format\";\nimport { DashboardStats, Order } from \"@/types\";\n\ninterface ProducerDashboardProps {\n  stats?: DashboardStats;\n  pendingOrders?: Order[];\n}\n\nexport default function ProducerDashboard({ \n  stats = {}, \n  pendingOrders = [] \n}: ProducerDashboardProps) {\n  const mockStats: DashboardStats = {\n    active_orders: 8,\n    total_earnings: 1245.00,\n    rating: 4.8,\n    completed_orders: 156,\n    ...stats,\n  };\n\n  const mockPendingOrders: Order[] = pendingOrders.length > 0 ? pendingOrders : [\n    {\n      id: \"ORD-2024-003\",\n      customer_id: \"customer1\",\n      product_id: \"prod3\",\n      status: \"pending\",\n      quantity: 1,\n      customer_price: 65.00,\n      created_at: \"2024-01-16T10:20:00Z\",\n      updated_at: \"2024-01-16T10:20:00Z\",\n      product: {\n        id: \"prod3\",\n        user_id: \"customer1\",\n        name: \"Telefon Stand\",\n        status: \"approved\",\n        created_at: \"2024-01-16T10:20:00Z\",\n        updated_at: \"2024-01-16T10:20:00Z\",\n      },\n      customer: {\n        id: \"customer1\",\n        email: \"ayse@example.com\",\n        name: \"Ayşe Yılmaz\",\n        role: \"customer\" as const,\n        kvkk_consent: true,\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n        is_active: true,\n      },\n    },\n  ];\n\n  const handleAcceptOrder = async (orderId: string) => {\n    try {\n      // TODO: Implement order acceptance API call\n      console.log(\"Accepting order:\", orderId);\n    } catch (error) {\n      console.error(\"Failed to accept order:\", error);\n    }\n  };\n\n  const handleRejectOrder = async (orderId: string) => {\n    try {\n      // TODO: Implement order rejection API call\n      console.log(\"Rejecting order:\", orderId);\n    } catch (error) {\n      console.error(\"Failed to reject order:\", error);\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"producer-dashboard\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">Üretici Paneli</h2>\n        <p className=\"text-muted-foreground\">Siparişlerinizi yönetin ve kazançlarınızı takip edin.</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Aktif Sipariş</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-active-orders\">\n                  {mockStats.active_orders}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                <Package className=\"w-6 h-6 text-secondary\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Bu Ay Kazanç</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-earnings\">\n                  {formatTRY(mockStats.total_earnings || 0)}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <RussianRuble className=\"w-6 h-6 text-primary\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Değerlendirme</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-rating\">\n                  {mockStats.rating}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center\">\n                <Star className=\"w-6 h-6 text-accent-foreground\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Tamamlanan</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"stat-completed\">\n                  {mockStats.completed_orders}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center\">\n                <CheckCircle className=\"w-6 h-6 text-accent-foreground\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Pending Orders */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-card-foreground\">Bekleyen Siparişler</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {mockPendingOrders.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Package className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">Bekleyen sipariş bulunmuyor</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {mockPendingOrders.map((order) => (\n                <div\n                  key={order.id}\n                  className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\"\n                  data-testid={`pending-order-${order.id}`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      <Package className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-card-foreground\" data-testid={`order-name-${order.id}`}>\n                        {order.product?.name}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`customer-name-${order.id}`}>\n                        Müşteri: {order.customer?.name}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`order-date-${order.id}`}>\n                        {formatDate(order.created_at, true)}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <OrderStatusBadge status={order.status} />\n                    <span className=\"font-medium text-card-foreground\" data-testid={`order-price-${order.id}`}>\n                      {formatTRY(order.customer_price || 0)}\n                    </span>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleRejectOrder(order.id)}\n                        data-testid={`button-reject-${order.id}`}\n                      >\n                        Reddet\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleAcceptOrder(order.id)}\n                        className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n                        data-testid={`button-accept-${order.id}`}\n                      >\n                        Onayla\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8267},"client/src/pages/producer/orders.tsx":{"content":"import { useState } from \"react\";\nimport { Box, Clock, CheckCircle, MessageCircle } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { OrderStatusBadge, OrderTimeline } from \"@/components/orders/order-timeline\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { formatTRY, formatDate } from \"@/utils/format\";\nimport { Order } from \"@/types\";\n\nexport default function ProducerOrders() {\n  const [activeFilter, setActiveFilter] = useState(\"active\");\n\n  // Mock orders for demonstration\n  const mockOrders: Order[] = [\n    {\n      id: \"ORD-2024-001\",\n      customer_id: \"customer1\",\n      product_id: \"prod1\",\n      status: \"in_production\",\n      quantity: 1,\n      customer_price: 45.00,\n      producer_earnings: 38.25,\n      created_at: \"2024-01-15T14:30:00Z\",\n      updated_at: \"2024-01-15T14:30:00Z\",\n      accepted_at: \"2024-01-15T15:00:00Z\",\n      paid_at: \"2024-01-15T15:30:00Z\",\n      product: {\n        id: \"prod1\",\n        user_id: \"customer1\",\n        name: \"Telefon Kılıfı\",\n        status: \"approved\",\n        created_at: \"2024-01-15T14:30:00Z\",\n        updated_at: \"2024-01-15T14:30:00Z\",\n      },\n      customer: {\n        id: \"customer1\",\n        email: \"ahmet@example.com\",\n        name: \"Ahmet Yılmaz\",\n        role: \"customer\" as const,\n        kvkk_consent: true,\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n        is_active: true,\n      },\n    },\n    {\n      id: \"ORD-2024-002\",\n      customer_id: \"customer2\",\n      product_id: \"prod2\",\n      status: \"confirmed\",\n      quantity: 1,\n      customer_price: 25.50,\n      producer_earnings: 21.67,\n      created_at: \"2024-01-12T09:15:00Z\",\n      updated_at: \"2024-01-12T09:15:00Z\",\n      accepted_at: \"2024-01-12T10:00:00Z\",\n      paid_at: \"2024-01-12T10:30:00Z\",\n      completed_at: \"2024-01-13T16:00:00Z\",\n      product: {\n        id: \"prod2\",\n        user_id: \"customer2\",\n        name: \"Anahtarlık\",\n        status: \"approved\",\n        created_at: \"2024-01-12T09:15:00Z\",\n        updated_at: \"2024-01-12T09:15:00Z\",\n      },\n      customer: {\n        id: \"customer2\",\n        email: \"zeynep@example.com\",\n        name: \"Zeynep Kaya\",\n        role: \"customer\" as const,\n        kvkk_consent: true,\n        created_at: \"2024-01-01T00:00:00Z\",\n        updated_at: \"2024-01-01T00:00:00Z\",\n        is_active: true,\n      },\n    },\n  ];\n\n  const filterOrders = (orders: Order[], filter: string) => {\n    switch (filter) {\n      case \"active\":\n        return orders.filter(order => \n          [\"accepted\", \"paid\", \"in_production\", \"completed_by_producer\"].includes(order.status)\n        );\n      case \"pending\":\n        return orders.filter(order => order.status === \"pending\");\n      case \"completed\":\n        return orders.filter(order => order.status === \"confirmed\");\n      default:\n        return orders;\n    }\n  };\n\n  const filteredOrders = filterOrders(mockOrders, activeFilter);\n\n  const handleMarkCompleted = async (orderId: string) => {\n    try {\n      // TODO: Implement mark as completed API call\n      console.log(\"Marking order as completed:\", orderId);\n    } catch (error) {\n      console.error(\"Failed to mark order as completed:\", error);\n    }\n  };\n\n  const handleMessageCustomer = (orderId: string) => {\n    // TODO: Open chat with customer\n    console.log(\"Opening chat for order:\", orderId);\n  };\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"producer-orders\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">Siparişlerim</h2>\n        <p className=\"text-muted-foreground\">Tüm siparişlerinizi yönetin ve takip edin.</p>\n      </div>\n\n      {/* Order Filters */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Tabs value={activeFilter} onValueChange={setActiveFilter}>\n            <TabsList className=\"w-full justify-start rounded-none border-b\">\n              <TabsTrigger value=\"active\" data-testid=\"filter-active\">\n                Aktif ({filterOrders(mockOrders, \"active\").length})\n              </TabsTrigger>\n              <TabsTrigger value=\"pending\" data-testid=\"filter-pending\">\n                Bekleyen ({filterOrders(mockOrders, \"pending\").length})\n              </TabsTrigger>\n              <TabsTrigger value=\"completed\" data-testid=\"filter-completed\">\n                Tamamlanan ({filterOrders(mockOrders, \"completed\").length})\n              </TabsTrigger>\n              <TabsTrigger value=\"all\" data-testid=\"filter-all\">\n                Tümü ({mockOrders.length})\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value={activeFilter} className=\"mt-0\">\n              <div className=\"p-6\">\n                {filteredOrders.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Box className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">Bu kategoride sipariş bulunmuyor</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {filteredOrders.map((order) => (\n                      <Card key={order.id} data-testid={`order-card-${order.id}`}>\n                        <CardContent className=\"p-6\">\n                          {/* Order Header */}\n                          <div className=\"flex items-start justify-between mb-4\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"w-16 h-16 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                                <Box className=\"w-8 h-8 text-secondary\" />\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold text-card-foreground\" data-testid={`order-name-${order.id}`}>\n                                  {order.product?.name}\n                                </h3>\n                                <p className=\"text-sm text-muted-foreground\" data-testid={`order-id-${order.id}`}>\n                                  Sipariş #{order.id}\n                                </p>\n                                <p className=\"text-sm text-muted-foreground\" data-testid={`order-date-${order.id}`}>\n                                  {formatDate(order.created_at, true)}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <OrderStatusBadge status={order.status} />\n                              <p className=\"text-lg font-semibold text-card-foreground mt-2\" data-testid={`order-earnings-${order.id}`}>\n                                {formatTRY(order.producer_earnings || 0)}\n                              </p>\n                              <p className=\"text-sm text-muted-foreground\" data-testid={`order-total-${order.id}`}>\n                                Toplam: {formatTRY(order.customer_price || 0)}\n                              </p>\n                            </div>\n                          </div>\n\n                          {/* Order Timeline */}\n                          <OrderTimeline \n                            orderStatus={order.status}\n                            timestamps={{\n                              pending: order.accepted_at,\n                              paid: order.paid_at,\n                              completed: order.completed_at,\n                            }}\n                          />\n\n                          {/* Customer Info & Actions */}\n                          <div className=\"flex items-center justify-between mt-6 pt-6 border-t border-border\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Avatar className=\"w-6 h-6\">\n                                  <AvatarFallback className=\"text-xs\">\n                                    {order.customer?.name.charAt(0)}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <span className=\"text-sm text-muted-foreground\">\n                                  Müşteri: <span className=\"text-card-foreground font-medium\">{order.customer?.name}</span>\n                                </span>\n                              </div>\n                            </div>\n\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleMessageCustomer(order.id)}\n                                data-testid={`button-message-${order.id}`}\n                              >\n                                <MessageCircle className=\"w-4 h-4 mr-2\" />\n                                Mesaj Gönder\n                              </Button>\n                              \n                              {order.status === \"in_production\" && (\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => handleMarkCompleted(order.id)}\n                                  className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n                                  data-testid={`button-complete-${order.id}`}\n                                >\n                                  <CheckCircle className=\"w-4 h-4 mr-2\" />\n                                  Tamamlandı Olarak İşaretle\n                                </Button>\n                              )}\n\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                data-testid={`button-details-${order.id}`}\n                              >\n                                Detaylar\n                              </Button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10544},"client/src/pages/producer/settings.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Save, Settings as SettingsIcon } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatTRY } from \"@/utils/format\";\n\ninterface ProducerSettings {\n  company_name: string;\n  description: string;\n  hourly_rate: number;\n  fixed_cost: number;\n  margin_percent: number;\n  min_order_amount: number;\n  auto_accept_orders: boolean;\n  materials: {\n    pla: { enabled: boolean; price_per_gram: number };\n    abs: { enabled: boolean; price_per_gram: number };\n    petg: { enabled: boolean; price_per_gram: number };\n    tpu: { enabled: boolean; price_per_gram: number };\n  };\n}\n\nexport default function ProducerSettings() {\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  \n  // Mock settings - replace with actual data\n  const [settings, setSettings] = useState<ProducerSettings>({\n    company_name: \"Özkan 3D Baskı\",\n    description: \"Profesyonel 3D baskı hizmetleri sunuyoruz. Kaliteli malzemeler ve hızlı teslimat garantisi.\",\n    hourly_rate: 5.0,\n    fixed_cost: 2.0,\n    margin_percent: 20,\n    min_order_amount: 10.0,\n    auto_accept_orders: false,\n    materials: {\n      pla: { enabled: true, price_per_gram: 0.02 },\n      abs: { enabled: true, price_per_gram: 0.03 },\n      petg: { enabled: false, price_per_gram: 0.04 },\n      tpu: { enabled: false, price_per_gram: 0.06 },\n    },\n  });\n\n  const handleSave = async () => {\n    setLoading(true);\n    try {\n      // TODO: Implement settings save API call\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n      \n      toast({\n        title: \"Ayarlar kaydedildi\",\n        description: \"Üretici ayarlarınız başarıyla güncellendi.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Kaydetme hatası\",\n        description: \"Ayarlar kaydedilirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const materialNames = {\n    pla: \"PLA\",\n    abs: \"ABS\", \n    petg: \"PETG\",\n    tpu: \"TPU\",\n  };\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"producer-settings\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">Üretici Ayarları</h2>\n        <p className=\"text-muted-foreground\">İş profilinizi ve fiyatlandırma ayarlarınızı yönetin.</p>\n      </div>\n\n      {/* Company Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <SettingsIcon className=\"w-5 h-5\" />\n            <span>Şirket Bilgileri</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"company_name\">Şirket/İşletme Adı</Label>\n              <Input\n                id=\"company_name\"\n                value={settings.company_name}\n                onChange={(e) => setSettings(prev => ({ ...prev, company_name: e.target.value }))}\n                data-testid=\"input-company-name\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Açıklama</Label>\n            <Textarea\n              id=\"description\"\n              value={settings.description}\n              onChange={(e) => setSettings(prev => ({ ...prev, description: e.target.value }))}\n              rows={3}\n              data-testid=\"textarea-description\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pricing Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Fiyatlandırma Ayarları</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"hourly_rate\">Saatlik Ücret</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"hourly_rate\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={settings.hourly_rate}\n                  onChange={(e) => setSettings(prev => ({ ...prev, hourly_rate: parseFloat(e.target.value) || 0 }))}\n                  data-testid=\"input-hourly-rate\"\n                />\n                <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-sm text-muted-foreground\">\n                  ₺/saat\n                </span>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"fixed_cost\">Sabit Maliyet</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"fixed_cost\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={settings.fixed_cost}\n                  onChange={(e) => setSettings(prev => ({ ...prev, fixed_cost: parseFloat(e.target.value) || 0 }))}\n                  data-testid=\"input-fixed-cost\"\n                />\n                <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-sm text-muted-foreground\">\n                  ₺\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <Label>Kar Marjı</Label>\n              <span className=\"text-sm font-medium text-primary\" data-testid=\"text-margin-value\">\n                %{settings.margin_percent}\n              </span>\n            </div>\n            <Slider\n              value={[settings.margin_percent]}\n              onValueChange={([value]) => setSettings(prev => ({ ...prev, margin_percent: value }))}\n              max={50}\n              min={5}\n              step={1}\n              className=\"w-full\"\n              data-testid=\"slider-margin\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"min_order_amount\">Minimum Sipariş Tutarı</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"min_order_amount\"\n                type=\"number\"\n                step=\"0.1\"\n                value={settings.min_order_amount}\n                onChange={(e) => setSettings(prev => ({ ...prev, min_order_amount: parseFloat(e.target.value) || 0 }))}\n                data-testid=\"input-min-order\"\n              />\n              <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-sm text-muted-foreground\">\n                ₺\n              </span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Materials */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Malzeme Fiyatları</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {Object.entries(settings.materials).map(([key, material]) => (\n            <div key={key} className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    checked={material.enabled}\n                    onCheckedChange={(enabled) => \n                      setSettings(prev => ({\n                        ...prev,\n                        materials: {\n                          ...prev.materials,\n                          [key]: { ...prev.materials[key as keyof typeof prev.materials], enabled }\n                        }\n                      }))\n                    }\n                    data-testid={`switch-${key}`}\n                  />\n                  <Label className=\"text-base font-medium\">\n                    {materialNames[key as keyof typeof materialNames]}\n                  </Label>\n                </div>\n                \n                {material.enabled && (\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      type=\"number\"\n                      step=\"0.001\"\n                      value={material.price_per_gram}\n                      onChange={(e) => \n                        setSettings(prev => ({\n                          ...prev,\n                          materials: {\n                            ...prev.materials,\n                            [key]: { \n                              ...prev.materials[key as keyof typeof prev.materials], \n                              price_per_gram: parseFloat(e.target.value) || 0 \n                            }\n                          }\n                        }))\n                      }\n                      className=\"w-24\"\n                      data-testid={`input-price-${key}`}\n                    />\n                    <span className=\"text-sm text-muted-foreground\">₺/gram</span>\n                  </div>\n                )}\n              </div>\n              \n              {key !== \"tpu\" && <Separator />}\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Order Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Sipariş Ayarları</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label className=\"text-base\">Otomatik Sipariş Kabulü</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Gelen siparişleri otomatik olarak kabul et\n              </p>\n            </div>\n            <Switch\n              checked={settings.auto_accept_orders}\n              onCheckedChange={(auto_accept_orders) => \n                setSettings(prev => ({ ...prev, auto_accept_orders }))\n              }\n              data-testid=\"switch-auto-accept\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end\">\n        <Button\n          onClick={handleSave}\n          disabled={loading}\n          className=\"min-w-32\"\n          data-testid=\"button-save-settings\"\n        >\n          {loading ? (\n            \"Kaydediliyor...\"\n          ) : (\n            <>\n              <Save className=\"w-4 h-4 mr-2\" />\n              Ayarları Kaydet\n            </>\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10779}},"version":1}